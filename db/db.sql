-- BASE DE DATOS EN MYSQL

CREATE DATABASE FERRETERIA;

USE FERRETERIA;


CREATE TABLE ESTADO(
    IdEstado INT AUTO_INCREMENT,
    Estado VARCHAR(50) NOT NULL,
    CONSTRAINT PK_ESTADO PRIMARY KEY(IdEstado)
);

CREATE TABLE MUNICIPIO(
    IdMunicipio INT AUTO_INCREMENT,
    Municipio VARCHAR(50) NOT NULL,
    IdEstado INT NOT NULL,
    CONSTRAINT PK_MUNICIPIO PRIMARY KEY(IdMunicipio),
    CONSTRAINT FK_MUNICIPIOTOESTADO FOREIGN KEY(IdEstado) REFERENCES ESTADO(IdEstado)
);

CREATE TABLE CODIGOPOSTAL(
    IdCodigoPostal INT AUTO_INCREMENT,
    CodigoPostal VARCHAR(10) NOT NULL,
    IdMunicipio INT NOT NULL,
    Latitud DECIMAL(10,6),
    Longitud DECIMAL(10,6),
    CONSTRAINT PK_CODIGOPOSTAL PRIMARY KEY(IdCodigoPostal),
    CONSTRAINT FK_CODIGOPOSTALTOMUNICIPIO FOREIGN KEY(IdMunicipio) REFERENCES MUNICIPIO(IdMunicipio)
);

CREATE TABLE COLONIA(
    IdColonia INT AUTO_INCREMENT,
    Colonia VARCHAR(75) NOT NULL,
    IdCodigoPostal INT NOT NULL,
    CONSTRAINT PK_COLONIA PRIMARY KEY(IdColonia),
    CONSTRAINT FK_COLONIATOCODIGOPOSTAL FOREIGN KEY(IdCodigoPostal) REFERENCES CODIGOPOSTAL(IdCodigoPostal)
);

CREATE TABLE DIRECCION(
    IdDireccion INT AUTO_INCREMENT,
    IdCodigoPostal INT NOT NULL,
    IdColonia INT NOT NULL,
    Calle VARCHAR(75) NOT NULL,
    CONSTRAINT PK_DIRECCION PRIMARY KEY(IdDireccion),
    CONSTRAINT FK_DIRECCIONTOCODIGOPOSTAL FOREIGN KEY(IdCodigoPostal) REFERENCES CODIGOPOSTAL(IdCodigoPostal),
    CONSTRAINT FK_DIRECCIONTOCOLONIA FOREIGN KEY(IdColonia) REFERENCES COLONIA(IdColonia)
);

CREATE TABLE SUCURSAL(
    IdSucursal INT AUTO_INCREMENT,
    Nombre VARCHAR(50) NOT NULL,
    IdDireccion INT NOT NULL,
    Telefono VARCHAR(12),
    FechaRegistro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_SUCURSAL PRIMARY KEY(IdSucursal),
    CONSTRAINT FK_SUCURSALTODIRECCION FOREIGN KEY(IdDireccion) REFERENCES DIRECCION(IdDireccion)
);

CREATE TABLE ROL(
  IdRol INT AUTO_INCREMENT,
  Rol VARCHAR(100),
  CONSTRAINT PK_ROL PRIMARY KEY(IdRol)
);

CREATE TABLE TIPOPRODUCTO(
    IdTipoProdcuto INT AUTO_INCREMENT,
    Tipo VARCHAR(100) NOT NULL,
    Estatus INT DEFAULT 1,
    CONSTRAINT PK_TIPOPRODUCTO PRIMARY KEY(IdTipoProdcuto)
);

CREATE TABLE CATEGORIAPRODUCTO(
    IdCategoria INT AUTO_INCREMENT,
    IdTipo INT NOT NULL,
    Categoria VARCHAR(100) NOT NULL,
    Estatus INT DEFAULT 1,
    CONSTRAINT PK_CATEGORIA PRIMARY KEY(IdCategoria),
    CONSTRAINT FK_CATEGORIATOTIPO FOREIGN KEY(IdTipo) REFERENCES TIPOPRODUCTO(IdTipoProdcuto)
);

CREATE TABLE RANGOCLIENTE(
    IdRangoCliente INT AUTO_INCREMENT,
    Rango VARCHAR(50) NOT NULL,
    CONSTRAINT PK_RANGOCLIENTE PRIMARY KEY(IdRangoCliente)
);

CREATE TABLE TIPOGANANCIA(
    IdTipoGanancia INT AUTO_INCREMENT,
    IdTipo INT NOT NULL,
    IdRangoCliente INT NOT NULL,
    Ganancia DECIMAL(64,30),
    CONSTRAINT PK_TIPOGANANCIA PRIMARY KEY(IdTipoGanancia),
    CONSTRAINT FK_TIPOGANANCIATOTIPO FOREIGN KEY(IdTipo) REFERENCES TIPOPRODUCTO(IdTipoProdcuto),
    CONSTRAINT FK_TIPOGANANCIATORANGOCLIENTE FOREIGN KEY(IdRangoCliente) REFERENCES RANGOCLIENTE(IdRangoCliente)
);

CREATE TABLE ESTATUS(
    IdEstatus INT AUTO_INCREMENT,
    Estatus VARCHAR(100),
    CONSTRAINT PK_ESTATUS PRIMARY KEY(IdEstatus)
);

CREATE TABLE PERSONA(
    IdPersona INT AUTO_INCREMENT,
    Nombre VARCHAR(300) NOT NULL,
    ApellidoPaterno VARCHAR(300) NOT NULL,
    ApellidoMaterno VARCHAR(300) NOT NULL,
    Telefono VARCHAR(15) NOT NULL,
    Edad VARCHAR(3) NOT NULL,
    CONSTRAINT PK_PERSONA PRIMARY KEY(IdPersona)
);

CREATE TABLE EMPLEADO(
    IdEmpleado INT AUTO_INCREMENT,
    IdPersona INT NOT NULL,
    IdRol INT NOT NULL,
    IdEstatus INT NOT NULL,
    IdSucursal INT NOT NULL,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_EMPLEADO PRIMARY KEY(IdEmpleado),
    CONSTRAINT FK_EMPLEADOTOPERSONA FOREIGN KEY(IdPersona) REFERENCES PERSONA(IdPersona) ON DELETE CASCADE,
    CONSTRAINT FK_EMPLEADOTOESTATUS FOREIGN KEY(IdEstatus) REFERENCES ESTATUS(IdEstatus) ON DELETE CASCADE,
    CONSTRAINT FK_EMPLEADOTOROL FOREIGN KEY(IdRol) REFERENCES ROL(IdRol) ON DELETE CASCADE,
    CONSTRAINT FK_EMPLEADOTOSUCURSAL FOREIGN KEY(IdSucursal) REFERENCES SUCURSAL(IdSucursal)
);

CREATE TABLE CLIENTE(
    IdCliente INT AUTO_INCREMENT,
    IdPersona INT NOT NULL,
    IdDireccion INT NOT NULL,
    IdRangoCliente INT NOT NULL,
    Credito DECIMAL(10,2) DEFAULT 0,
    CreditoMaximo DECIMAL(10,2) DEFAULT 0,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Estatus INT DEFAULT 1,
    CONSTRAINT PK_CLIENTE PRIMARY KEY(IdCliente),
    CONSTRAINT FK_CLIENTETOESTADO FOREIGN KEY(Estatus) REFERENCES ESTATUS(IdEstatus),
    CONSTRAINT FK_CLIENTETOPERSONA FOREIGN KEY(IdPersona) REFERENCES PERSONA(IdPersona),
    CONSTRAINT FK_CLIENTETODIRECCION FOREIGN KEY(IdDireccion) REFERENCES DIRECCION(IdDireccion),
    CONSTRAINT FK_CLIENTETORANGOCLIENTE FOREIGN KEY(IdRangoCliente) REFERENCES RANGOCLIENTE(IdRangoCliente)
);

CREATE TABLE VENDEDOR_CLIENTE
(
    IdCliente INT NOT NULL,
    IdEmpleado INT NOT NULL,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Activo BOOLEAN DEFAULT TRUE,
    CONSTRAINT PK_VENDEDOR_CLIENTE PRIMARY KEY(IdCliente,IdEmpleado),
    CONSTRAINT FK_VENDEDOR_CLIENTETOCLIENTE FOREIGN KEY(IdCliente) REFERENCES CLIENTE(IdCliente),
    CONSTRAINT FK_VENDEDOR_CLIENTETOEMPLEADO FOREIGN KEY(IdEmpleado) REFERENCES EMPLEADO(IdEmpleado)
);

CREATE TABLE USUARIO(
    IdUsuario INT AUTO_INCREMENT,
    Contrase√±a VARCHAR(100) NOT NULL,
    IdEmpleado INT NOT NULL,
    CONSTRAINT PK_USUARIO PRIMARY KEY(IdUsuario),
    CONSTRAINT FK_USUARIOTOEMPLEADO FOREIGN KEY(IdEmpleado) REFERENCES EMPLEADO(IdEmpleado) ON DELETE CASCADE
);

CREATE TABLE PESO(
    IdPeso INT AUTO_INCREMENT,
    PesoInicial DECIMAL(65,30) NOT NULL,
    PesoFinal DECIMAL(65,30) NOT NULL,
    PesoPromedio DECIMAL(65,30) NOT NULL,
    CONSTRAINT PK_PESO PRIMARY KEY(IdPeso)
);

CREATE TABLE SUBCATEGORIA(
    IdSubcategoria INT AUTO_INCREMENT,
    Subcategoria VARCHAR(100) NOT NULL,
    CostoBase DECIMAL(65,30),
    IdTipo INT NOT NULL,
    ESTATUS INT DEFAULT 1,
    CONSTRAINT PK_SUBCATEGORIA PRIMARY KEY(IdSubcategoria),
    CONSTRAINT FK_SUBCATEGORIATOTIPO FOREIGN KEY(IdTipo) REFERENCES TIPOPRODUCTO(IdTipoProdcuto)
);

CREATE TABLE CARGO(
    IdCargo INT AUTO_INCREMENT,
    NombreCargo VARCHAR(100) NOT NULL,
    Cargo DECIMAL(65,30) NOT NULL,
    IdTipo INT NOT NULL,
    Estatus INT DEFAULT 1,
    CONSTRAINT PK_CARGO PRIMARY KEY(IdCargo),
    CONSTRAINT FK_CARGOTOTIPO FOREIGN KEY(IdTipo) REFERENCES TIPOPRODUCTO(IdTipoProdcuto)
);

CREATE TABLE CARGOGENERAL (
    IdCargoGeneral INT AUTO_INCREMENT,
    NombreCargoGeneral VARCHAR(100),
    Parametro DECIMAL(65,30) NOT NULL,
    Cargo DECIMAL(65,30) NOT NULL,
    CONSTRAINT PK_CARGOGENERAL PRIMARY KEY(IdCargoGeneral)
);

CREATE TABLE PRODUCTO(
    IdProducto INT AUTO_INCREMENT,
    Descripcion VARCHAR(200) NOT NULL,
    IdCategoria INT NOT NULL,
    IdSubcategoria INT NOT NULL,
    IdPeso INT NOT NULL,
    CostoExtra DECIMAL(65,30),
    Estatus INT DEFAULT 1,
    CONSTRAINT PK_PRODUCTO PRIMARY KEY(IdProducto),
    CONSTRAINT FK_PRODUCTOTOPESO FOREIGN KEY(IdPeso) REFERENCES PESO(IdPeso),
    CONSTRAINT FK_PRODUCTOTOCATEGORIA FOREIGN KEY(IdCategoria) REFERENCES CATEGORIAPRODUCTO(IdCategoria),
    CONSTRAINT FK_PRODUCTOTOSUBCATEGORIA FOREIGN KEY(IdSubcategoria) REFERENCES SUBCATEGORIA(IdSubcategoria)
);

CREATE TABLE INVENTARIO_SUCURSAL(
    IdInventario INT AUTO_INCREMENT,
    IdProducto INT NOT NULL,
    IdSucursal INT NOT NULL,
    Stock INT NOT NULL,
    StockMinimo INT DEFAULT 0,
    Estatus INT DEFAULT 1,
    CONSTRAINT PK_INVENTARIO_SUCURSAL PRIMARY KEY(IdInventario),
    CONSTRAINT FK_INVENTARIOTOPRODUCTO FOREIGN KEY(IdProducto) REFERENCES PRODUCTO(IdProducto),
    CONSTRAINT FK_INVENTARIOSUCURSAL FOREIGN KEY(IdSucursal) REFERENCES SUCURSAL(IdSucursal),
    CONSTRAINT FK_INVEBTARIOSUCURSALTOESTADO FOREIGN KEY(Estatus) REFERENCES ESTADO(IdEstado)
);

CREATE TABLE PEDIDO(
    IdPedido INT AUTO_INCREMENT,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    RangoCliente INT NOT NULL,
    Estatus ENUM('Pendiente','Pagado', 'Enviado', 'Entregado', 'Cancelado'),
    Repartidor INT DEFAULT NULL,
    Receptor VARCHAR(100),
    MetodoPago ENUM('Efectivo', 'Transferencia', 'Cheque'),
    IdPago INT NOT NULL,
    CONSTRAINT PK_PEDIDO PRIMARY KEY(IdPedido),
    CONSTRAINT FK_PEDIDOREPARTIDORTOEMPLEADO FOREIGN KEY(Repartidor) REFERENCES EMPLEADO(IdEmpleado),
    CONSTRAINT FK_PEDIDOTORANGOCLIENTE FOREIGN KEY(RangoCliente) REFERENCES RANGOCLIENTE(IdRangoCliente)
);

CREATE TABLE TRANSFERENCIA(
    IdTransferencia INT AUTO_INCREMENT,
    NombreTitular VARCHAR(300) NOT NULL,
    BancoOrigen VARCHAR(100) NOT NULL,
    Concepto VARCHAR(100) NOT NULL,
    Monto DECIMAL(10,2),
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_TRANFERENCIA PRIMARY KEY(IdTransferencia)
);

CREATE TABLE CHEQUE(
    IdCheque INT AUTO_INCREMENT,
    NombreEmisor VARCHAR(300) NOT NULL,
    BancoEmisor VARCHAR(100) NOT NULL,
    NumeroCheque VARCHAR(10) NOT NULL,
    Monto DECIMAL(10,2) NOT NULL,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_CHEQUE PRIMARY KEY(IdCheque)
);

CREATE TABLE EFECTIVO(
    IdEfectivo INT AUTO_INCREMENT,
    NombreTitular VARCHAR(300),
    Monto DECIMAL(10,2),
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_EFECTIVO PRIMARY KEY(IdEfectivo)
);

CREATE TABLE NOTA(
    IdNota INT AUTO_INCREMENT,
    IdCliente INT NOT NULL,
    IdEmpleado INT NOT NULL,
    CONSTRAINT PK_NOTA PRIMARY KEY(IdNota),
    CONSTRAINT FK_NOTATOCLIENTE FOREIGN KEY(IdCliente) REFERENCES CLIENTE(IdCliente),
    CONSTRAINT FK_NOTATOEMPLEADO FOREIGN KEY(IdEmpleado) REFERENCES EMPLEADO(IdEmpleado)
);

CREATE TABLE NOTA_PRODUCTOS(
    IdNotaProducto INT AUTO_INCREMENT,
    IdNota INT NOT NULL,
    IdProducto INT NOT NULL,
    Piezas INT NOT NULL,
    CONSTRAINT PK_PEDIDO_PRODUCTOS PRIMARY KEY(IdNotaProducto),
    CONSTRAINT FK_PEDIDO_PRODUCTOTONOTA FOREIGN KEY(IdNota) REFERENCES NOTA(IdNota),
    CONSTRAINT FK_PEDIDO_PRODUCTOTOPRODUCTO FOREIGN KEY(IdProducto) REFERENCES PRODUCTO(IdProducto)
);

CREATE TABLE BITACORAINVENTARIO(
    IdBitacoraInventario INT AUTO_INCREMENT,
    Usuario INT NOT NULL,
    Accion ENUM('INSERT', 'UPDATE', 'DELETE'),
    Sucursal INT NOT NULL,
    IdProducto INT NOT NULL, -- REGISTRO AFECTADO
    Campo VARCHAR(50),
    ValorAnterior VARCHAR(300),
    ValorNuevo VARCHAR(300),
    Fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_BITACORAINVENTARIO PRIMARY KEY(IdBitacoraInventario),
    CONSTRAINT FK_BITACORAINVENTARIOTOUSUARIO FOREIGN KEY(Usuario) REFERENCES USUARIO(IdUsuario)
);

CREATE TABLE BITACORA(
    IdBitacora INT AUTO_INCREMENT,
    Usuario INT NOT NULL,
    Accion ENUM('INSERT', 'UPDATE', 'DELETE'),
    TablaAfectada VARCHAR(50),
    IdRegistro INT NOT NULL, -- REGISTRO AFECTADO
    Campo VARCHAR(50),
    ValorAnterior VARCHAR(300),
    ValorNuevo VARCHAR(300),
    Fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_BITACORA PRIMARY KEY(IdBitacora),
    CONSTRAINT FK_BITACORATOUSUARIO FOREIGN KEY(Usuario) REFERENCES USUARIO(IdUsuario)
);

ALTER TABLE USUARIO AUTO_INCREMENT = 1001;
SET time_zone = 'America/Mexico_City';

-- DIRECCIONES
DROP FUNCTION  IF EXISTS ObtenerDireccionBYCP;
CREATE FUNCTION ObtenerDireccionBYCP(ID INT)
RETURNS VARCHAR(100)
    DETERMINISTIC
    BEGIN
        DECLARE DIRECCION VARCHAR(100);
        SET DIRECCION = (SELECT CONCAT(E.Estado, ' ', M.Municipio, ' ', C2.Colonia, ' ', C.CodigoPostal) AS DIRECCION FROM ESTADO AS E INNER JOIN MUNICIPIO AS M ON E.IdEstado = M.IdEstado INNER JOIN CODIGOPOSTAL AS C ON M.IdMunicipio = C.IdMunicipio INNER JOIN COLONIA C2 on C.IdCodigoPostal = C2.IdCodigoPostal WHERE C.CodigoPostal = ID LIMIT 1);
        RETURN DIRECCION;
    end;

DROP FUNCTION IF EXISTS FN_OBTENERDIRECCION;
CREATE FUNCTION FN_OBTENERDIRECCION(IDDIR INT)
    RETURNS VARCHAR(100)
    DETERMINISTIC
    BEGIN
        DECLARE DIRECCION VARCHAR(100);
        DECLARE IDCOL INT;
        SET IDCOL = (SELECT IdColonia FROM DIRECCION WHERE IdDireccion = IDDIR LIMIT 1);
        SET DIRECCION = (SELECT CONCAT(D.Calle, ', ', C2.Colonia, ', ', C.CodigoPostal, ', ', M.Municipio, ', ', E.Estado, ', ', 'M√©xico') FROM DIRECCION AS D INNER JOIN CODIGOPOSTAL C on D.IdCodigoPostal = C.IdCodigoPostal INNER JOIN MUNICIPIO M on C.IdMunicipio = M.IdMunicipio INNER JOIN ESTADO E on M.IdEstado = E.IdEstado INNER JOIN COLONIA C2 on C.IdCodigoPostal = C2.IdCodigoPostal WHERE D.IdDireccion = IDDIR AND C2.IdColonia = IDCOL LIMIT 1);
        RETURN DIRECCION;
    end;

DROP PROCEDURE IF EXISTS SP_OBTENERCOLONIAS;
CREATE PROCEDURE SP_OBTENERCOLONIAS(IN COD VARCHAR(10))
    BEGIN
        SELECT M.Municipio FROM CODIGOPOSTAL AS C INNER JOIN MUNICIPIO M on C.IdMunicipio = M.IdMunicipio WHERE C.CodigoPostal = COD LIMIT 1;
        SELECT C2.Colonia, C2.IdColonia AS VALUE FROM CODIGOPOSTAL AS C INNER JOIN COLONIA AS C2 ON C.IdCodigoPostal = C2.IdCodigoPostal WHERE C.CodigoPostal = COD;
        SELECT E.Estado FROM CODIGOPOSTAL AS C INNER JOIN MUNICIPIO AS M ON C.IdMunicipio = M.IdMunicipio INNER JOIN ESTADO AS E ON M.IdEstado = E.IdEstado WHERE C.CodigoPostal = COD LIMIT 1;
    end;

DROP PROCEDURE IF EXISTS SP_REGISTRARDIRECCION;
CREATE PROCEDURE SP_REGISTRARDIRECCION(IN COD VARCHAR(10), IN COL INT, IN CALLEIN VARCHAR(75), IN USERIN INT, OUT IDDIRVAR INT)
    BEGIN
        DECLARE IDCODVAR INT;
        SET IDCODVAR = (SELECT IdCodigoPostal FROM CODIGOPOSTAL AS C WHERE CodigoPostal = COD LIMIT 1);
        INSERT INTO DIRECCION (IdCodigoPostal, IdColonia, Calle) VALUES (IDCODVAR, COL, CALLEIN);
        SET IDDIRVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'DIRECCION', IDDIRVAR, 'Todos','',(SELECT CONCAT(D.Calle, ', ', C.CodigoPostal, ', ', M.Municipio, ', ', E.Estado) FROM DIRECCION AS D INNER JOIN CODIGOPOSTAL AS C ON D.IdCodigoPostal = C.IdCodigoPostal INNER JOIN MUNICIPIO M on C.IdMunicipio = M.IdMunicipio INNER JOIN ESTADO E on M.IdEstado = E.IdEstado WHERE D.IdDireccion = IDDIRVAR LIMIT 1));
    end;

-- SUCURSALES

DROP PROCEDURE IF EXISTS SP_REGISTRARSUCURSAL;
CREATE PROCEDURE SP_REGISTRARSUCURSAL(IN COD VARCHAR(10), IN COL INT, IN CALLEIN VARCHAR(75), IN NOMBREIN VARCHAR(50), IN TELEFONOIN VARCHAR(12), IN USERIN INT)
    BEGIN
        DECLARE LASTIDSUC INT;
        DECLARE IDDIR INT;
        CALL SP_REGISTRARDIRECCION(COD, COL, CALLEIN, USERIN, IDDIR);
        INSERT INTO SUCURSAL (Nombre, IdDireccion, Telefono) VALUE (NOMBREIN, IDDIR, TELEFONOIN);
        SET LASTIDSUC = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'SUCURSAL', LASTIDSUC, 'Todos', '', (SELECT Nombre FROM SUCURSAL WHERE IdSucursal = LASTIDSUC));
        SELECT 1 AS RES;
    end;

DROP PROCEDURE IF EXISTS SP_GETSUCURSALES;
CREATE PROCEDURE SP_GETSUCURSALES()
    BEGIN
        SELECT S.IdSucursal, S.Nombre, (SELECT FN_OBTENERDIRECCION(S.IdDireccion)) AS Direccion, S.Telefono, S.FechaRegistro  FROM SUCURSAL AS S;
    end;

-- LOGIN
DROP PROCEDURE IF EXISTS LOGIN;
CREATE PROCEDURE LOGIN(IN ID INT, IN PASSWORD VARCHAR(50))
BEGIN
    DECLARE USERREGISTER INT;
    DECLARE PASST INT;
    DECLARE USERSTATUS INT;


    SET USERREGISTER = (SELECT IdUsuario FROM USUARIO WHERE IdUsuario = ID);
    IF USERREGISTER IS NULL THEN
        SELECT 0 AS RES; -- EL USUARIO NO EXISTE
    ELSE
        SET PASST = (SELECT IdUsuario FROM USUARIO WHERE IdUsuario = ID AND Contrase√±a = PASSWORD);
        IF PASST IS NULL THEN
            SELECT 1 AS RES; -- CONTRASE√ëA INCORRECTA
        ELSE
            SET USERSTATUS = (SELECT IdEstatus FROM EMPLEADO AS E INNER JOIN USUARIO AS U ON E.IdEmpleado = U.IdEmpleado WHERE U.IdUsuario = ID );
            IF USERSTATUS != 1 THEN
                SELECT 2 AS RES; -- EL ESTATUS NO ESTA ACTIVO
            ELSE
                SELECT U.IdUsuario, E.IdRol, E.IdEstatus, P.Nombre, P.ApellidoPaterno AS Apellido, E.IdSucursal AS Sucursal FROM USUARIO AS U INNER JOIN EMPLEADO AS E ON U.IdEmpleado = E.IdEmpleado INNER JOIN PERSONA AS P ON E.IdPersona = P.IdPersona WHERE IdUsuario = ID AND Contrase√±a = PASSWORD;
            end if;
        end if;
    end if;
END;

DROP PROCEDURE IF EXISTS LOGIN_ESTATUS; --   PARA QUE FUNCIONE CON EL HASH DE CONTRASE√ëAS
CREATE PROCEDURE LOGIN_ESTATUS(IN ID INT, IN OPT INT)
BEGIN
    DECLARE USERREGISTER INT;
    DECLARE USERSTATUS INT;

    IF OPT = 1 THEN
        SELECT Contrase√±a FROM USUARIO WHERE IdUsuario = ID;
    ELSE
        SET USERREGISTER = (SELECT IdUsuario FROM USUARIO WHERE IdUsuario = ID);
        IF USERREGISTER IS NULL THEN
            SELECT 0 AS RES; -- EL USUARIO NO EXISTE
        ELSE
            SET USERSTATUS = (SELECT IdEstatus FROM EMPLEADO AS E INNER JOIN USUARIO AS U ON E.IdEmpleado = U.IdEmpleado WHERE U.IdUsuario = ID );
            IF USERSTATUS != 1 THEN
                SELECT 1 AS RES; -- EL ESTATUS NO ESTA ACTIVO
            ELSE
                SELECT 2 AS RES; -- EL USUARIO EXISTE Y ESTA ACTIVO
            end if;
        end if;
    end if;
END;

DROP PROCEDURE IF EXISTS SP_GETUSERINFO;
CREATE PROCEDURE SP_GETUSERINFO(IN ID INT)
    BEGIN
        SELECT U.IdUsuario, E.IdRol, E.IdEstatus, P.Nombre, P.ApellidoPaterno AS Apellido, E.IdSucursal AS Sucursal FROM USUARIO AS U INNER JOIN EMPLEADO AS E ON U.IdEmpleado = E.IdEmpleado INNER JOIN PERSONA AS P ON E.IdPersona = P.IdPersona WHERE IdUsuario = ID;
    end;

-- Administrador/Empleados

DROP FUNCTION IF EXISTS FN_GETNAMEBYUSERID; -- FUNCION PARA OBTENER EL NOMBRE MEDIANTE EL USERID
CREATE FUNCTION FN_GETNAMEBYUSERID(USERID INT)
    RETURNS VARCHAR(100)
    DETERMINISTIC
    BEGIN
       DECLARE NOMBREUSER VARCHAR(100);
       SET NOMBREUSER = (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) FROM USUARIO AS U INNER JOIN EMPLEADO E on U.IdEmpleado = E.IdEmpleado INNER JOIN PERSONA P on E.IdPersona = P.IdPersona WHERE U.IdUsuario = USERID);
       RETURN NOMBREUSER;
    end;

DROP PROCEDURE IF EXISTS SP_REGISTRARPERSONA;
CREATE PROCEDURE SP_REGISTRARPERSONA(IN NOMBREIN VARCHAR(300), IN APELLIDOPAT VARCHAR(300), IN APELLIDOMAT VARCHAR(300), IN TELEFONOIN VARCHAR(300), IN EDADIN VARCHAR(3), IN USERIN INT, OUT LASTIDPER INT)
    BEGIN
        INSERT INTO PERSONA (Nombre, ApellidoPaterno, ApellidoMaterno, Telefono, Edad) VALUES (NOMBREIN, APELLIDOPAT, APELLIDOMAT, TELEFONOIN, EDADIN);
        SET LASTIDPER = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'PERSONA', LASTIDPER, 'Todos', '', (SELECT CONCAT(Nombre, ' ', ApellidoPaterno) FROM PERSONA WHERE IdPersona = LASTIDPER));
    end;

DROP PROCEDURE IF EXISTS SP_REGISTRAREMPLEADO;
CREATE PROCEDURE SP_REGISTRAREMPLEADO(IN CONTRASE√ëAIN VARCHAR(100), IN NOMBREIN VARCHAR(300), IN APELLIDOPAT VARCHAR(300), IN APELLIDOMAT VARCHAR(300), IN TELEFONOIN VARCHAR(300), IN EDADIN VARCHAR(3), IN IDROLIN INT, IN IDEST INT, IN IDSUC INT, IN USERIN INT)
    BEGIN
        DECLARE  IdEMPVAR INT;
        DECLARE IDPERVAR INT;

        CALL SP_REGISTRARPERSONA(NOMBREIN, APELLIDOPAT, APELLIDOMAT, TELEFONOIN, EDADIN, USERIN, IDPERVAR);
        INSERT INTO EMPLEADO (IdPersona, IdRol, IdEstatus, IdSucursal) VALUES (IDPERVAR, IDROLIN, IDEST, IDSUC);
        SET IdEMPVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'EMPLEADO', IdEMPVAR, 'Todos', '', (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) FROM EMPLEADO AS E INNER JOIN PERSONA P on E.IdPersona = P.IdPersona WHERE E.IdEmpleado = IdEMPVAR));
        INSERT INTO USUARIO (Contrase√±a, IdEmpleado) VALUES (CONTRASE√ëAIN, IdEMPVAR);
        SET IdEMPVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'USUARIO', IdEMPVAR, 'Todos', '', (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) FROM EMPLEADO AS E INNER JOIN PERSONA P on E.IdPersona = P.IdPersona INNER JOIN USUARIO U on E.IdEmpleado = U.IdEmpleado WHERE U.IdUsuario = IdEMPVAR));
    end;

DROP PROCEDURE IF EXISTS SP_GETEMPLEADOS;
CREATE PROCEDURE SP_GETEMPLEADOS(IN IDEMP INT, IN SUCURSALIN INT)
    BEGIN
        SELECT U.IdUsuario AS ID, E.IdEmpleado AS IdEmp, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Nombre, P.Telefono, P.Edad, R.Rol, S.Nombre AS Sucursal, E2.Estatus FROM EMPLEADO AS E INNER JOIN PERSONA P on E.IdPersona = P.IdPersona INNER JOIN ROL R on E.IdRol = R.IdRol INNER JOIN SUCURSAL S on E.IdSucursal = S.IdSucursal INNER JOIN ESTATUS E2 on E.IdEstatus = E2.IdEstatus INNER JOIN USUARIO U on E.IdEmpleado = U.IdEmpleado WHERE E2.IdEstatus != 4 AND U.IdUsuario != IDEMP AND E.IdSucursal = SUCURSALIN ORDER BY U.IdUsuario;
    end;

DROP PROCEDURE IF EXISTS SP_DELETEEMPLEADO;
CREATE PROCEDURE SP_DELETEEMPLEADO(IN ID INT, IN USERID INT)
    BEGIN
        DECLARE NOMBREVAR VARCHAR(100);
        SET NOMBREVAR = (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) FROM USUARIO AS U INNER JOIN  EMPLEADO E2 on U.IdEmpleado = E2.IdEmpleado INNER JOIN PERSONA P on E2.IdPersona = P.IdPersona WHERE E2.IdEmpleado = ID);
        UPDATE EMPLEADO SET IdEstatus = 4 WHERE IdEmpleado = ID;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) SELECT USERID, 'UPDATE', 'CLIENTE', VC.IdCliente, 'Vendedor', NOMBREVAR, 'Sin Vendedor Asignado' FROM VENDEDOR_CLIENTE AS VC WHERE VC.IdEmpleado = ID;
        DELETE FROM VENDEDOR_CLIENTE WHERE IdEmpleado = ID;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'DELETE', 'EMPLEADO', ID, 'Todos', NOMBREVAR, '');
    end;

DROP PROCEDURE IF EXISTS SP_GETNOMBRESUCURSALES;
CREATE  PROCEDURE SP_GETSUCURSALESNOMBRES()
    BEGIN
        SELECT Nombre AS Nombre, IdSucursal AS Id FROM SUCURSAL;
    end;

DROP PROCEDURE IF EXISTS SP_GETEMPLEADO;
CREATE PROCEDURE SP_GETEMPLEADO(IN IDIN INT)
    BEGIN
        SELECT P.Nombre, P.ApellidoPaterno, P.ApellidoMaterno, P.Edad, P.Telefono, E.IdSucursal AS Sucursal, S.Nombre AS NombreSucursal, E.IdRol AS 'Rol', R.Rol AS NombreRol, E.IdEstatus AS 'Estatus' FROM PERSONA AS P INNER JOIN EMPLEADO AS E ON P.IdPersona = E.IdPersona INNER JOIN SUCURSAL S on E.IdSucursal = S.IdSucursal INNER JOIN ROL R on E.IdRol = R.IdRol WHERE E.IdEmpleado = IDIN;
    end;

DROP PROCEDURE IF EXISTS SP_REGISTRARACTUZALICACION;
CREATE PROCEDURE SP_REGISTRARACTUZALICACION(IN USERIN INT, IN TABLAAFECT VARCHAR(50), IN IDREGISTROVAR INT, IN CAMPOIN VARCHAR(100), IN VALORANTERIORIN VARCHAR(100), VALORNUEVOIN VARCHAR(100))
    BEGIN
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'UPDATE', TABLAAFECT, IDREGISTROVAR, CAMPOIN, VALORANTERIORIN, VALORNUEVOIN);
    end;

DROP PROCEDURE IF EXISTS SP_UPDATEEMPLEADO;
CREATE PROCEDURE SP_UPDATEEMPLEADO(IN EMPLEADOIN INT, IN NOMBREIN VARCHAR(50), IN APELLIDOPAT VARCHAR(50), IN APELLIDOMAT VARCHAR(50), IN EDADIN VARCHAR(3), IN TELEFONOIN VARCHAR(10), IN SUCURSALIN INT, IN ROLIN INT, IN ESTATUSIN INT)
    BEGIN
        DECLARE IDPERSONAVAR INT;
        SET IDPERSONAVAR = (SELECT P.IdPersona FROM PERSONA AS P INNER JOIN EMPLEADO E on P.IdPersona = E.IdPersona WHERE E.IdEmpleado = EMPLEADOIN);

        IF IDPERSONAVAR IS NULL THEN
            SELECT 2 AS RES;
        ELSE
            SELECT 1 AS RES;
        end if;

        UPDATE PERSONA SET Nombre = NOMBREIN, ApellidoPaterno = APELLIDOPAT, ApellidoMaterno = APELLIDOMAT, Edad = EDADIN, Telefono = TELEFONOIN WHERE IdPersona = IDPERSONAVAR;
        UPDATE EMPLEADO SET IdSucursal = SUCURSALIN, IdEstatus = ESTATUSIN, IdRol = ROLIN WHERE IdEmpleado = EMPLEADOIN;
    end;

DROP PROCEDURE IF EXISTS SP_FINDEMPLEADO;
CREATE PROCEDURE SP_FINDEMPLEADO(IN NOMBREIN VARCHAR(100))
    BEGIN
        SELECT U.IdUsuario AS ID, E.IdEmpleado AS IdEmp, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Nombre, P.Telefono, P.Edad, R.Rol, S.Nombre AS Sucursal, E2.Estatus FROM EMPLEADO AS E INNER JOIN PERSONA P on E.IdPersona = P.IdPersona INNER JOIN ROL R on E.IdRol = R.IdRol INNER JOIN SUCURSAL S on E.IdSucursal = S.IdSucursal INNER JOIN ESTATUS E2 on E.IdEstatus = E2.IdEstatus INNER JOIN USUARIO U on E.IdEmpleado = U.IdEmpleado WHERE E2.IdEstatus != 4 AND CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN, '%') ORDER BY U.IdUsuario;
    end;

DROP PROCEDURE IF EXISTS SP_GETCLIENTESVENDEDOR;
CREATE PROCEDURE SP_GETCLIENTESVENDEDOR(IN IDDEMP INT, IN NOMBREIN VARCHAR(100))
    BEGIN
        SELECT C.IdCliente, E.IdEmpleado, P.Telefono AS TelefonoCliente, R.Rango AS RangoCliente, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS NombreCliente, (SELECT FN_OBTENERDIRECCION(C.IdDireccion)) AS DireccionCliente,(SELECT FN_GETNAMEBYUSERID(U.IdUsuario)) AS NombreEmpleado FROM VENDEDOR_CLIENTE AS RC RIGHT JOIN CLIENTE AS C ON RC.IdCliente = C.IdCliente LEFT JOIN EMPLEADO AS E ON RC.IdEmpleado = E.IdEmpleado INNER JOIN PERSONA P on C.IdPersona = P.IdPersona INNER JOIN RANGOCLIENTE R on C.IdRangoCliente = R.IdRangoCliente LEFT JOIN USUARIO U on E.IdEmpleado = U.IdEmpleado WHERE C.Estatus = 1 AND RC.IdEmpleado = IDDEMP AND CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN,'%');
        SELECT C.IdCliente, E.IdEmpleado, P.Telefono AS TelefonoCliente, R.Rango AS RangoCliente, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS NombreCliente, (SELECT FN_OBTENERDIRECCION(C.IdDireccion)) AS DireccionCliente,(SELECT FN_GETNAMEBYUSERID(U.IdUsuario)) AS NombreEmpleado FROM VENDEDOR_CLIENTE AS RC RIGHT JOIN CLIENTE AS C ON RC.IdCliente = C.IdCliente LEFT JOIN EMPLEADO AS E ON RC.IdEmpleado = E.IdEmpleado INNER JOIN PERSONA P on C.IdPersona = P.IdPersona INNER JOIN RANGOCLIENTE R on C.IdRangoCliente = R.IdRangoCliente LEFT JOIN USUARIO U on E.IdEmpleado = U.IdEmpleado WHERE CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN,'%') AND C.Estatus = 1 AND (RC.IdEmpleado != IDDEMP OR RC.IdEmpleado IS NULL);
    end;

DROP PROCEDURE IF EXISTS SP_GETINFOVENDEDOR;
CREATE PROCEDURE SP_GETINFOVENDEDOR(IN IDEMP INT)
    BEGIN
        SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) AS NombreEmpleado, S.Nombre AS Sucursal FROM EMPLEADO AS E INNER JOIN PERSONA AS P ON E.IdPersona = P.IdPersona INNER JOIN SUCURSAL AS S ON E.IdSucursal = S.IdSucursal WHERE E.IdEmpleado = IDEMP AND E.IdRol = 1;
    end;

DROP PROCEDURE IF EXISTS SP_UPDATECLIENTEVENDEDOR;
CREATE PROCEDURE SP_UPDATECLIENTEVENDEDOR(IN IDCLIENTEIN INT, IN IDEMP INT, IN USERID INT, IN METODO INT)
    BEGIN
        DECLARE VALORANTERIORVAR VARCHAR(100);
        DECLARE VALORACTUALVAR VARCHAR(100);
        SET VALORANTERIORVAR = (SELECT CONCAT(P2.Nombre, ' ', P2.ApellidoPaterno) FROM VENDEDOR_CLIENTE AS RC INNER JOIN EMPLEADO E2 on RC.IdEmpleado = E2.IdEmpleado INNER JOIN PERSONA P2 on E2.IdPersona = P2.IdPersona WHERE RC.IdCliente = IDCLIENTEIN);
        IF METODO = 1 THEN
            IF VALORANTERIORVAR IS NULL THEN
                SET VALORANTERIORVAR = 'Sin Vendedor Asignado';
            end if;
            SET VALORACTUALVAR = (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) FROM EMPLEADO AS E INNER JOIN PERSONA AS P on E.IdPersona = P.IdPersona WHERE E.IdEmpleado = IDEMP);

            DELETE FROM VENDEDOR_CLIENTE WHERE IdCliente = IDCLIENTEIN;

            INSERT INTO VENDEDOR_CLIENTE (IdCliente, IdEmpleado) VALUES (IDCLIENTEIN, IDEMP);
        ELSE
            SET VALORACTUALVAR = 'Sin Vendedor Asignado';
            DELETE FROM VENDEDOR_CLIENTE WHERE IdCliente = IDCLIENTEIN;
        end if;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'UPDATE','CLIENTE', IDCLIENTEIN, 'Vendedor', VALORANTERIORVAR, VALORACTUALVAR);
    end;


-- ADMINISTRADOR/CLIENTES

DROP PROCEDURE IF EXISTS SP_ADDCLIENTE;
CREATE PROCEDURE SP_ADDCLIENTE(IN COD VARCHAR(10), IN COL INT, IN CALLEIN VARCHAR(75), IN NOMBREIN VARCHAR(300), IN APELLIDOPAT VARCHAR(300), IN APELLIDOMAT VARCHAR(300), IN TELEFONOIN VARCHAR(300), IN EDADIN VARCHAR(3), IN RANGOIN INT, IN CREDITOMAX INT, IN VENDEDORIN INT, IN USERIN INT)
    BEGIN
        DECLARE IDDIR INT;
        DECLARE IDPERVAR INT;
        DECLARE CLIENTEVAR INT;
        CALL SP_REGISTRARDIRECCION(COD, COL, CALLEIN, USERIN, IDDIR);
        CALL SP_REGISTRARPERSONA(NOMBREIN, APELLIDOPAT, APELLIDOMAT, TELEFONOIN, EDADIN, USERIN, IDPERVAR);
        INSERT INTO CLIENTE (IdPersona, IdDireccion, IdRangoCliente, CreditoMaximo) VALUES (IDPERVAR, IDDIR, RANGOIN, CREDITOMAX);
        SET CLIENTEVAR = (SELECT LAST_INSERT_ID());
        IF VENDEDORIN != 0 THEN
            INSERT INTO VENDEDOR_CLIENTE (IdCliente, IdEmpleado) VALUES (CLIENTEVAR, VENDEDORIN);
        end if;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'CLIENTE', CLIENTEVAR, 'Todos', '', (SELECT CONCAT(Nombre, ' ', ApellidoPaterno) FROM PERSONA WHERE IdPersona = IDPERVAR));
    end;

DROP PROCEDURE IF EXISTS SP_GETCLIENTES;
CREATE PROCEDURE SP_GETCLIENTES()
    BEGIN
        SELECT C.IdCliente AS Id, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Nombre, P.Telefono, (SELECT FN_OBTENERDIRECCION(C.IdDireccion)) AS Direccion, P.Edad, R.Rango, FORMAT(C.Credito,2) AS Credito, FORMAT(C.CreditoMaximo,2) AS CreditoMaximo, (SELECT FN_GETNAMEBYUSERID(U.IdUsuario)) AS Vendedor, C.Fecha FROM CLIENTE AS C INNER JOIN PERSONA AS P ON C.IdPersona = P.IdPersona INNER JOIN RANGOCLIENTE AS R ON C.IdRangoCliente = R.IdRangoCliente LEFT JOIN VENDEDOR_CLIENTE VC on C.IdCliente = VC.IdCliente LEFT JOIN USUARIO U on VC.IdEmpleado = U.IdEmpleado WHERE C.Estatus = 1 ORDER BY C.IdCliente;
    end;

DROP PROCEDURE IF EXISTS SP_GETVENDEDORES;
CREATE PROCEDURE SP_GETVENDEDORES()
    BEGIN
        SELECT E.IdEmpleado, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Nombre FROM EMPLEADO AS E INNER JOIN PERSONA AS P ON E.IdPersona = P.IdPersona WHERE E.IdRol = 1 AND E.IdEstatus = 1;
    end;

DROP PROCEDURE IF EXISTS SP_FINDCLIENTE;
CREATE PROCEDURE SP_FINDCLIENTE(IN NOMBREIN VARCHAR(70))
    BEGIN
        SELECT C.IdCliente AS Id, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Nombre, P.Telefono, (SELECT FN_OBTENERDIRECCION(C.IdDireccion)) AS Direccion, P.Edad, R.Rango, FORMAT(C.Credito,2) AS Credito, FORMAT(C.CreditoMaximo,2) AS CreditoMaximo, C.Fecha FROM CLIENTE AS C INNER JOIN PERSONA AS P ON C.IdPersona = P.IdPersona INNER JOIN RANGOCLIENTE AS R ON C.IdRangoCliente = R.IdRangoCliente WHERE CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN, '%') AND C.Estatus = 1;
    end;

DROP PROCEDURE IF EXISTS SP_DELETECLIENTE;
CREATE PROCEDURE SP_DELETECLIENTE(IN ID INT, IN USERID INT)
    BEGIN
        DECLARE NOMBREVAR VARCHAR(100);
        SET NOMBREVAR = (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) FROM CLIENTE AS C INNER JOIN PERSONA P on C.IdPersona = P.IdPersona WHERE C.IdCliente = ID);
        UPDATE CLIENTE SET Estatus = 4 WHERE IdCliente = ID;
        DELETE FROM VENDEDOR_CLIENTE WHERE IdCliente = ID;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'DELETE', 'CLIENTE', ID, 'Todos', NOMBREVAR, '');
    end;

DROP PROCEDURE IF EXISTS SP_GETCLIENTEBYID;
CREATE PROCEDURE SP_GETCLIENTEBYID(IN IDCLIENTEIN INT)
    BEGIN
        SELECT P.Nombre, P.ApellidoPaterno, P.ApellidoMaterno, P.Telefono, VC.IdEmpleado AS Vendedor, (SELECT FN_GETNAMEBYUSERID(U.IdUsuario)) AS NombreVendedor, C2.CodigoPostal AS Codigo, D.IdColonia AS Colonia, C3.Colonia AS NombreColonia, D.Calle, P.Edad, R.IdRangoCliente AS Rango, R.Rango AS NombreRango, C.CreditoMaximo FROM CLIENTE AS C INNER JOIN PERSONA AS P ON C.IdPersona = P.IdPersona INNER JOIN RANGOCLIENTE AS R ON C.IdRangoCliente = R.IdRangoCliente INNER JOIN DIRECCION D on C.IdDireccion = D.IdDireccion INNER JOIN CODIGOPOSTAL C2 on D.IdCodigoPostal = C2.IdCodigoPostal INNER JOIN COLONIA C3 on C2.IdCodigoPostal = C3.IdCodigoPostal LEFT JOIN VENDEDOR_CLIENTE VC on C.IdCliente = VC.IdCliente LEFT JOIN USUARIO U on VC.IdEmpleado = U.IdEmpleado WHERE C.Estatus = 1 AND C.IdCliente = IDCLIENTEIN;
    end;

DROP PROCEDURE IF EXISTS SP_UPDATECLIENTE;
CREATE PROCEDURE SP_UPDATECLIENTE(IN CLIENTEIN INT, IN NOMBREIN VARCHAR(50), IN APELLIDOPAT VARCHAR(50), IN APELLIDOMAT VARCHAR(50), IN EDADIN VARCHAR(3), IN TELEFONOIN VARCHAR(10), IN CODIGOIN INT, IN CALLEIN VARCHAR(100), IN COLONIAIN INT, IN RANGOIN INT, CREDITOMAXIMOIN DECIMAL(10,2), IN VENDEDORIN INT)
    BEGIN
        DECLARE IDPERSONAVAR INT;
        DECLARE IDDIRECCIONVAR INT;
        SET IDDIRECCIONVAR = (SELECT D.IdDireccion FROM DIRECCION AS D INNER JOIN CLIENTE C2 on D.IdDireccion = C2.IdDireccion WHERE C2.IdCliente = CLIENTEIN LIMIT 1);
        SET IDPERSONAVAR = (SELECT P.IdPersona FROM PERSONA AS P INNER JOIN CLIENTE C on P.IdPersona = C.IdPersona WHERE C.IdCliente = CLIENTEIN LIMIT 1);

        IF IDPERSONAVAR IS NULL THEN
            SELECT 2 AS RES;
        ELSE
            SELECT 1 AS RES;
        end if;

        DELETE FROM VENDEDOR_CLIENTE WHERE IdCliente = CLIENTEIN;

        IF VENDEDORIN != 0 THEN
            INSERT INTO VENDEDOR_CLIENTE (IdCliente, IdEmpleado) VALUES (CLIENTEIN, VENDEDORIN);
        end if;

        UPDATE PERSONA SET Nombre = NOMBREIN, ApellidoPaterno = APELLIDOPAT, ApellidoMaterno = APELLIDOMAT, Edad = EDADIN, Telefono = TELEFONOIN WHERE IdPersona = IDPERSONAVAR;
        UPDATE DIRECCION SET IdCodigoPostal = (SELECT C.IdCodigoPostal FROM CODIGOPOSTAL AS C WHERE C.CodigoPostal = CODIGOIN LIMIT 1), IdColonia = COLONIAIN, Calle = CALLEIN WHERE IdDireccion = IDDIRECCIONVAR;
        UPDATE CLIENTE SET IdRangoCliente = RANGOIN, CreditoMaximo = CREDITOMAXIMOIN WHERE IdCliente = CLIENTEIN;
    end;

-- REGISTROS

DROP PROCEDURE IF EXISTS SP_GETREGISTROS;
CREATE PROCEDURE SP_GETREGISTROS(IN TABLAIN VARCHAR(50), IN NOMBREIN VARCHAR(150))
    BEGIN
        IF TABLAIN = 'CLIENTE' THEN
            SELECT B.IdBitacora, B.Accion ,(SELECT FN_GETNAMEBYUSERID(B.Usuario)) AS Usuario, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS RegistroAfectado, B.Campo, B.ValorAnterior, B.ValorNuevo, B.Fecha  FROM BITACORA AS B INNER JOIN CLIENTE C on B.IdRegistro = C.IdCliente INNER JOIN PERSONA P on C.IdPersona = P.IdPersona WHERE B.TablaAfectada = 'CLIENTE' AND CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN,'%') ORDER BY B.IdBitacora;
        end if;
        IF TABLAIN = 'EMPLEADO' THEN
            SELECT B.IdBitacora, B.Accion ,(SELECT FN_GETNAMEBYUSERID(B.Usuario)) AS Usuario, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS RegistroAfectado, B.Campo, B.ValorAnterior, B.ValorNuevo, B.Fecha  FROM BITACORA AS B INNER JOIN EMPLEADO E on B.IdRegistro = E.IdEmpleado INNER JOIN PERSONA P on E.IdPersona = P.IdPersona WHERE B.TablaAfectada = 'EMPLEADO' AND CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN,'%') ORDER BY B.IdBitacora;
        end if;
        IF TABLAIN = 'PRODUCTO' THEN
            SELECT B.IdBitacora, B.Accion ,(SELECT FN_GETNAMEBYUSERID(B.Usuario)) AS Usuario, P.Descripcion AS RegistroAfectado, B.Campo, B.ValorAnterior, B.ValorNuevo, B.Fecha FROM BITACORA AS B INNER JOIN PRODUCTO AS P ON B.IdRegistro = P.IdProducto WHERE B.TablaAfectada = 'PRODUCTO' ORDER BY B.IdBitacora;
        end if;
    end;

SELECT * FROM BITACORA;

-- PRODUCTOS/PROUCTOS

DROP PROCEDURE IF EXISTS SP_INSERTARPRODUCTO;
CREATE PROCEDURE SP_INSERTARPRODUCTO(IN NOMBREIN VARCHAR(200), IN CATEGORIAIN INT, IN PESOINICIALIN DECIMAL(65,30), IN PESOFINALIN DECIMAL(65,30), IN SUBCATEGORIAIN INT, IN COSTOEXTRAIN DECIMAL(65,30), IN USERIN INT)
BEGIN
    DECLARE DESCRIPCIONVAR VARCHAR(300);
    DECLARE PESOVAR INT;
    DECLARE PRODUCTOVAR INT;
    DECLARE CALCPESO DECIMAL(65,30);
    SET CALCPESO = ((PESOINICIALIN+PESOFINALIN)/2);
    SET DESCRIPCIONVAR = (SELECT CONCAT(C.Categoria, ' ', NOMBREIN) FROM CATEGORIAPRODUCTO AS C WHERE C.IdCategoria = CATEGORIAIN LIMIT 1);
    INSERT INTO PESO (PesoInicial, PesoFinal, PesoPromedio) VALUES (PESOINICIALIN, PESOFINALIN, CALCPESO);
    SET PESOVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO PRODUCTO (Descripcion, IdCategoria, IdSubcategoria, IdPeso, CostoExtra) VALUES (DESCRIPCIONVAR, CATEGORIAIN, SUBCATEGORIAIN,PESOVAR, COSTOEXTRAIN);
    SET PRODUCTOVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'PRODUCTO', PRODUCTOVAR,'Todos', '', DESCRIPCIONVAR);
end;

DROP PROCEDURE IF EXISTS SP_INSERTARPRODUCTO_NUEVOTIPO;
CREATE PROCEDURE SP_INSERTARPRODUCTO_NUEVOTIPO(IN NOMBREIN VARCHAR(200), IN TIPOIN VARCHAR(100),IN CATEGORIAIN VARCHAR(100), IN PESOINICIALIN DECIMAL(65,30), IN PESOFINALIN DECIMAL(65,30), IN SUBCATEGORIAIN VARCHAR(100), IN COSTOBASEIN DECIMAL(65,30), IN COSTOEXTRAIN DECIMAL(65,30), IN USERIN INT)
BEGIN
    DECLARE DESCRIPCIONVAR VARCHAR(300);
    DECLARE PESOVAR INT;
    DECLARE PRODUCTOVAR INT;
    DECLARE CALCPESO DECIMAL(65,30);

    DECLARE TIPOVAR INT;
    DECLARE CATEGORIAVAR INT;
    DECLARE SUBCATEGORIAVAR INT;

    SET DESCRIPCIONVAR = (SELECT CONCAT(CATEGORIAIN, ' ', NOMBREIN));
    INSERT INTO TIPOPRODUCTO (Tipo) VALUES (TIPOIN);
    SET TIPOVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'TIPO', TIPOVAR,'Todos', '', TIPOIN);

    INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (TIPOVAR, CATEGORIAIN);
    SET CATEGORIAVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'CATEGORIA', CATEGORIAVAR,'Todos', '', CATEGORIAIN);

    INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES (SUBCATEGORIAIN, COSTOBASEIN, TIPOVAR);
    SET SUBCATEGORIAVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'SUBCATEGORIA', SUBCATEGORIAVAR,'Todos', '', SUBCATEGORIAIN);

    SET CALCPESO = ((PESOINICIALIN+PESOFINALIN)/2);
    INSERT INTO PESO (PesoInicial, PesoFinal, PesoPromedio) VALUES (PESOINICIALIN, PESOFINALIN, CALCPESO);
    SET PESOVAR = (SELECT LAST_INSERT_ID());

    INSERT INTO PRODUCTO (Descripcion, IdCategoria, IdSubcategoria, IdPeso, CostoExtra) VALUES (DESCRIPCIONVAR, CATEGORIAVAR, SUBCATEGORIAVAR,PESOVAR, COSTOEXTRAIN);
    SET PRODUCTOVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'PRODUCTO', PRODUCTOVAR,'Todos', '', DESCRIPCIONVAR);
end;

DROP PROCEDURE IF EXISTS SP_INSERTARPRODUCTO_NUEVACATEGORIA_SUBCATEGORIA;
CREATE PROCEDURE SP_INSERTARPRODUCTO_NUEVACATEGORIA_SUBCATEGORIA(IN NOMBREIN VARCHAR(200), IN TIPOIN INT,IN CATEGORIAIN VARCHAR(100), IN PESOINICIALIN DECIMAL(65,30), IN PESOFINALIN DECIMAL(65,30), IN SUBCATEGORIAIN VARCHAR(100), IN COSTOBASEIN DECIMAL(65,30), IN COSTOEXTRAIN DECIMAL(65,30), IN USERIN INT)
BEGIN
    DECLARE DESCRIPCIONVAR VARCHAR(300);
    DECLARE PESOVAR INT;
    DECLARE PRODUCTOVAR INT;
    DECLARE CALCPESO DECIMAL(65,30);

    DECLARE CATEGORIAVAR INT;
    DECLARE SUBCATEGORIAVAR INT;

    SET DESCRIPCIONVAR = (SELECT CONCAT(CATEGORIAIN, ' ', NOMBREIN));

    INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (TIPOIN, CATEGORIAIN);
    SET CATEGORIAVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'CATEGORIA', CATEGORIAVAR,'Todos', '', CATEGORIAIN);

    INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES (SUBCATEGORIAIN, COSTOBASEIN, TIPOIN);
    SET SUBCATEGORIAVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'SUBCATEGORIA', SUBCATEGORIAVAR,'Todos', '', SUBCATEGORIAIN);

    SET CALCPESO = ((PESOINICIALIN+PESOFINALIN)/2);
    INSERT INTO PESO (PesoInicial, PesoFinal, PesoPromedio) VALUES (PESOINICIALIN, PESOFINALIN, CALCPESO);
    SET PESOVAR = (SELECT LAST_INSERT_ID());

    INSERT INTO PRODUCTO (Descripcion, IdCategoria, IdSubcategoria, IdPeso, CostoExtra) VALUES (DESCRIPCIONVAR, CATEGORIAVAR, SUBCATEGORIAVAR,PESOVAR, COSTOEXTRAIN);
    SET PRODUCTOVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'PRODUCTO', PRODUCTOVAR,'Todos', '', DESCRIPCIONVAR);
end;

DROP PROCEDURE IF EXISTS SP_INSERTARPRODUCTO_NUEVACATEGORIA;
CREATE PROCEDURE SP_INSERTARPRODUCTO_NUEVACATEGORIA(IN NOMBREIN VARCHAR(200), IN TIPOIN INT,IN CATEGORIAIN VARCHAR(100), IN PESOINICIALIN DECIMAL(65,30), IN PESOFINALIN DECIMAL(65,30), IN SUBCATEGORIAIN INT, IN COSTOBASEIN DECIMAL(65,30), IN COSTOEXTRAIN DECIMAL(65,30), IN USERIN INT)
BEGIN
    DECLARE DESCRIPCIONVAR VARCHAR(300);
    DECLARE PESOVAR INT;
    DECLARE PRODUCTOVAR INT;
    DECLARE CALCPESO DECIMAL(65,30);

    DECLARE CATEGORIAVAR INT;

    SET DESCRIPCIONVAR = (SELECT CONCAT(CATEGORIAIN, ' ', NOMBREIN));

    INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (TIPOIN, CATEGORIAIN);
    SET CATEGORIAVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'CATEGORIA', CATEGORIAVAR,'Todos', '', CATEGORIAIN);

    SET CALCPESO = ((PESOINICIALIN+PESOFINALIN)/2);
    INSERT INTO PESO (PesoInicial, PesoFinal, PesoPromedio) VALUES (PESOINICIALIN, PESOFINALIN, CALCPESO);
    SET PESOVAR = (SELECT LAST_INSERT_ID());

    INSERT INTO PRODUCTO (Descripcion, IdCategoria, IdSubcategoria, IdPeso, CostoExtra) VALUES (DESCRIPCIONVAR, CATEGORIAVAR, SUBCATEGORIAIN,PESOVAR, COSTOEXTRAIN);
    SET PRODUCTOVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'PRODUCTO', PRODUCTOVAR,'Todos', '', DESCRIPCIONVAR);
end;

DROP PROCEDURE IF EXISTS SP_INSERTARPRODUCTO_NUEVASUBCATEGORIA;
CREATE PROCEDURE SP_INSERTARPRODUCTO_NUEVASUBCATEGORIA(IN NOMBREIN VARCHAR(200), IN TIPOIN INT,IN CATEGORIAIN INT, IN PESOINICIALIN DECIMAL(65,30), IN PESOFINALIN DECIMAL(65,30), IN SUBCATEGORIAIN VARCHAR(100), IN COSTOBASEIN DECIMAL(65,30), IN COSTOEXTRAIN DECIMAL(65,30), IN USERIN INT)
BEGIN
    DECLARE DESCRIPCIONVAR VARCHAR(300);
    DECLARE PESOVAR INT;
    DECLARE PRODUCTOVAR INT;
    DECLARE CALCPESO DECIMAL(65,30);

    DECLARE SUBCATEGORIAVAR INT;

    SET DESCRIPCIONVAR = (SELECT CONCAT(CATEGORIAIN, ' ', NOMBREIN));

    INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES (SUBCATEGORIAIN, COSTOBASEIN, TIPOIN);
    SET SUBCATEGORIAVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'SUBCATEGORIA', SUBCATEGORIAVAR,'Todos', '', SUBCATEGORIAIN);

    SET CALCPESO = ((PESOINICIALIN+PESOFINALIN)/2);
    INSERT INTO PESO (PesoInicial, PesoFinal, PesoPromedio) VALUES (PESOINICIALIN, PESOFINALIN, CALCPESO);
    SET PESOVAR = (SELECT LAST_INSERT_ID());

    INSERT INTO PRODUCTO (Descripcion, IdCategoria, IdSubcategoria, IdPeso, CostoExtra) VALUES (DESCRIPCIONVAR, CATEGORIAIN, SUBCATEGORIAVAR,PESOVAR, COSTOEXTRAIN);
    SET PRODUCTOVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'PRODUCTO', PRODUCTOVAR,'Todos', '', DESCRIPCIONVAR);
end;

DROP FUNCTION IF EXISTS FN_GETPRECIO;
CREATE FUNCTION FN_GETPRECIO(IDPROD INT, RANGOCL INT)
    RETURNS DECIMAL(65,30)
    DETERMINISTIC
    BEGIN
        DECLARE PRECIOBASEVAR DECIMAL(65,30);
        DECLARE PRECIOCARGOS DECIMAL(65,30);
        DECLARE PRECIOFINAL DECIMAL(65,30);
        DECLARE GANANCIARANGO DECIMAL(65,30);
        DECLARE TIPOPRODVAR INT;
        DECLARE PESOVAR DECIMAL(65,30);
        DECLARE COSTOSEXTRAVAR DECIMAL(65,30);
        DECLARE CARGOSSUM DECIMAL(65,30);

        SET TIPOPRODVAR = (SELECT T2.IdTipoProdcuto FROM PRODUCTO AS P INNER JOIN CATEGORIAPRODUCTO C2 on P.IdCategoria = C2.IdCategoria INNER JOIN TIPOPRODUCTO T2 on C2.IdTipo = T2.IdTipoProdcuto WHERE P.IdProducto = IDPROD LIMIT 1);
        SET PRECIOBASEVAR = (SELECT S.CostoBase FROM PRODUCTO AS P INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria WHERE P.IdProducto = IDPROD LIMIT 1);
        SET CARGOSSUM = (SELECT SUM(C.Cargo) FROM CARGO AS C WHERE C.IdTipo = TIPOPRODVAR AND Estatus = 1);
        IF CARGOSSUM IS NULL THEN
            SET CARGOSSUM = 0;
        end if;
        SET PRECIOCARGOS = ((CARGOSSUM+PRECIOBASEVAR)*1.16);
        SET PESOVAR = (SELECT P2.PesoPromedio FROM PRODUCTO AS P INNER JOIN PESO AS P2 ON P.IdPeso = P2.IdPeso WHERE P.IdProducto = IDPROD LIMIT 1);
        SET GANANCIARANGO = ((((SELECT T.Ganancia FROM TIPOGANANCIA AS T WHERE T.IdRangoCliente = RANGOCL AND T.IdTipo = TIPOPRODVAR)/100)+1));
        SET COSTOSEXTRAVAR = (SELECT P.CostoExtra FROM PRODUCTO AS P WHERE P.IdProducto = IDPROD);
        SET PRECIOFINAL = CEIL(((PRECIOCARGOS*GANANCIARANGO)+COSTOSEXTRAVAR)*PESOVAR);

        RETURN PRECIOFINAL;
    end;

DROP PROCEDURE IF EXISTS SP_GETPRECIO;
CREATE PROCEDURE SP_GETPRECIO(IDPROD INT, RANGOCL INT)
    BEGIN
        DECLARE PRECIOBASEVAR DECIMAL(65,30);
        DECLARE PRECIOCARGOS DECIMAL(65,30);
        DECLARE PRECIOFINAL DECIMAL(65,30);
        DECLARE GANANCIARANGO DECIMAL(65,30);
        DECLARE TIPOPRODVAR INT;
        DECLARE PESOVAR DECIMAL(65,30);
        DECLARE COSTOSEXTRAVAR DECIMAL(65,30);
        DECLARE CARGOSSUM DECIMAL(65,30);

        SET TIPOPRODVAR = (SELECT T2.IdTipoProdcuto FROM PRODUCTO AS P INNER JOIN CATEGORIAPRODUCTO C2 on P.IdCategoria = C2.IdCategoria INNER JOIN TIPOPRODUCTO T2 on C2.IdTipo = T2.IdTipoProdcuto WHERE P.IdProducto = IDPROD LIMIT 1);
        SELECT TIPOPRODVAR;
        SET PRECIOBASEVAR = (SELECT S.CostoBase FROM PRODUCTO AS P INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria WHERE P.IdProducto = IDPROD LIMIT 1);
        SELECT PRECIOBASEVAR;
        SET CARGOSSUM = (SELECT SUM(C.Cargo) FROM CARGO AS C WHERE C.IdTipo = TIPOPRODVAR AND Estatus = 1);
        IF CARGOSSUM IS NULL THEN
            SET CARGOSSUM = 0;
        end if;
        SET PRECIOCARGOS = ((CARGOSSUM+PRECIOBASEVAR)*1.16);
        SELECT PRECIOCARGOS;
        SELECT SUM(C.Cargo) AS CARGOSSUM FROM CARGO AS C WHERE C.IdTipo = TIPOPRODVAR;
        SET PESOVAR = (SELECT P2.PesoPromedio FROM PRODUCTO AS P INNER JOIN PESO AS P2 ON P.IdPeso = P2.IdPeso WHERE P.IdProducto = IDPROD LIMIT 1);
        SELECT PESOVAR;
        SET GANANCIARANGO = ((((SELECT T.Ganancia FROM TIPOGANANCIA AS T WHERE T.IdRangoCliente = RANGOCL AND T.IdTipo = TIPOPRODVAR)/100)+1));
        SELECT GANANCIARANGO;
        SET COSTOSEXTRAVAR = (SELECT P.CostoExtra FROM PRODUCTO AS P WHERE P.IdProducto = IDPROD);
        SET PRECIOFINAL = CEIL(((PRECIOCARGOS*GANANCIARANGO)+COSTOSEXTRAVAR)*PESOVAR);
        SELECT PRECIOFINAL;
        SELECT ((PRECIOCARGOS*GANANCIARANGO)+COSTOSEXTRAVAR)*PESOVAR AS SINRED;
    end;

DROP PROCEDURE IF EXISTS SP_GET_PRODUCTOS_SELECT;
CREATE PROCEDURE SP_GET_PRODUCTOS_SELECT(IN IDTIPOIN INT)
    BEGIN
        SELECT IdTipoProdcuto AS value, Tipo AS label FROM TIPOPRODUCTO ORDER BY Tipo;
        IF IDTIPOIN = 0 THEN -- CATEGORIAS
            SELECT C.IdCategoria AS value, C.Categoria AS label FROM CATEGORIAPRODUCTO AS C ORDER BY C.Categoria;
            ELSE
            SELECT C.IdCategoria AS value, C.Categoria AS label FROM CATEGORIAPRODUCTO AS C WHERE IdTipo = IDTIPOIN ORDER BY C.Categoria;
        end if;
        IF IDTIPOIN = 0 THEN -- SUBCATEGORIAS
                SELECT S.IdSubcategoria AS value, S.Subcategoria AS label FROM SUBCATEGORIA AS S ORDER BY S.Subcategoria;
            ELSE
                SELECT S.IdSubcategoria AS value, S.Subcategoria AS label FROM SUBCATEGORIA AS S WHERE S.IdTipo = IDTIPOIN ORDER BY S.Subcategoria;
        end if;
        SELECT IdRangoCliente AS value, Rango AS label FROM RANGOCLIENTE;
        SELECT Descripcion, IdProducto AS Id FROM PRODUCTO WHERE Estatus = 1;
    end;

DROP PROCEDURE IF EXISTS SP_GETPRODUCTOS;
CREATE PROCEDURE SP_GETPRODUCTOS(IN IDTIPOIN INT, IN IDCATEGORIAIN INT, IN IDSUBCATEGORIAIN INT, IN RANGOIN INT, IN NOMBREIN VARCHAR(200), IN PAGINACIONIN INT)
    BEGIN
        DECLARE INICIOVAR INT;
        DECLARE NOMBRECATEGORIA VARCHAR(200);
        DECLARE NOMBRESUBCATEGORIA VARCHAR(200);
        DECLARE NOMBRETIPO VARCHAR(200);

        SET NOMBRETIPO = (SELECT T.Tipo FROM TIPOPRODUCTO AS T WHERE T.IdTipoProdcuto = IDTIPOIN LIMIT 1);
        IF NOMBRETIPO IS NULL THEN
            SET NOMBRETIPO = '';
        end if;
        SET NOMBRECATEGORIA = (SELECT C.Categoria FROM CATEGORIAPRODUCTO AS C WHERE C.IdCategoria = IDCATEGORIAIN LIMIT 1);
        IF NOMBRECATEGORIA IS NULL THEN
            SET NOMBRECATEGORIA = '';
        end if;
        SET NOMBRESUBCATEGORIA = (SELECT S.Subcategoria FROM SUBCATEGORIA AS S WHERE S.IdSubcategoria = IDSUBCATEGORIAIN LIMIT 1);
        IF NOMBRESUBCATEGORIA IS NULL THEN
            SET NOMBRESUBCATEGORIA = '';
        end if;
        SET INICIOVAR = (PAGINACIONIN-1)*50;

        IF NOMBREIN = '' THEN
            SELECT P.IdProducto, P.Descripcion, T.Tipo, C.Categoria, S.Subcategoria, FORMAT(P2.PesoPromedio,2) AS PesoPromedio, FORMAT(S.CostoBase,2) AS CostoBase, FORMAT(P.CostoExtra,2) AS CostoExtra, FORMAT((SELECT FN_GETPRECIO(P.IdProducto,RANGOIN)),2) AS Precio FROM PRODUCTO AS P INNER JOIN PESO P2 on P.IdPeso = P2.IdPeso INNER JOIN CATEGORIAPRODUCTO C on P.IdCategoria = C.IdCategoria INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria INNER JOIN TIPOPRODUCTO T on C.IdTipo = T.IdTipoProdcuto WHERE T.Tipo LIKE CONCAT('%',NOMBRETIPO,'%') AND C.Categoria LIKE CONCAT('%',NOMBRECATEGORIA,'%') AND S.Subcategoria LIKE CONCAT('%',NOMBRESUBCATEGORIA,'%') AND P.Estatus = 1 AND P.Descripcion LIKE CONCAT('%',NOMBREIN,'%') ORDER BY P.IdProducto LIMIT INICIOVAR, 50;

            SELECT (CEIL(COUNT(P.IdProducto)/50)) AS NumeroPaginas FROM PRODUCTO AS P INNER JOIN PESO P2 on P.IdPeso = P2.IdPeso INNER JOIN CATEGORIAPRODUCTO C on P.IdCategoria = C.IdCategoria INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria INNER JOIN TIPOPRODUCTO T on C.IdTipo = T.IdTipoProdcuto WHERE T.Tipo LIKE CONCAT('%',NOMBRETIPO,'%') AND C.Categoria LIKE CONCAT('%',NOMBRECATEGORIA,'%') AND S.Subcategoria LIKE CONCAT('%',NOMBRESUBCATEGORIA,'%') AND P.Estatus = 1 AND P.Descripcion LIKE CONCAT('%',NOMBREIN,'%');

        ELSE
            SELECT P.IdProducto, P.Descripcion, T.Tipo, C.Categoria, S.Subcategoria, FORMAT(P2.PesoPromedio,2) AS PesoPromedio, FORMAT(S.CostoBase,2) AS CostoBase, FORMAT(P.CostoExtra,2) AS CostoExtra, FORMAT((SELECT FN_GETPRECIO(P.IdProducto,RANGOIN)),2) AS Precio FROM PRODUCTO AS P INNER JOIN PESO P2 on P.IdPeso = P2.IdPeso INNER JOIN CATEGORIAPRODUCTO C on P.IdCategoria = C.IdCategoria INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria INNER JOIN TIPOPRODUCTO T on C.IdTipo = T.IdTipoProdcuto WHERE P.Descripcion LIKE CONCAT('%',NOMBREIN,'%') AND P.Estatus = 1 ORDER BY P.IdProducto LIMIT INICIOVAR, 50;

            SELECT (CEIL(COUNT(P.IdProducto)/50)) AS NumeroPaginas FROM PRODUCTO AS P INNER JOIN PESO P2 on P.IdPeso = P2.IdPeso INNER JOIN CATEGORIAPRODUCTO C on P.IdCategoria = C.IdCategoria INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria INNER JOIN TIPOPRODUCTO T on C.IdTipo = T.IdTipoProdcuto WHERE P.Descripcion LIKE CONCAT('%',NOMBREIN,'%') AND P.Estatus = 1;
        end if;

    end;

DROP PROCEDURE IF EXISTS SP_GETPRODUCTOBYID;
CREATE PROCEDURE SP_GETPRODUCTOBYID(IN IDIN INT)
    BEGIN
        SELECT P.Descripcion, T.IdTipoProdcuto AS Tipo, T.Tipo AS NombreTipo, C.IdCategoria AS Categoria, C.Categoria AS NombreCategoria, S.IdSubcategoria AS Subcategoria, S.Subcategoria AS NombreSubcategoria, FORMAT(P2.PesoInicial,2) AS PesoInicial, FORMAT(P2.PesoFinal,2) AS PesoFinal, FORMAT(P.CostoExtra,2) AS CostoExtra FROM PRODUCTO AS P INNER JOIN CATEGORIAPRODUCTO AS C ON C.IdCategoria = P.IdCategoria INNER JOIN TIPOPRODUCTO T on C.IdTipo = T.IdTipoProdcuto INNER JOIN SUBCATEGORIA S ON P.IdSubcategoria = S.IdSubcategoria INNER JOIN PESO P2 on P.IdPeso = P2.IdPeso WHERE P.IdProducto = IDIN;
    end;

DROP PROCEDURE IF EXISTS SP_UPDATEPRODUCTO;
CREATE PROCEDURE SP_UPDATEPRODUCTO(IN IDIN INT, IN NOMBREIN VARCHAR(200), IN CATEGORIAIN INT, IN SUBCATEGORIAIN INT, IN PESOINICIALIN DECIMAL(65,30), IN PESOFINALIN DECIMAL(65,30), IN COSTOEXTRAIN DECIMAL(65,30))
    BEGIN
        DECLARE PESOVAR INT;
        SET PESOVAR = (SELECT P.IdPeso FROM PRODUCTO AS P WHERE P.IdProducto = IDIN);
        UPDATE PESO SET PesoInicial = PESOINICIALIN, PesoFinal = PESOFINALIN WHERE IdPeso = PESOVAR;
        UPDATE PRODUCTO SET Descripcion = NOMBREIN, IdCategoria = CATEGORIAIN, IdSubcategoria = SUBCATEGORIAIN, CostoExtra = COSTOEXTRAIN WHERE IdProducto = IDIN;
    end;


DROP PROCEDURE IF EXISTS SP_DELETEPRODUCTO;
CREATE PROCEDURE SP_DELETEPRODUCTO(IN ID INT, IN USERID INT)
    BEGIN
        DECLARE NOMBREVAR VARCHAR(100);
        SET NOMBREVAR = (SELECT P.Descripcion FROM PRODUCTO AS P WHERE P.IdProducto = ID);
        UPDATE PRODUCTO SET Estatus = 4 WHERE IdProducto = ID;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'DELETE', 'PRODUCTO', ID, 'Todos', NOMBREVAR, '');
    end;

-- PRODUCTOS/TIPOS

DROP FUNCTION IF EXISTS FN_GETGANANCIATIPO;
CREATE FUNCTION FN_GETGANANCIATIPO(IDTIPOIN INT, IDRANGOIN INT)
    RETURNS DECIMAL(65,2)
    DETERMINISTIC
    BEGIN
        DECLARE GANANCIAVAR DECIMAL(65,2);
        SET GANANCIAVAR = (SELECT FORMAT(T.Ganancia,2) FROM TIPOGANANCIA AS T WHERE T.IdTipo = IDTIPOIN AND T.IdRangoCliente = IDRANGOIN LIMIT 1);
        RETURN  GANANCIAVAR;
    end;


DROP PROCEDURE IF EXISTS SP_GETTIPOS;
CREATE PROCEDURE SP_GETTIPOS(IN NOMBREIN VARCHAR(100), IN PAGINACIONIN INT)
    BEGIN
        DECLARE INICIOVAR INT;
        SET INICIOVAR = (PAGINACIONIN-1)*50;
        SELECT T.IdTipoProdcuto AS IdTipo, T.Tipo, COUNT(P.IdProducto) AS Cantidad, (SELECT FN_GETGANANCIATIPO(T.IdTipoProdcuto,1)) AS GP1, (SELECT FN_GETGANANCIATIPO(T.IdTipoProdcuto,2)) AS GH2, (SELECT FN_GETGANANCIATIPO(T.IdTipoProdcuto,3)) AS GH3, (SELECT FN_GETGANANCIATIPO(T.IdTipoProdcuto,4)) AS GH4, (SELECT FN_GETGANANCIATIPO(T.IdTipoProdcuto,5)) AS GMY1, (SELECT FN_GETGANANCIATIPO(T.IdTipoProdcuto,6)) AS GMY2 FROM TIPOPRODUCTO AS T LEFT JOIN CATEGORIAPRODUCTO C on T.IdTipoProdcuto = C.IdTipo LEFT JOIN PRODUCTO P on C.IdCategoria = P.IdCategoria WHERE T.Tipo LIKE CONCAT('%',NOMBREIN,'%') AND T.Estatus = 1 GROUP BY T.IdTipoProdcuto, T.Tipo LIMIT INICIOVAR, 50;
        SELECT T.Tipo AS Descripcion, T.IdTipoProdcuto AS Id FROM TIPOPRODUCTO AS T WHERE T.Estatus = 1;
        SELECT (CEIL(COUNT(T.IdTipoProdcuto)/50)) AS NumeroPaginas FROM TIPOPRODUCTO AS T WHERE T.Tipo LIKE CONCAT('%',NOMBREIN,'%') AND T.Estatus = 1;
    end;

DROP PROCEDURE IF EXISTS SP_ADDTIPOS;
CREATE  PROCEDURE SP_ADDTIPOS(IN NOMBREIN VARCHAR(100), IN GPUB1 DECIMAL(65,30), IN GHR2 DECIMAL(65,30), IN GHR3 DECIMAL(65,30), IN GHR4 DECIMAL(65,30), IN GMY1 DECIMAL(65,30), IN GMY2 DECIMAL(65,30), IN USERID INT)
    BEGIN
        DECLARE TIPOVAR INT;
        DECLARE GANANCIAVAR INT;

        INSERT INTO TIPOPRODUCTO (Tipo) VALUES (NOMBREIN);
        SET TIPOVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'INSERT', 'TIPO', TIPOVAR, 'Todos', '', NOMBREIN);

        INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (TIPOVAR, 1, GPUB1);
        SET GANANCIAVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'INSERT', 'TIPOGANANCIA', 1, 'Todos', '', GPUB1);

        INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (TIPOVAR, 2, GHR2);
        SET GANANCIAVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'INSERT', 'TIPOGANANCIA', 2, 'Todos', '', GHR2);

        INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (TIPOVAR, 3, GHR3);
        SET GANANCIAVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'INSERT', 'TIPOGANANCIA', 3, 'Todos', '', GHR3);

        INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (TIPOVAR, 4, GHR4);
        SET GANANCIAVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'INSERT', 'TIPOGANANCIA', 4, 'Todos', '', GHR4);

        INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (TIPOVAR, 5, GMY1);
        SET GANANCIAVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'INSERT', 'TIPOGANANCIA', 5, 'Todos', '', GMY1);

        INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (TIPOVAR, 6, GMY2);
        SET GANANCIAVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'INSERT', 'TIPOGANANCIA', 6, 'Todos', '', GMY2);
    end;

DROP PROCEDURE IF EXISTS SP_GETTIPOBYID;
CREATE PROCEDURE SP_GETTIPOBYID(IN IDIN INT)
    BEGIN
        SELECT T.Tipo AS Nombre FROM TIPOPRODUCTO AS T WHERE T.IdTipoProdcuto = IDIN;
        SELECT FORMAT(T.Ganancia,2) AS GananciaPublico1 FROM TIPOGANANCIA AS T WHERE T.IdTipo = IDIN AND IdRangoCliente = 1;
        SELECT FORMAT(T.Ganancia,2) AS GananciaHerrero2 FROM TIPOGANANCIA AS T WHERE T.IdTipo = IDIN AND IdRangoCliente = 2;
        SELECT FORMAT(T.Ganancia,2) AS GananciaHerrero3 FROM TIPOGANANCIA AS T WHERE T.IdTipo = IDIN AND IdRangoCliente = 3;
        SELECT FORMAT(T.Ganancia,2) AS GananciaHerrero4 FROM TIPOGANANCIA AS T WHERE T.IdTipo = IDIN AND IdRangoCliente = 4;
        SELECT FORMAT(T.Ganancia,2) AS GananciaMayoreo1 FROM TIPOGANANCIA AS T WHERE T.IdTipo = IDIN AND IdRangoCliente = 5;
        SELECT FORMAT(T.Ganancia,2) AS GananciaMayoreo2 FROM TIPOGANANCIA AS T WHERE T.IdTipo = IDIN AND IdRangoCliente = 6;
    end;

DROP PROCEDURE IF EXISTS SP_UPDATETIPO;
CREATE PROCEDURE SP_UPDATETIPO(IN IDIN INT,IN NOMBREIN VARCHAR(200), IN GP1 DECIMAL(65,30), IN GH2 DECIMAL(65,30), IN GH3 DECIMAL(65,30), IN GH4 DECIMAL(65,30), IN GMY1 DECIMAL(65,30), IN GMY2 DECIMAL(65,30))
    BEGIN
        UPDATE TIPOPRODUCTO SET Tipo = NOMBREIN WHERE IdTipoProdcuto = IDIN;
        UPDATE TIPOGANANCIA SET Ganancia = GP1 WHERE IdRangoCliente = 1 AND IdTipo = IDIN;
        UPDATE TIPOGANANCIA SET Ganancia = GH2 WHERE IdRangoCliente = 2 AND IdTipo = IDIN;
        UPDATE TIPOGANANCIA SET Ganancia = GH3 WHERE IdRangoCliente = 3 AND IdTipo = IDIN;
        UPDATE TIPOGANANCIA SET Ganancia = GH4 WHERE IdRangoCliente = 4 AND IdTipo = IDIN;
        UPDATE TIPOGANANCIA SET Ganancia = GMY1 WHERE IdRangoCliente = 5 AND IdTipo = IDIN;
        UPDATE TIPOGANANCIA SET Ganancia = GMY2 WHERE IdRangoCliente = 6 AND IdTipo = IDIN;
    end;

DROP PROCEDURE IF EXISTS SP_DELETETIPOS;
CREATE PROCEDURE SP_DELETETIPOS(IN ID INT, IN USERID INT)
    BEGIN
        DECLARE NOMBREVAR VARCHAR(100);
        SET NOMBREVAR = (SELECT Tipo FROM TIPOPRODUCTO WHERE IdTipoProdcuto = ID);
        UPDATE TIPOPRODUCTO SET Estatus = 4 WHERE IdTipoProdcuto = ID;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'DELETE', 'TIPO', ID, 'Todos', NOMBREVAR, '');
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) SELECT USERID, 'DELETE', 'CATEGORIA', C.IdCategoria, 'Todos',C.Categoria, '' FROM CATEGORIAPRODUCTO AS C WHERE C.IdTipo = ID AND C.Estatus = 1;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) SELECT USERID, 'DELETE', 'SUBCATEGORIA', S.IdSubcategoria, 'Todos', S.Subcategoria, '' FROM SUBCATEGORIA S WHERE S.IdTipo = ID AND S.ESTATUS = 1;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) SELECT USERID, 'DELETE', 'Producto', P.IdProducto, 'Todos', P.Descripcion, '' FROM TIPOPRODUCTO AS T INNER JOIN CATEGORIAPRODUCTO AS C ON T.IdTipoProdcuto = C.IdTipo INNER JOIN PRODUCTO AS P ON C.IdCategoria = P.IdCategoria WHERE P.Estatus = 1 AND C.IdTipo = ID;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) SELECT USERID, 'DELETE', 'TIPO', TG.IdTipo, 'Todos', TG.Ganancia, '' FROM TIPOGANANCIA AS TG INNER JOIN RANGOCLIENTE R on TG.IdRangoCliente = R.IdRangoCliente WHERE TG.IdTipo = ID;
        UPDATE  CATEGORIAPRODUCTO AS C SET C.Estatus = 4 WHERE C.IdTipo = ID AND C.Estatus = 1;
        UPDATE PRODUCTO AS P INNER JOIN CATEGORIAPRODUCTO C2 on P.IdCategoria = C2.IdCategoria INNER JOIN TIPOPRODUCTO T2 on C2.IdTipo = T2.IdTipoProdcuto SET P.Estatus = 4 WHERE P.Estatus = 1 AND C2.IdTipo = ID;
        UPDATE SUBCATEGORIA AS S SET S.ESTATUS = 4 WHERE S.IdTipo = ID AND S.ESTATUS = 1;
        UPDATE TIPOPRODUCTO SET Estatus = 4 WHERE IdTipoProdcuto = ID;
        DELETE FROM TIPOGANANCIA WHERE IdTipo = ID;
    end;

-- PRODUCTOS/CATEGORIAS

DROP PROCEDURE IF EXISTS SP_ADDCATEGORIA;
CREATE PROCEDURE SP_ADDCATEGORIA(IN NOMBREIN VARCHAR(100), IN TIPOIN INT, IN USERIN INT)
    BEGIN
        DECLARE CATEGORIAVAR INT;

        INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (TIPOIN, NOMBREIN);
        SET CATEGORIAVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'CATEGORIA', CATEGORIAVAR,'Todos', '', NOMBREIN);
    end;

DROP PROCEDURE IF EXISTS SP_GETCATEGORIAS;
CREATE PROCEDURE SP_GETCATEGORIAS(IN NOMBREIN VARCHAR(100), IN PAGINACIONIN INT)
    BEGIN
        DECLARE INICIOVAR INT;
        SET INICIOVAR = (PAGINACIONIN-1)*50;
        SELECT C.IdCategoria, C.Categoria, T2.Tipo, COUNT(P.IdProducto) AS Cantidad  FROM CATEGORIAPRODUCTO AS C INNER JOIN TIPOPRODUCTO T2 on C.IdTipo = T2.IdTipoProdcuto LEFT JOIN PRODUCTO P on C.IdCategoria = P.IdCategoria WHERE C.Estatus = 1 AND C.Categoria LIKE CONCAT('%',NOMBREIN,'%') GROUP BY C.IdCategoria LIMIT INICIOVAR, 50;
        SELECT C.Categoria AS Descripcion, C.IdCategoria AS Id FROM CATEGORIAPRODUCTO AS C WHERE C.Estatus = 1;
        SELECT (CEIL(COUNT(C.IdCategoria)/50)) AS NumeroPaginas FROM CATEGORIAPRODUCTO AS C WHERE C.Categoria LIKE CONCAT('%',NOMBREIN,'%') AND C.Estatus = 1;
    end;

DROP PROCEDURE IF EXISTS SP_GETCATEGORIABYID;
CREATE PROCEDURE SP_GETCATEGORIABYID(IN IDIN INT)
    BEGIN
        SELECT C.Categoria AS Nombre, C.IdTipo AS Tipo, T.Tipo AS NombreTipo FROM CATEGORIAPRODUCTO AS C INNER JOIN TIPOPRODUCTO T on C.IdTipo = T.IdTipoProdcuto WHERE C.IdCategoria = IDIN;
    end;

DROP PROCEDURE IF EXISTS SP_UPDATECATEGORIA;
CREATE PROCEDURE SP_UPDATECATEGORIA(IN IDIN INT, IN NOMBREIN VARCHAR(200), IN TIPOIN INT)
    BEGIN
        UPDATE CATEGORIAPRODUCTO SET Categoria = NOMBREIN, IdTipo = TIPOIN WHERE IdCategoria = IDIN;
    end;

DROP PROCEDURE IF EXISTS SP_DELETECATEGORIA;
CREATE PROCEDURE SP_DELETECATEGORIA(IN ID INT, IN USERID INT)
    BEGIN
        DECLARE NOMBREVAR VARCHAR(100);
        SET NOMBREVAR = (SELECT Categoria FROM CATEGORIAPRODUCTO WHERE IdCategoria = ID);
        UPDATE CATEGORIAPRODUCTO SET Estatus = 4 WHERE IdCategoria = ID;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'DELETE', 'CATEGORIA', ID, 'Todos', NOMBREVAR, '');
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) SELECT USERID, 'DELETE', 'Producto', P.IdProducto, 'Todos', P.Descripcion, '' FROM CATEGORIAPRODUCTO AS C INNER JOIN PRODUCTO AS P ON C.IdCategoria = P.IdCategoria WHERE P.Estatus = 1 AND C.IdCategoria = ID;

        UPDATE PRODUCTO AS P INNER JOIN CATEGORIAPRODUCTO C2 on P.IdCategoria = C2.IdCategoria SET P.Estatus = 4 WHERE P.Estatus = 1 AND C2.IdCategoria = ID;
    end;
-- PRODUCTOS/SUBCATEGORIAS

DROP PROCEDURE IF EXISTS SP_ADDSUBCATEGORIA;
CREATE PROCEDURE SP_ADDSUBCATEGORIA(IN NOMBREIN VARCHAR(100), IN TIPOIN INT, IN COSTOBASEIN DECIMAL(65,30), IN USERIN INT)
    BEGIN
        DECLARE SUBCATEGORIAVAR INT;

        INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES (NOMBREIN, COSTOBASEIN,TIPOIN);
        SET SUBCATEGORIAVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'SUBCATEGORIA', SUBCATEGORIAVAR,'Todos', '', NOMBREIN);
    end;

DROP PROCEDURE IF EXISTS SP_GETSUBCATEGORIAS;
CREATE PROCEDURE SP_GETSUBCATEGORIAS(IN NOMBREIN VARCHAR(100), IN PAGINACIONIN INT)
    BEGIN
        DECLARE INICIOVAR INT;
        SET INICIOVAR = (PAGINACIONIN-1)*50;
        SELECT S.IdSubcategoria, S.Subcategoria, T.Tipo, FORMAT(S.CostoBase,2) AS CostoBase, COUNT(P2.IdProducto) AS Cantidad FROM SUBCATEGORIA AS S INNER JOIN TIPOPRODUCTO T on S.IdTipo = T.IdTipoProdcuto LEFT JOIN PRODUCTO P2 on S.IdSubcategoria = P2.IdSubcategoria WHERE S.ESTATUS = 1 AND (P2.Estatus = 1 OR P2.IdProducto IS NULL) AND S.Subcategoria LIKE CONCAT('%',NOMBREIN,'%') GROUP BY S.IdSubcategoria LIMIT INICIOVAR, 50;
        SELECT S.Subcategoria AS Descripcion, S.IdSubcategoria AS Id FROM SUBCATEGORIA AS S WHERE S.Estatus = 1;
        SELECT (CEIL(COUNT(S.IdSubcategoria)/50)) AS NumeroPaginas FROM SUBCATEGORIA AS S WHERE S.Subcategoria LIKE CONCAT('%',NOMBREIN,'%') AND S.Estatus = 1;
    end;

DROP PROCEDURE IF EXISTS SP_GETSUBCATEGORIABYID;
CREATE PROCEDURE SP_GETSUBCATEGORIABYID(IN IDIN INT)
    BEGIN
        SELECT S.Subcategoria AS Nombre, T.IdTipoProdcuto AS Tipo, T.Tipo AS NombreTipo, FORMAT(S.CostoBase,2) AS CostoBase FROM SUBCATEGORIA AS S INNER JOIN TIPOPRODUCTO AS T ON S.IdTipo = T.IdTipoProdcuto WHERE S.IdSubcategoria = IDIN;
    end;

DROP PROCEDURE IF EXISTS SP_UPDATESUBCATEGORIA;
CREATE PROCEDURE SP_UPDATESUBCATEGORIA(IN IDIN INT, IN NOMBREIN VARCHAR(200), IN TIPOIN INT, IN COSTOBASEIN DECIMAL(65,30))
    BEGIN
        UPDATE SUBCATEGORIA SET Subcategoria = NOMBREIN, IdTipo = TIPOIN, CostoBase = COSTOBASEIN WHERE IdSubcategoria = IDIN;
    end;

DROP PROCEDURE IF EXISTS SP_DELETESUBCATEGORIA;
CREATE PROCEDURE SP_DELETESUBCATEGORIA(IN ID INT, IN USERID INT)
    BEGIN
        DECLARE NOMBREVAR VARCHAR(100);
        SET NOMBREVAR = (SELECT Subcategoria FROM SUBCATEGORIA WHERE IdSubcategoria = ID);
        UPDATE SUBCATEGORIA SET Estatus = 4 WHERE IdSubcategoria = ID;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'DELETE', 'SUBCATEGORIA', ID, 'Todos', NOMBREVAR, '');
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) SELECT USERID, 'DELETE', 'Producto', P.IdProducto, 'Todos', P.Descripcion, '' FROM SUBCATEGORIA AS S INNER JOIN PRODUCTO AS P ON S.Subcategoria = P.IdSubcategoria WHERE P.Estatus = 1 AND S.IdSubcategoria = ID;

        UPDATE PRODUCTO AS P INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria SET P.Estatus = 4 WHERE P.Estatus = 1 AND S.IdSubcategoria = ID;
    end;


-- CARGOS
DROP PROCEDURE IF EXISTS SP_GETCARGOS;
CREATE PROCEDURE SP_GETCARGOS(IN TIPOIN INT, IN NOMBREIN VARCHAR(100))
    BEGIN
        IF TIPOIN = 0 THEN
            SELECT C.IdCargoGeneral, C.NombreCargoGeneral, FORMAT(C.Parametro,2) AS Parametro, FORMAT(C.Cargo,2) AS Cargo FROM CARGOGENERAL AS C WHERE C.NombreCargoGeneral LIKE CONCAT(NOMBREIN,'%') AND IdCargoGeneral != 1;
            ELSE
            SELECT C.IdCargo, C.NombreCargo, FORMAT(C.Cargo,2) AS Cargo, T.Tipo FROM CARGO AS C INNER JOIN TIPOPRODUCTO AS T ON C.IdTipo = T.IdTipoProdcuto WHERE T.IdTipoProdcuto = TIPOIN AND C.NombreCargo LIKE CONCAT(NOMBREIN, '%') AND C.Estatus = 1;
        end if;
    end;

DROP PROCEDURE IF EXISTS SP_ADDCARGO;
CREATE PROCEDURE SP_ADDCARGO(IN NOMBRECARGOIN VARCHAR(100), IN CARGOIN DECIMAL(65,30), IN TIPOIN INT, IN USERID INT)
    BEGIN
        DECLARE CARGOVAR INT;
        INSERT INTO CARGO (NombreCargo, Cargo, IdTipo) VALUES (NOMBRECARGOIN, CARGOIN, TIPOIN);
        SET CARGOVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'INSERT', 'CARGO', CARGOVAR, 'Todos', '', NOMBRECARGOIN);
    end;

DROP PROCEDURE IF EXISTS SP_DELETECARGO;
CREATE PROCEDURE SP_DELETECARGO(IN IDIN INT, IN USERID INT)
    BEGIN
        DECLARE NOMBRECARGOVAR VARCHAR(100);
        SET NOMBRECARGOVAR = (SELECT C.NombreCargo FROM CARGO AS C WHERE C.IdCargo = IDIN);
        UPDATE CARGO SET Estatus = 4 WHERE IdCargo = IDIN;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'DELETE', 'CARGO', IDIN, 'Todos', NOMBRECARGOVAR, '');
    end;

DROP PROCEDURE IF EXISTS SP_GETCARGOBYID;
CREATE PROCEDURE SP_GETCARGOBYID(IN IDCARGOIN INT)
    BEGIN
        SELECT C.NombreCargo AS Nombre, FORMAT(C.Cargo,2) AS Cargo FROM CARGO AS C WHERE C.IdCargo = IDCARGOIN;
    end;

DROP PROCEDURE IF EXISTS SP_UPDATECARGO;
CREATE PROCEDURE  SP_UPDATECARGO(IN IDIN INT, IN NOMBREIN VARCHAR(100), IN CARGOIN DECIMAL(65,30))
    BEGIN
        UPDATE CARGO SET NombreCargo = NOMBREIN, Cargo = CARGOIN WHERE IdCargo = IDIN;
    end;

DROP PROCEDURE IF EXISTS SP_GETCARGOGENERALBYID;
CREATE PROCEDURE SP_GETCARGOGENERALBYID(IN IDCARGOIN INT)
    BEGIN
        SELECT C.NombreCargoGeneral AS Nombre, FORMAT(C.Parametro,2) AS Parametro, FORMAT(C.Cargo,2) AS Cargo FROM CARGOGENERAL AS C WHERE C.IdCargoGeneral = IDCARGOIN;
    end;

DROP PROCEDURE IF EXISTS SP_UPDATECARGOGENERAL;
CREATE PROCEDURE  SP_UPDATECARGOGENERAL(IN IDIN INT, IN NOMBREIN VARCHAR(100), IN CARGOIN DECIMAL(65,30), IN PARAMETROIN DECIMAL(65,30))
    BEGIN
        UPDATE CARGOGENERAL SET  NombreCargoGeneral = NOMBREIN, Cargo = CARGOIN, Parametro = PARAMETROIN WHERE IdCargoGeneral = IDIN;
    end;

DROP PROCEDURE IF EXISTS SP_ADDPRODUCTOTOSUCURSAL;
CREATE PROCEDURE SP_ADDPRODUCTOTOSUCURSAL(IN IDPRODIN INT, IN IDSUCURSALIN INT, IN STOCKIN INT, IN USERIN INT)
    BEGIN
        INSERT INTO INVENTARIO_SUCURSAL (IdProducto, IdSucursal, Stock) VALUES (IDPRODIN, IDSUCURSALIN, STOCKIN);
        INSERT INTO BITACORAINVENTARIO (Usuario, Accion, Sucursal, IdProducto, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', IDSUCURSALIN, IDPRODIN, 'Stock', 0, STOCKIN);
    end;

DROP FUNCTION IF EXISTS FN_GETSTOCKESTADO;
CREATE FUNCTION FN_GETSTOCKESTADO(IDPROD INT, IDSUC INT, INESTATUS INT)
    RETURNS VARCHAR(100)
    DETERMINISTIC
    BEGIN
        DECLARE STOCK INT;
        DECLARE SUM1 INT;
        DECLARE SUM2 INT;
        IF INESTATUS = 0 THEN
            SET SUM1 = (SELECT I.Stock FROM INVENTARIO_SUCURSAL AS I WHERE I.IdProducto = IDPROD AND I.IdSucursal = IDSUC AND Estatus = 1);
                IF SUM1 IS NULL THEN
                SET SUM1 = 0;
                end if;
            SET SUM2 = (SELECT I.Stock FROM INVENTARIO_SUCURSAL AS I WHERE I.IdProducto = IDPROD AND I.IdSucursal = IDSUC AND Estatus = 3);
                IF SUM2 IS NULL THEN
                SET SUM2 = 0;
                end if;
            SET STOCK = SUM1+SUM2;
        ELSE
            SET STOCK = (SELECT I.Stock FROM INVENTARIO_SUCURSAL AS I WHERE I.IdProducto = IDPROD AND I.IdSucursal = IDSUC AND Estatus = INESTATUS);
            IF STOCK IS NULL THEN
            SET STOCK = 0;
            end if;
        end if;
        RETURN STOCK;
    end;

DROP PROCEDURE IF EXISTS SP_GETPRODUCTOSSUCURSAL;
CREATE PROCEDURE SP_GETPRODUCTOSSUCURSAL(IN SUCURSALIN INT, IN IDTIPOIN INT, IN IDCATEGORIAIN INT, IN IDSUBCATEGORIAIN INT, IN NOMBREIN VARCHAR(200), IN PAGINACIONIN INT)
    BEGIN
        DECLARE INICIOVAR INT;
        DECLARE NOMBRECATEGORIA VARCHAR(200);
        DECLARE NOMBRESUBCATEGORIA VARCHAR(200);
        DECLARE NOMBRETIPO VARCHAR(200);

        SET NOMBRETIPO = (SELECT T.Tipo FROM TIPOPRODUCTO AS T WHERE T.IdTipoProdcuto = IDTIPOIN LIMIT 1);
        IF NOMBRETIPO IS NULL THEN
            SET NOMBRETIPO = '';
        end if;
        SET NOMBRECATEGORIA = (SELECT C.Categoria FROM CATEGORIAPRODUCTO AS C WHERE C.IdCategoria = IDCATEGORIAIN LIMIT 1);
        IF NOMBRECATEGORIA IS NULL THEN
            SET NOMBRECATEGORIA = '';
        end if;
        SET NOMBRESUBCATEGORIA = (SELECT S.Subcategoria FROM SUBCATEGORIA AS S WHERE S.IdSubcategoria = IDSUBCATEGORIAIN LIMIT 1);
        IF NOMBRESUBCATEGORIA IS NULL THEN
            SET NOMBRESUBCATEGORIA = '';
        end if;
        SET INICIOVAR = (PAGINACIONIN-1)*50;

        IF NOMBREIN = '' THEN
            SELECT P.IdProducto, P.Descripcion, T.Tipo, C.Categoria, S.Subcategoria, I.StockMinimo ,(SELECT FN_GETSTOCKESTADO(P.IdProducto, SUCURSALIN, 1)) AS Disponible, (SELECT FN_GETSTOCKESTADO(P.IdProducto, SUCURSALIN, 3)) AS Reservado, (SELECT FN_GETSTOCKESTADO(P.IdProducto, SUCURSALIN, 0)) AS Total  FROM PRODUCTO AS P INNER JOIN CATEGORIAPRODUCTO C on P.IdCategoria = C.IdCategoria INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria INNER JOIN TIPOPRODUCTO T on C.IdTipo = T.IdTipoProdcuto LEFT JOIN INVENTARIO_SUCURSAL I on P.IdProducto = I.IdProducto WHERE (I.IdSucursal = SUCURSALIN OR I.IdSucursal IS NULL) AND T.Tipo LIKE CONCAT('%',NOMBRETIPO,'%') AND C.Categoria LIKE CONCAT('%',NOMBRECATEGORIA,'%') AND S.Subcategoria LIKE CONCAT('%',NOMBRESUBCATEGORIA,'%') AND P.Estatus = 1 AND P.Descripcion LIKE CONCAT('%',NOMBREIN,'%') ORDER BY P.IdProducto LIMIT INICIOVAR, 50;

            SELECT (CEIL(COUNT(P.IdProducto)/50)) AS NumeroPaginas FROM PRODUCTO AS P INNER JOIN CATEGORIAPRODUCTO C on P.IdCategoria = C.IdCategoria INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria INNER JOIN TIPOPRODUCTO T on C.IdTipo = T.IdTipoProdcuto LEFT JOIN INVENTARIO_SUCURSAL AS I ON P.IdProducto = I.IdProducto  WHERE (I.IdSucursal = SUCURSALIN OR I.IdSucursal IS NULL) AND T.Tipo LIKE CONCAT('%',NOMBRETIPO,'%') AND C.Categoria LIKE CONCAT('%',NOMBRECATEGORIA,'%') AND S.Subcategoria LIKE CONCAT('%',NOMBRESUBCATEGORIA,'%') AND P.Estatus = 1 AND P.Descripcion LIKE CONCAT('%',NOMBREIN,'%');

        ELSE
            SELECT P.IdProducto, P.Descripcion, T.Tipo, C.Categoria, S.Subcategoria, IS2.StockMinimo ,(SELECT FN_GETSTOCKESTADO(P.IdProducto, SUCURSALIN, 1)) AS Disponible, (SELECT FN_GETSTOCKESTADO(P.IdProducto, SUCURSALIN, 3)) AS Reservado, (SELECT FN_GETSTOCKESTADO(P.IdProducto, SUCURSALIN, 0)) AS Total FROM PRODUCTO AS P  INNER JOIN CATEGORIAPRODUCTO C on P.IdCategoria = C.IdCategoria INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria INNER JOIN TIPOPRODUCTO T on C.IdTipo = T.IdTipoProdcuto LEFT JOIN INVENTARIO_SUCURSAL IS2 on P.IdProducto = IS2.IdProducto WHERE (IS2.IdSucursal = SUCURSALIN OR IS2.IdSucursal IS NULL)AND P.Descripcion LIKE CONCAT('%',NOMBREIN,'%') AND P.Estatus = 1 ORDER BY P.IdProducto LIMIT INICIOVAR, 50;

            SELECT (CEIL(COUNT(P.IdProducto)/50)) AS NumeroPaginas FROM PRODUCTO AS P LEFT JOIN INVENTARIO_SUCURSAL IS3 on P.IdProducto = IS3.IdProducto WHERE (IS3.IdSucursal = SUCURSALIN OR IS3.IdSucursal IS NULL) AND P.Descripcion LIKE CONCAT('%',NOMBREIN,'%') AND P.Estatus = 1;
        end if;
    end;

DROP PROCEDURE IF EXISTS SP_GETPRODUCTOSUCURSALBYID;
CREATE PROCEDURE SP_GETPRODUCTOSUCURSALBYID(IN IDPROD INT, IN IDSUC INT)
    BEGIN
        DECLARE IDINVSUC INT;
        SET IDINVSUC = (SELECT I.IdInventario FROM INVENTARIO_SUCURSAL AS I WHERE I.IdSucursal = IDSUC AND IdProducto = IDPROD AND I.Estatus = 1);
        IF IDINVSUC IS NULL THEN
            SELECT 0 AS Stock, 0 AS StockMinimo;
            ELSE
            SELECT I.Stock, I.StockMinimo FROM INVENTARIO_SUCURSAL AS I WHERE I.IdInventario = IDINVSUC AND I.Estatus = 1;
        end if;
    end;

DROP PROCEDURE IF EXISTS SP_REGISTRARACTUZALICACIONINVENTARIO;
CREATE PROCEDURE SP_REGISTRARACTUZALICACIONINVENTARIO(IN USERIN INT, INIDSUC INT, IN IDREGISTROVAR INT, IN CAMPOIN VARCHAR(100), IN VALORANTERIORIN VARCHAR(100), VALORNUEVOIN VARCHAR(100))
    BEGIN
        INSERT INTO BITACORAINVENTARIO (Usuario, Accion, Sucursal, IdProducto, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'UPDATE', INIDSUC, IDREGISTROVAR, CAMPOIN, VALORANTERIORIN, VALORNUEVOIN);
    end;

DROP PROCEDURE IF EXISTS SP_UPDATESTOCKSUCURSAL;
CREATE PROCEDURE SP_UPDATESTOCKSUCURSAL(IN IDPROD INT, IN IDSUC INT, IN STOCKIN INT, IN STOCKMINIMOIN INT)
    BEGIN
        DECLARE IDINVSUC INT;
        SET IDINVSUC = (SELECT I.IdInventario FROM INVENTARIO_SUCURSAL AS I WHERE I.IdSucursal = IDSUC AND IdProducto = IDPROD AND I.Estatus = 1);
        IF IDINVSUC IS NULL THEN
            INSERT INTO INVENTARIO_SUCURSAL (IdProducto, IdSucursal, Stock, StockMinimo) VALUES (IDPROD, IDSUC, STOCKIN, STOCKMINIMOIN);
            ELSE
            UPDATE INVENTARIO_SUCURSAL SET Stock = STOCKIN, StockMinimo = STOCKMINIMOIN WHERE IdProducto = IDPROD AND IdSucursal = IDSUC;
        end if;
    end;

DROP PROCEDURE IF EXISTS SP_ADDSTOCK;
CREATE PROCEDURE SP_ADDSTOCK(IN IDPROD INT, IN IDSUC INT, IN CANTIDAD INT, IN USERIN INT)
    BEGIN
        DECLARE IDINVSUC INT;
        DECLARE CANTIDADACTUAL INT;
        SET IDINVSUC = (SELECT I.IdInventario FROM INVENTARIO_SUCURSAL AS I WHERE I.IdSucursal = IDSUC AND IdProducto = IDPROD AND I.Estatus = 1);
        IF IDINVSUC IS NULL THEN
            INSERT INTO INVENTARIO_SUCURSAL (IdProducto, IdSucursal, Stock) VALUES (IDPROD, IDSUC, CANTIDAD);
            INSERT INTO BITACORAINVENTARIO (Usuario, Accion, Sucursal, IdProducto, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', IDSUC, IDPROD, 'Stock', '0', CANTIDAD);
            ELSE
                SET CANTIDADACTUAL = (SELECT Stock FROM INVENTARIO_SUCURSAL WHERE IdSucursal = IDSUC AND IdProducto = IDPROD AND Estatus = 1 LIMIT 1);
                UPDATE INVENTARIO_SUCURSAL SET Stock = (CANTIDADACTUAL+CANTIDAD) WHERE IdProducto = IDPROD AND IdSucursal = IDSUC;
                INSERT INTO BITACORAINVENTARIO (Usuario, Accion, Sucursal, IdProducto, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', IDSUC, IDPROD, 'Stock', CANTIDADACTUAL, (CANTIDADACTUAL+CANTIDAD));
        end if;
    end;

-- VENTAS
DROP PROCEDURE IF EXISTS SP_GETNOMBRESVENTAS;
CREATE PROCEDURE SP_GETNOMBRESVENTAS()
    BEGIN
        SELECT CONCAT(P.Nombre,' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Descripcion, C.IdCliente AS Id FROM CLIENTE AS C INNER JOIN PERSONA P on C.IdPersona = P.IdPersona WHERE C.Estatus = 1;
        SELECT Descripcion, IdProducto AS Id FROM PRODUCTO WHERE Estatus = 1;
    end;

DROP FUNCTION IF EXISTS FN_ObtenerDistancia;
CREATE FUNCTION FN_ObtenerDistancia(CODIGO1 varchar(10), CODIGO2 VARCHAR(10))
RETURNS DOUBLE
    DETERMINISTIC
    BEGIN
        DECLARE DISTANCIA DOUBLE;
        DECLARE LAT1 DOUBLE;
        DECLARE LAT2 DOUBLE;
        DECLARE LON1 DOUBLE;
        DECLARE LON2 DOUBLE;

        SET LAT1 = (SELECT C.Latitud FROM CODIGOPOSTAL AS C WHERE C.CodigoPostal = CODIGO1);
        SET LAT2 = (SELECT C.Latitud FROM CODIGOPOSTAL AS C WHERE C.CodigoPostal = CODIGO2);

        SET LON1 = (SELECT C.Longitud FROM CODIGOPOSTAL AS C WHERE C.CodigoPostal = CODIGO1);
        SET LON2 = (SELECT C.Longitud FROM CODIGOPOSTAL AS C WHERE C.CodigoPostal = CODIGO2);

        SET DISTANCIA = 6371 * 2 * ASIN(
        SQRT(
            POWER(SIN(RADIANS(LAT2 - LAT1) / 2), 2) +
            COS(RADIANS(LAT1)) * COS(RADIANS(LAT2)) *
            POWER(SIN(RADIANS(LON2 - LON1) / 2), 2)
        )
    );
        RETURN DISTANCIA;
    end;

DROP PROCEDURE IF EXISTS SP_CALCULARENVIO;
CREATE PROCEDURE SP_CALCULARENVIO(IN IDCL INT, IN USERID INT)
    BEGIN
        DECLARE CODIGOCLIENTE VARCHAR(10);
        DECLARE CODIGOEMPLEADO VARCHAR(10);
        DECLARE DISTANCIA DOUBLE;
        DECLARE RANGODIST INT;
        DECLARE CARGODIST DECIMAL(65,30);

        SET CODIGOCLIENTE = (SELECT C2.CodigoPostal FROM CLIENTE AS C INNER JOIN DIRECCION D on C.IdDireccion = D.IdDireccion INNER JOIN CODIGOPOSTAL C2 on D.IdCodigoPostal = C2.IdCodigoPostal WHERE C.IdCliente = IDCL LIMIT 1);
        SET CODIGOEMPLEADO = (SELECT C3.CodigoPostal FROM USUARIO AS U INNER JOIN EMPLEADO E on U.IdEmpleado = E.IdEmpleado INNER JOIN SUCURSAL S on E.IdSucursal = S.IdSucursal INNER JOIN DIRECCION D2 on S.IdDireccion = D2.IdDireccion INNER JOIN CODIGOPOSTAL C3 on D2.IdCodigoPostal = C3.IdCodigoPostal WHERE U.IdUsuario = USERID LIMIT 1);
        SET DISTANCIA = (SELECT FN_ObtenerDistancia(CODIGOEMPLEADO, CODIGOCLIENTE));
        SET RANGODIST = (SELECT Parametro FROM CARGOGENERAL WHERE IdCargoGeneral = 2);
        SET CARGODIST = (SELECT Cargo FROM CARGOGENERAL WHERE IdCargoGeneral = 2);
        IF DISTANCIA <= RANGODIST THEN
            SELECT 0 AS CARGO;
            ELSE
                SELECT CEIL((DISTANCIA-RANGODIST)*CARGODIST) AS Cargo, CEIL(DISTANCIA) AS Distancia;
        end if;
    end;

CALL SP_CALCULARENVIO(3,1001);

DROP PROCEDURE IF EXISTS SP_ADDPRODUCTOVENTA;
CREATE PROCEDURE SP_ADDPRODUCTOVENTA(IN IDPROD INT, IN IDCLIENTEIN INT, IN USERID INT, IN PIEZASIN INT, IN NOTAIN INT)
    BEGIN
        DECLARE NOTAVAR INT;
        DECLARE EMPLEADOVAR INT;
        SELECT * FROM NOTA;
        SELECT * FROM NOTA_PRODUCTOS;
        IF NOTAIN = 0 THEN
            SET EMPLEADOVAR = (SELECT E.IdEmpleado FROM USUARIO AS U INNER JOIN EMPLEADO E on U.IdEmpleado = E.IdEmpleado WHERE U.IdUsuario = USERID LIMIT 1);
            INSERT INTO NOTA (IdCliente, IdEmpleado) VALUES (IDCLIENTEIN, EMPLEADOVAR);
            SET NOTAVAR = (SELECT LAST_INSERT_ID());
            SELECT NOTAVAR AS Nota;
        ELSE
            SET NOTAVAR = NOTAIN;
            SELECT 0 AS Nota;
        end if;
        INSERT INTO NOTA_PRODUCTOS (IdNota, IdProducto, Piezas) VALUES (NOTAVAR, IDPROD, PIEZASIN);
    end;

select * from BITACORAINVENTARIO;
CALL SP_GETPRODUCTOSSUCURSAL(1,0,0,0,'',1);

-- SELECT P.IdProducto, P.Descripcion, P.IdSubcategoria, P.CostoExtra, S.CostoBase, FN_GETPRECIO(P.IdProducto,1), P2.PesoInicial, P2.PesoFinal, P2.PesoPromedio FROM PRODUCTO AS P INNER JOIN SUBCATEGORIA S on P.IdSubcategoria = S.IdSubcategoria INNER JOIN PESO P2 on P.IdPeso = P2.IdPeso WHERE P.IdCategoria = 17;

--

-- DATOS INICIALES

INSERT INTO ESTADO (Estado) SELECT E.Estado FROM ESTADOCSV AS E;
INSERT INTO MUNICIPIO (Municipio, IdEstado) SELECT M.Municipio, M.IdEstado FROM MUNICIPIOCSV AS M;
INSERT INTO CODIGOPOSTAL (CodigoPostal, IdMunicipio, Latitud, Longitud) SELECT C.CodigoPostal, C.IdMunicipio, C.Latitud, C.Longitud FROM CODIGOPOSTALCSV AS C;
INSERT INTO COLONIA (Colonia, IdCodigoPostal) SELECT C.Colonia, C.IdCodigoPostal FROM COLONIACSV AS C;

INSERT INTO DIRECCION (IdCodigoPostal, IdColonia, Calle) SELECT IdCodigoPostal, 48848, 'Victoria 54' FROM CODIGOPOSTAL WHERE CodigoPostal = '38800' LIMIT 1;
INSERT INTO SUCURSAL (Nombre, IdDireccion, Telefono) VALUE ('Sucursal Morole√≥n', (SELECT LAST_INSERT_ID()), '4456439861');
INSERT INTO DIRECCION (IdCodigoPostal, IdColonia, Calle) SELECT IdCodigoPostal, 74886, 'Allende 32' FROM CODIGOPOSTAL WHERE CodigoPostal = '58000' LIMIT 1;
INSERT INTO SUCURSAL (Nombre, IdDireccion, Telefono) VALUE ('Sucursal Morelia', (SELECT LAST_INSERT_ID()), '4437812064');

INSERT INTO ROL (Rol) VALUE ('Vendedor');
INSERT INTO ROL (Rol) VALUE ('Cajero');
INSERT INTO ROL (Rol) VALUE ('Administrador');

INSERT INTO ESTATUS (ESTATUS) VALUES ('Activo');
INSERT INTO ESTATUS (ESTATUS) VALUES ('Despedido');
INSERT INTO ESTATUS (ESTATUS) VALUES ('Suspendido');
INSERT INTO ESTATUS (ESTATUS) VALUES ('Eliminado');

INSERT INTO PERSONA (Nombre, ApellidoPaterno, ApellidoMaterno, Telefono, Edad) VALUES ('Pedro', 'Villa', 'Almanza', '4457963475', '45');
INSERT INTO EMPLEADO (IdPersona, IdRol, IdEstatus, IdSucursal) VALUES ((SELECT LAST_INSERT_ID()), 3, 1, 1);
INSERT INTO USUARIO (Contrase√±a, IdEmpleado) VALUES ('$2b$10$VuHF8B70UNBN.MmD6vS20eigaxYkUjkCi.mcxtRVJqQwpnDkua2jq', 1);

CALL SP_REGISTRAREMPLEADO('$2b$10$VuHF8B70UNBN.MmD6vS20eigaxYkUjkCi.mcxtRVJqQwpnDkua2jq','Francisco', 'Leal', 'Medina', '4459721648', '32', 2, 1, 2,1001);
CALL SP_REGISTRAREMPLEADO('$2b$10$VuHF8B70UNBN.MmD6vS20eigaxYkUjkCi.mcxtRVJqQwpnDkua2jq','Jaime', 'Lara', 'Pi√±a', '4543794322', '21', 1, 1, 2,1001);


INSERT INTO RANGOCLIENTE (Rango) VALUES ('P√∫blico 1');
INSERT INTO RANGOCLIENTE (Rango) VALUES ('Herrero 2');
INSERT INTO RANGOCLIENTE (Rango) VALUES ('Herrero 3');
INSERT INTO RANGOCLIENTE (Rango) VALUES ('Herrero 4');
INSERT INTO RANGOCLIENTE (Rango) VALUES ('Mayoreo 1');
INSERT INTO RANGOCLIENTE (Rango) VALUES ('Mayoreo 2');

CALL SP_ADDCLIENTE(38940,49030,'Dur√°n 76','Pedro','Garza','Martinez','44546729187','45',1,0,0,1001);
CALL SP_ADDCLIENTE(20263,363,'Diego Lopez 42','Luis','D√≠az','L√≥pez','444534872','76',4,50000,0,1001);

INSERT INTO TIPOPRODUCTO (Tipo) VALUES ('Tubular, PTR');
INSERT INTO TIPOPRODUCTO (Tipo) VALUES ('Solidos');

INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Mont√©n');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'PTR');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubo C√©dula 30');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubo C√©dula 40');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubo Galvanizado');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubular');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'T. Industrial');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Moflero');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tableros');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubo C√©dula 20');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubular Zintro');

INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, '√Ångulo');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, '√Ångulo Ligero');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, 'Cuadrado');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, 'Redondo');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, 'Torcido');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, 'Solera');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, 'TEE');

INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Tubular C18 y C20', 33, 1);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Mont√©n C14', 30, 1);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('PTR y Tubo Negro C30', 30, 1);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Tubular C 050', 37.5, 1);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Tubular Galvanizado  C18', 38, 1);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('PTR Galvanizado C14', 37.5, 1);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Tubular 3 mt', 42, 1);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Tubo 1/2 Negro Ced 30', 42, 1);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Tubo Industrial 1/2 y 5/8', 37.5, 1);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Tubo Galvanizado', 38, 1);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('PTR C16', 30.5, 1);

INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('√Ångulo 3/4', 23.70, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('√Ångulo 109', 22.70, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('√Ångulo 1-2 1/2', 22.70, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('√Ångulo 3, 3 1/2, 4', 24, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Redondo 5/16 y 3/16', 23.30, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Redondo 1/4', 23.30, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Cuadrados 1/2 y 12mm Tipo 1', 21.50, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Redondo 1" y 1-1/4', 22.50, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Redondo 1/2, 5/8, 3/4', 21.50, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Redondo 3/8', 22.40, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Solera 1/2 X 1/8, 3/16 Placa', 26.40, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Solera 1/2 X 1/4 Placa', 27.90, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Solera 3/4 todos los calibres Placa', 25.90, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Solera 1" a 1-1/2x1/8 Placa', 25.90, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Solera 1-1/2, 2 Comercial', 23.50, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Solera 1-1/4 y 1 x 3/16', 23.50, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Solera 1-1/4 y 1 x 3/8 Comercial', 24.50, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Tee', 27, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Torcido', 23, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Damas Cuadrados', 22.50, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Viga IPS 4+', 24, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Canal C 4 +', 24.50, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Solera Placa 2-1/2 en adelante', 25.90, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Viga IPR', 23.50, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Viga IPS 3"', 27.30, 2);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase, IdTipo) VALUES ('Canal C 3"', 26.30, 2);

CALL SP_INSERTARPRODUCTO('3x6 C-16', 1, 12.6, 11.9, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('4x6 C-16', 1, 16.7, 16.0, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('3x6', 1, 15.23, 15.15, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4x4', 1, 13.1, 13.14, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4x5', 1, 16.56, 16.91, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4x6', 1, 19.85, 19.85, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('5x5', 1, 17.85, 18.35, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('5x6', 1, 21.25, 21.312, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('6x6', 1, 24.4375, 24.45, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('8x6', 1, 33.03, 32.12, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('8x8', 1, 43.59, 43.59, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('10x10', 1, 61.31, 61.31, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4', 2, 6.29, 6.29, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 C13', 2, 10.5, 10.1, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 C14', 2, 8.82, 8.74, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 C16', 2, 7.09, 7.06, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4 C13', 2, 12.9, 12.8, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4 C14', 2, 10.61, 10.5, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4 C16', 2, 8.83, 8.77, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2 C12', 2, 18.12, 18.12, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2 C14', 2, 12.9, 13.02, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2 C16', 2, 10.83, 10.71, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('2 C12', 2, 24.075, 24.0, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('2 C14', 2, 17.95, 17.6, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('2" C16', 2, 14.8, 14.8, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('2X1 C14', 2, 12.63, 12.85, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('2 x 1" C16', 2, 10.68, 10.68, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('2 1/2 C11', 2, 32.6, 34.4, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('2 1/2 C14', 2, 21.45, 21.02, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 1-1/2 C-14', 2, 17.45, 17.73, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 C8', 2, 53.2, 53.2, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 C11', 2, 41.09, 41.09, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 C14', 2, 26.8285, 26.4, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 1/2 C10', 2, 60.2, 60.2, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 1/2 C11', 2, 47.2, 47.2, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 X 1 1/2 C14', 2, 20.16, 20.16, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3X2 C11', 2, 34.56, 33.33, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 x 2 C-14', 2, 20.9, 22.57, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4 C11', 2, 57.73, 55.1, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4 C14', 2, 35.25, 35.23, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4x11/2 C-14', 2, 24.2, 24.84, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4 x 2 C-11', 2, 40.0666, 41.6, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4 X 2 C14', 2, 25.56, 25.3, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('6 x 2 C-14', 2, 36.35, 36.35, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('PTR galv 1 1/2', 2, 12.85, 12.85, 6, 0,1001);
CALL SP_INSERTARPRODUCTO('PTR galv 1 3/4', 2, 14.5333, 15.6, 6, 0,1001);
CALL SP_INSERTARPRODUCTO('PTR galv 2', 2, 17.6, 17.6, 6, 0,1001);
CALL SP_INSERTARPRODUCTO('1/2', 3, 5.48, 5.5325, 8, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4', 3, 7.0, 6.85, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('1', 3, 8.73, 8.75, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4', 3, 14.0, 13.82, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2', 3, 15.8, 16.196, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('2', 3, 22.2702, 23.78, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('2 1/2', 3, 31.7333, 31.2, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('3', 3, 39.94, 39.67, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('4', 3, 50.2, 50.0, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('1.0', 4.0, 16.4, 16.4, 3.0, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3.0', 4.0, 78.8, 78.8, 3.0, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 3/8', 5, 4.4, 4.4, 10, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2', 5, 5.2, 5.2, 10, 0,1001);
CALL SP_INSERTARPRODUCTO('2', 5, 8.7, 8.7, 10, 0,1001);
CALL SP_INSERTARPRODUCTO('101', 6, 7.05, 7.16, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('103', 6, 8.51, 8.14, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('106', 6, 8.0, 8.16, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('116', 6, 8.9, 8.9, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('122', 6, 7.85, 7.76, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('123', 6, 7.95, 7.95, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('124', 6, 3.99, 3.99, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('126', 6, 10.0, 10.0, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('127', 6, 10.94, 10.96, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('154 C-18', 6, 1.46, 1.46, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('154 C-20', 6, 1.12, 1.15, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('159', 6, 10.27, 10.26, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('160', 6, 8.575, 8.6, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('170', 6, 9.31, 9.3166, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('171', 6, 5.1, 5.04, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1400', 6, 7.083, 7.26, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1500', 6, 17.66, 17.666, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C050', 6, 2.58, 2.69, 4, 0,1001);
CALL SP_INSERTARPRODUCTO('C075', 6, 4.1833, 4.17, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C100', 6, 5.49, 5.56, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C125', 6, 6.98, 6.9135, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C150', 6, 8.36, 8.4285, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C200', 6, 11.5, 11.4, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K100', 6, 8.68, 9.229, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K150', 6, 10.26, 10.64, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K200', 6, 12.05, 12.06, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K300', 6, 14.68, 14.97, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('M225', 6, 7.6, 7.3, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P100', 6, 7.87, 7.78, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P150', 6, 9.42, 9.28, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P200', 6, 10.8, 10.82, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P250', 6, 12.26, 12.2857, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P300', 6, 13.51, 13.64, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P400', 6, 16.52, 16.3, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R100', 6, 4.1, 4.1, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R125', 6, 5.6, 5.5858, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R150', 6, 5.6, 5.43, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R175', 6, 7.08, 7.08, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R200', 6, 8.32, 8.43, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R229', 6, 7.08, 7.1, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R249', 6, 10.475, 10.59, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R225', 6, 8.58, 8.3, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R250', 6, 11.4, 11.433, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R300', 6, 12.5, 12.4861, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R400', 6, 15.25, 15.62, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K400 3 MT', 6, 15.0, 15.2, 7, 0,1001);
CALL SP_INSERTARPRODUCTO('1/2', 7, 2.17543, 2.07894, 9, 0,1001);
CALL SP_INSERTARPRODUCTO('5/8" C18', 7, 2.7, 2.71, 9, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4" C18', 8, 3.24, 3.24, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1" C16', 8, 5.43, 5.43, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1" C18', 8, 4.44, 4.27, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4" C18', 8, 5.64, 5.64, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2" C18', 8, 6.8, 6.74, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('2 C16', 8, 7.1, 7.0, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('2" C18', 8, 8.95, 8.9, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('3" C18', 8, 13.7, 13.75, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('Chico 3 X 3', 9, 6.0, 6.0, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('Grande 3 X 10', 9, 19.74, 20.08, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('Mediano 3 x 6.4', 9, 12.4, 12.4, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('Doble vista 3 x 3', 9, 6.64, 6.64, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('101', 10, 5.48, 5.35, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('103', 10, 6.475, 6.3125, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('126', 10, 7.6, 7.6, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C075', 10, 3.1, 3.1, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C100', 10, 4.15, 4.21, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C-150', 10, 6.4, 6.4, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P-100', 10, 5.88, 6.02, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P-150', 10, 7.2, 7.3, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K-150', 10, 8.4, 8.4, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R100', 10, 3.108, 3.08, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R-200', 10, 6.4, 6.35, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('101', 11, 7.2, 7.2, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('103', 11, 8.3, 8.2, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('122', 11, 7.4, 7.18, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('123', 11, 7.93, 7.93, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('124', 11, 3.96, 3.96, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('126', 11, 9.86, 9.86, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('127', 11, 11.4, 11.4, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('170', 11, 8.9, 8.86, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('1400', 11, 7.1, 7.1, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('1500', 11, 17.0, 17.0, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('C-075', 11, 3.98, 4.1, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('C-100', 11, 5.28, 5.54, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('C-125', 11, 6.96, 6.86, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('C-150', 11, 8.44, 8.4, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('K-100', 11, 9.0, 9.0, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('K-150', 11, 10.9, 10.166, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('K-300', 11, 14.57, 14.57, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('P-100', 11, 7.7, 7.82, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('P-150', 11, 9.3, 9.36, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('P-200', 11, 11.1, 11.1, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('P-300', 11, 13.5, 13.3, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('P-400', 11, 16.05, 16.9, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('R-100', 11, 4.033, 4.0, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('R-125', 11, 5.4, 5.4, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('R-200', 11, 8.1, 8.1, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('R-300', 11, 12.15, 12.4, 5, 0,1001);

CALL SP_INSERTARPRODUCTO('3/4 x 1/8', 12, 5.6, 5.6, 12, 0,1001);
CALL SP_INSERTARPRODUCTO('1 x 1/8', 12, 7.3, 7.3, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1 x 3/16', 12, 10.5, 10.5, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 1/8', 12, 9.2, 9.2, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 3/16', 12, 13.0, 13.0, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 1/4', 12, 16.64, 16.64, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2x 1/8', 12, 11.2, 11.2, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 x 3/16', 12, 16.83, 16.9, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 X 1/4', 12, 23.0, 23.0, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('2 x 1/8', 12, 16.0, 16.39, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('2 x 3/16', 12, 22.58, 22.58, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('2 x 1/4', 12, 29.0, 30.0, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 3/16', 12, 28.4, 28.4, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 1/4', 12, 37.3, 37.3, 13, 0,1001);
CALL SP_INSERTARPRODUCTO('3 X 1/8', 12, 23.0, 23.0, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('3 X 3/16', 12, 34.0, 34.0, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('3 x 1/4', 12, 44.3, 44.3, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('4 X 3/16', 12, 42.3, 42.1, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('4 X 1/4', 12, 60.45, 60.45, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4 x 109', 13, 4.8, 4.8, 12, 0,1001);
CALL SP_INSERTARPRODUCTO('1 x 109', 13, 6.3, 6.3, 13, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4 x 109', 13, 8.05, 8.05, 13, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2 x 109', 13, 10.07, 10.0, 13, 0,1001);
CALL SP_INSERTARPRODUCTO('3/8', 14, 4.5, 4.5, 18, 0,1001);
CALL SP_INSERTARPRODUCTO('12 MM', 14, 6.79, 7.0, 18, 2,1001);
CALL SP_INSERTARPRODUCTO('1/2', 14, 7.8, 7.8, 18, 0,1001);
CALL SP_INSERTARPRODUCTO('5/8', 14, 12.2, 12.2, 18, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4', 14, 17.2, 17.2, 18, 0,1001);
CALL SP_INSERTARPRODUCTO('1"', 14, 31.7, 31.7, 31, 0,1001);
CALL SP_INSERTARPRODUCTO('3/16', 15, 0.811, 0.811, 16, 0,1001);
CALL SP_INSERTARPRODUCTO('1/4', 15, 1.5, 1.48, 17, 0,1001);
CALL SP_INSERTARPRODUCTO('.5/16', 15, 2.5, 2.4, 16, 0,1001);
CALL SP_INSERTARPRODUCTO('3/8', 15, 3.5, 3.5, 21, 0,1001);
CALL SP_INSERTARPRODUCTO('1/2', 15, 6.14, 6.13, 20, 0,1001);
CALL SP_INSERTARPRODUCTO('5/8', 15, 9.6, 9.1, 20, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4', 15, 13.7, 13.7, 20, 0,1001);
CALL SP_INSERTARPRODUCTO('12 MM', 15, 5.5, 5.5, 20, 0,1001);
CALL SP_INSERTARPRODUCTO('1', 15, 24.4, 24.4, 19, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4"', 15, 22.2, 22.2, 19, 0,1001);
CALL SP_INSERTARPRODUCTO('3/8', 16, 5.3, 5.3, 30, 0,1001);
CALL SP_INSERTARPRODUCTO('12 MM', 16, 7.0, 7.1, 30, 0,1001);
CALL SP_INSERTARPRODUCTO('1/2', 16, 7.8, 7.8, 30, 0,1001);
CALL SP_INSERTARPRODUCTO('5/8', 16, 12.2, 12.2, 30, 0,1001);
CALL SP_INSERTARPRODUCTO('1/2 x 1/8', 17, 1.8, 1.8, 22, 2.3,1001);
CALL SP_INSERTARPRODUCTO('1/2 x 3/16', 17, 2.8, 2.7, 22, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1/2 x 1/4', 17, 4.0, 4.0, 23, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3/4 x 1/8', 17, 3.0, 3.0, 23, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3/4 x 3/16', 17, 4.4, 4.4, 23, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3/4 X 1/4', 17, 5.69, 5.7, 23, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 x 1/8 placa', 17, 4.0, 3.79, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 x 3/16', 17, 6.0, 6.0, 27, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 x 1/4', 17, 8.0, 8.0, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 x 3/8', 17, 11.3, 11.3, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 1/8', 17, 5.0, 5.0, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 3/16', 17, 7.3, 7.3, 27, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 1/4', 17, 9.7, 9.7, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 3/8', 17, 14.4, 14.4, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 x 1/8', 17, 6.0, 6.0, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 x 3/16', 17, 8.8, 8.68, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 x 1/4', 17, 11.6, 11.6, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 x 3/8', 17, 17.45, 18.0, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 X 1/2', 17, 23.0, 23.0, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2 x 1/8', 17, 8.1, 8.1, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2 x 3/16', 17, 11.6, 11.6, 26, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2 x 1/4', 17, 15.5, 15.5, 26, 2.0,1001);
CALL SP_INSERTARPRODUCTO('2 x 3/8', 17, 23.0, 23.5, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 1/8', 17, 9.6, 9.6, 34, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 X 3/16', 17, 14.2, 14.2, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 1/4', 17, 19.4, 19.4, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 3/8', 17, 28.6, 29.0, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3 x 1/8', 17, 10.88, 10.9, 34, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3 x 3/16', 17, 17.42, 17.42, 34, 0.3,1001);
CALL SP_INSERTARPRODUCTO('3 x 1/4', 17, 23.2, 23.2, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3 x 3/8', 17, 34.8, 34.8, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('4 X 3/16', 17, 22.6, 22.6, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('4 x 1/4', 17, 31.0, 30.75, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('4 x 3/8', 17, 46.0, 46.0, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 X 1/8', 18, 7.1, 7.5, 29, 0,1001);

CALL SP_UPDATESTOCKSUCURSAL(1,1,3,4);
CALL SP_UPDATESTOCKSUCURSAL(2,1,5,0);
CALL SP_UPDATESTOCKSUCURSAL(3,1,11,2);
CALL SP_UPDATESTOCKSUCURSAL(4,1,2,4);
CALL SP_UPDATESTOCKSUCURSAL(5,1,2,0);
CALL SP_UPDATESTOCKSUCURSAL(6,1,5,3);
CALL SP_UPDATESTOCKSUCURSAL(7,1,7,1);
CALL SP_UPDATESTOCKSUCURSAL(8,1,4,5);
CALL SP_UPDATESTOCKSUCURSAL(9,1,5,2);
CALL SP_UPDATESTOCKSUCURSAL(10,1,7,0);
CALL SP_UPDATESTOCKSUCURSAL(11,1,15,2);
CALL SP_UPDATESTOCKSUCURSAL(12,1,9,2);
CALL SP_UPDATESTOCKSUCURSAL(13,1,2,3);
CALL SP_UPDATESTOCKSUCURSAL(14,1,6,1);
CALL SP_UPDATESTOCKSUCURSAL(15,1,6,1);
CALL SP_UPDATESTOCKSUCURSAL(16,1,8,2);
CALL SP_UPDATESTOCKSUCURSAL(17,1,5,5);
CALL SP_UPDATESTOCKSUCURSAL(18,1,6,3);
CALL SP_UPDATESTOCKSUCURSAL(19,1,12,5);
CALL SP_UPDATESTOCKSUCURSAL(20,1,7,3);
CALL SP_UPDATESTOCKSUCURSAL(21,1,11,4);
CALL SP_UPDATESTOCKSUCURSAL(22,1,14,0);
CALL SP_UPDATESTOCKSUCURSAL(23,1,10,1);
CALL SP_UPDATESTOCKSUCURSAL(24,1,4,3);
CALL SP_UPDATESTOCKSUCURSAL(25,1,6,0);
CALL SP_UPDATESTOCKSUCURSAL(26,1,11,3);
CALL SP_UPDATESTOCKSUCURSAL(27,1,15,4);
CALL SP_UPDATESTOCKSUCURSAL(28,1,9,3);
CALL SP_UPDATESTOCKSUCURSAL(29,1,9,2);
CALL SP_UPDATESTOCKSUCURSAL(30,1,9,5);
CALL SP_UPDATESTOCKSUCURSAL(31,1,3,4);
CALL SP_UPDATESTOCKSUCURSAL(32,1,11,0);
CALL SP_UPDATESTOCKSUCURSAL(33,1,13,5);
CALL SP_UPDATESTOCKSUCURSAL(34,1,4,5);
CALL SP_UPDATESTOCKSUCURSAL(35,1,5,1);
CALL SP_UPDATESTOCKSUCURSAL(36,1,13,2);
CALL SP_UPDATESTOCKSUCURSAL(37,1,2,1);
CALL SP_UPDATESTOCKSUCURSAL(38,1,8,4);
CALL SP_UPDATESTOCKSUCURSAL(39,1,13,5);
CALL SP_UPDATESTOCKSUCURSAL(40,1,5,2);
CALL SP_UPDATESTOCKSUCURSAL(41,1,6,1);
CALL SP_UPDATESTOCKSUCURSAL(42,1,8,2);
CALL SP_UPDATESTOCKSUCURSAL(43,1,10,0);
CALL SP_UPDATESTOCKSUCURSAL(44,1,9,3);
CALL SP_UPDATESTOCKSUCURSAL(45,1,6,3);
CALL SP_UPDATESTOCKSUCURSAL(46,1,11,5);
CALL SP_UPDATESTOCKSUCURSAL(47,1,13,0);
CALL SP_UPDATESTOCKSUCURSAL(48,1,10,3);
CALL SP_UPDATESTOCKSUCURSAL(49,1,10,4);
CALL SP_UPDATESTOCKSUCURSAL(50,1,2,3);
CALL SP_UPDATESTOCKSUCURSAL(51,1,10,1);
CALL SP_UPDATESTOCKSUCURSAL(52,1,15,2);
CALL SP_UPDATESTOCKSUCURSAL(53,1,4,1);
CALL SP_UPDATESTOCKSUCURSAL(54,1,4,2);
CALL SP_UPDATESTOCKSUCURSAL(55,1,5,2);
CALL SP_UPDATESTOCKSUCURSAL(56,1,10,0);
CALL SP_UPDATESTOCKSUCURSAL(57,1,9,0);
CALL SP_UPDATESTOCKSUCURSAL(58,1,14,5);
CALL SP_UPDATESTOCKSUCURSAL(59,1,6,4);
CALL SP_UPDATESTOCKSUCURSAL(60,1,9,0);
CALL SP_UPDATESTOCKSUCURSAL(61,1,10,5);
CALL SP_UPDATESTOCKSUCURSAL(62,1,14,4);
CALL SP_UPDATESTOCKSUCURSAL(63,1,15,5);
CALL SP_UPDATESTOCKSUCURSAL(64,1,14,4);
CALL SP_UPDATESTOCKSUCURSAL(65,1,4,4);
CALL SP_UPDATESTOCKSUCURSAL(66,1,10,0);
CALL SP_UPDATESTOCKSUCURSAL(67,1,6,4);
CALL SP_UPDATESTOCKSUCURSAL(68,1,12,1);
CALL SP_UPDATESTOCKSUCURSAL(69,1,11,1);
CALL SP_UPDATESTOCKSUCURSAL(70,1,7,1);
CALL SP_UPDATESTOCKSUCURSAL(71,1,5,5);
CALL SP_UPDATESTOCKSUCURSAL(72,1,14,1);
CALL SP_UPDATESTOCKSUCURSAL(73,1,14,1);
CALL SP_UPDATESTOCKSUCURSAL(74,1,8,4);
CALL SP_UPDATESTOCKSUCURSAL(75,1,4,3);
CALL SP_UPDATESTOCKSUCURSAL(76,1,10,1);
CALL SP_UPDATESTOCKSUCURSAL(77,1,7,0);
CALL SP_UPDATESTOCKSUCURSAL(78,1,7,1);
CALL SP_UPDATESTOCKSUCURSAL(79,1,8,0);
CALL SP_UPDATESTOCKSUCURSAL(80,1,2,1);
CALL SP_UPDATESTOCKSUCURSAL(81,1,4,3);
CALL SP_UPDATESTOCKSUCURSAL(82,1,2,3);
CALL SP_UPDATESTOCKSUCURSAL(83,1,10,0);
CALL SP_UPDATESTOCKSUCURSAL(84,1,3,2);
CALL SP_UPDATESTOCKSUCURSAL(85,1,5,1);
CALL SP_UPDATESTOCKSUCURSAL(86,1,12,5);
CALL SP_UPDATESTOCKSUCURSAL(87,1,14,3);
CALL SP_UPDATESTOCKSUCURSAL(88,1,7,3);
CALL SP_UPDATESTOCKSUCURSAL(89,1,12,0);
CALL SP_UPDATESTOCKSUCURSAL(90,1,14,2);
CALL SP_UPDATESTOCKSUCURSAL(91,1,12,2);
CALL SP_UPDATESTOCKSUCURSAL(92,1,8,1);
CALL SP_UPDATESTOCKSUCURSAL(93,1,2,5);
CALL SP_UPDATESTOCKSUCURSAL(94,1,13,2);
CALL SP_UPDATESTOCKSUCURSAL(95,1,5,1);
CALL SP_UPDATESTOCKSUCURSAL(96,1,4,0);
CALL SP_UPDATESTOCKSUCURSAL(97,1,5,4);
CALL SP_UPDATESTOCKSUCURSAL(98,1,6,4);
CALL SP_UPDATESTOCKSUCURSAL(99,1,15,1);
CALL SP_UPDATESTOCKSUCURSAL(100,1,12,1);
CALL SP_UPDATESTOCKSUCURSAL(101,1,4,5);
CALL SP_UPDATESTOCKSUCURSAL(102,1,3,1);
CALL SP_UPDATESTOCKSUCURSAL(103,1,14,1);
CALL SP_UPDATESTOCKSUCURSAL(104,1,15,0);
CALL SP_UPDATESTOCKSUCURSAL(105,1,15,4);
CALL SP_UPDATESTOCKSUCURSAL(106,1,2,5);
CALL SP_UPDATESTOCKSUCURSAL(107,1,3,1);
CALL SP_UPDATESTOCKSUCURSAL(108,1,9,1);
CALL SP_UPDATESTOCKSUCURSAL(109,1,14,0);
CALL SP_UPDATESTOCKSUCURSAL(110,1,6,0);
CALL SP_UPDATESTOCKSUCURSAL(111,1,4,2);
CALL SP_UPDATESTOCKSUCURSAL(112,1,13,0);
CALL SP_UPDATESTOCKSUCURSAL(113,1,8,5);
CALL SP_UPDATESTOCKSUCURSAL(114,1,6,0);
CALL SP_UPDATESTOCKSUCURSAL(115,1,2,4);
CALL SP_UPDATESTOCKSUCURSAL(116,1,9,0);
CALL SP_UPDATESTOCKSUCURSAL(117,1,13,3);
CALL SP_UPDATESTOCKSUCURSAL(118,1,2,0);
CALL SP_UPDATESTOCKSUCURSAL(119,1,5,4);
CALL SP_UPDATESTOCKSUCURSAL(120,1,6,0);
CALL SP_UPDATESTOCKSUCURSAL(121,1,8,5);
CALL SP_UPDATESTOCKSUCURSAL(122,1,14,2);
CALL SP_UPDATESTOCKSUCURSAL(123,1,2,4);
CALL SP_UPDATESTOCKSUCURSAL(124,1,12,0);
CALL SP_UPDATESTOCKSUCURSAL(125,1,5,5);
CALL SP_UPDATESTOCKSUCURSAL(126,1,9,4);
CALL SP_UPDATESTOCKSUCURSAL(127,1,7,1);
CALL SP_UPDATESTOCKSUCURSAL(128,1,3,3);
CALL SP_UPDATESTOCKSUCURSAL(129,1,14,3);
CALL SP_UPDATESTOCKSUCURSAL(130,1,13,2);
CALL SP_UPDATESTOCKSUCURSAL(131,1,12,5);
CALL SP_UPDATESTOCKSUCURSAL(132,1,15,0);
CALL SP_UPDATESTOCKSUCURSAL(133,1,15,5);
CALL SP_UPDATESTOCKSUCURSAL(134,1,3,2);
CALL SP_UPDATESTOCKSUCURSAL(135,1,13,0);
CALL SP_UPDATESTOCKSUCURSAL(136,1,9,3);
CALL SP_UPDATESTOCKSUCURSAL(137,1,6,5);
CALL SP_UPDATESTOCKSUCURSAL(138,1,4,1);
CALL SP_UPDATESTOCKSUCURSAL(139,1,5,4);
CALL SP_UPDATESTOCKSUCURSAL(140,1,13,5);
CALL SP_UPDATESTOCKSUCURSAL(141,1,14,3);
CALL SP_UPDATESTOCKSUCURSAL(142,1,10,1);
CALL SP_UPDATESTOCKSUCURSAL(143,1,12,5);
CALL SP_UPDATESTOCKSUCURSAL(144,1,5,0);
CALL SP_UPDATESTOCKSUCURSAL(145,1,13,1);
CALL SP_UPDATESTOCKSUCURSAL(146,1,13,1);
CALL SP_UPDATESTOCKSUCURSAL(147,1,5,3);
CALL SP_UPDATESTOCKSUCURSAL(148,1,11,2);
CALL SP_UPDATESTOCKSUCURSAL(149,1,4,4);
CALL SP_UPDATESTOCKSUCURSAL(150,1,9,0);
CALL SP_UPDATESTOCKSUCURSAL(151,1,4,3);
CALL SP_UPDATESTOCKSUCURSAL(152,1,13,5);
CALL SP_UPDATESTOCKSUCURSAL(153,1,13,4);
CALL SP_UPDATESTOCKSUCURSAL(154,1,5,3);
CALL SP_UPDATESTOCKSUCURSAL(155,1,9,2);
CALL SP_UPDATESTOCKSUCURSAL(156,1,14,2);
CALL SP_UPDATESTOCKSUCURSAL(157,1,4,5);
CALL SP_UPDATESTOCKSUCURSAL(158,1,14,4);
CALL SP_UPDATESTOCKSUCURSAL(159,1,6,5);
CALL SP_UPDATESTOCKSUCURSAL(160,1,7,2);
CALL SP_UPDATESTOCKSUCURSAL(161,1,2,4);
CALL SP_UPDATESTOCKSUCURSAL(162,1,12,4);
CALL SP_UPDATESTOCKSUCURSAL(163,1,4,5);
CALL SP_UPDATESTOCKSUCURSAL(164,1,5,3);
CALL SP_UPDATESTOCKSUCURSAL(165,1,6,3);
CALL SP_UPDATESTOCKSUCURSAL(166,1,12,2);
CALL SP_UPDATESTOCKSUCURSAL(167,1,12,5);
CALL SP_UPDATESTOCKSUCURSAL(168,1,7,5);
CALL SP_UPDATESTOCKSUCURSAL(169,1,6,1);
CALL SP_UPDATESTOCKSUCURSAL(170,1,11,3);
CALL SP_UPDATESTOCKSUCURSAL(171,1,7,4);
CALL SP_UPDATESTOCKSUCURSAL(172,1,10,0);
CALL SP_UPDATESTOCKSUCURSAL(173,1,9,2);
CALL SP_UPDATESTOCKSUCURSAL(174,1,7,2);
CALL SP_UPDATESTOCKSUCURSAL(175,1,12,4);
CALL SP_UPDATESTOCKSUCURSAL(176,1,13,3);
CALL SP_UPDATESTOCKSUCURSAL(177,1,5,0);
CALL SP_UPDATESTOCKSUCURSAL(178,1,9,3);
CALL SP_UPDATESTOCKSUCURSAL(179,1,8,2);
CALL SP_UPDATESTOCKSUCURSAL(180,1,6,0);
CALL SP_UPDATESTOCKSUCURSAL(181,1,14,0);
CALL SP_UPDATESTOCKSUCURSAL(182,1,2,2);
CALL SP_UPDATESTOCKSUCURSAL(183,1,3,4);
CALL SP_UPDATESTOCKSUCURSAL(184,1,6,4);
CALL SP_UPDATESTOCKSUCURSAL(185,1,12,1);
CALL SP_UPDATESTOCKSUCURSAL(186,1,8,4);
CALL SP_UPDATESTOCKSUCURSAL(187,1,5,0);
CALL SP_UPDATESTOCKSUCURSAL(188,1,7,5);
CALL SP_UPDATESTOCKSUCURSAL(189,1,8,2);
CALL SP_UPDATESTOCKSUCURSAL(190,1,9,4);
CALL SP_UPDATESTOCKSUCURSAL(191,1,15,5);
CALL SP_UPDATESTOCKSUCURSAL(192,1,10,4);
CALL SP_UPDATESTOCKSUCURSAL(193,1,5,0);
CALL SP_UPDATESTOCKSUCURSAL(194,1,5,4);
CALL SP_UPDATESTOCKSUCURSAL(195,1,2,5);
CALL SP_UPDATESTOCKSUCURSAL(196,1,14,5);
CALL SP_UPDATESTOCKSUCURSAL(197,1,13,3);
CALL SP_UPDATESTOCKSUCURSAL(198,1,13,3);
CALL SP_UPDATESTOCKSUCURSAL(199,1,5,1);
CALL SP_UPDATESTOCKSUCURSAL(200,1,10,0);
CALL SP_UPDATESTOCKSUCURSAL(201,1,11,3);
CALL SP_UPDATESTOCKSUCURSAL(202,1,2,1);
CALL SP_UPDATESTOCKSUCURSAL(203,1,6,5);
CALL SP_UPDATESTOCKSUCURSAL(204,1,12,4);
CALL SP_UPDATESTOCKSUCURSAL(205,1,10,0);
CALL SP_UPDATESTOCKSUCURSAL(206,1,4,2);
CALL SP_UPDATESTOCKSUCURSAL(207,1,7,4);
CALL SP_UPDATESTOCKSUCURSAL(208,1,10,4);
CALL SP_UPDATESTOCKSUCURSAL(209,1,12,2);
CALL SP_UPDATESTOCKSUCURSAL(210,1,7,5);
CALL SP_UPDATESTOCKSUCURSAL(211,1,13,5);
CALL SP_UPDATESTOCKSUCURSAL(212,1,14,3);
CALL SP_UPDATESTOCKSUCURSAL(213,1,8,3);
CALL SP_UPDATESTOCKSUCURSAL(214,1,4,3);
CALL SP_UPDATESTOCKSUCURSAL(215,1,8,4);
CALL SP_UPDATESTOCKSUCURSAL(216,1,3,5);
CALL SP_UPDATESTOCKSUCURSAL(217,1,7,5);
CALL SP_UPDATESTOCKSUCURSAL(218,1,13,2);
CALL SP_UPDATESTOCKSUCURSAL(219,1,8,1);
CALL SP_UPDATESTOCKSUCURSAL(220,1,2,4);
CALL SP_UPDATESTOCKSUCURSAL(221,1,10,0);
CALL SP_UPDATESTOCKSUCURSAL(222,1,14,3);
CALL SP_UPDATESTOCKSUCURSAL(223,1,5,4);
CALL SP_UPDATESTOCKSUCURSAL(224,1,10,2);
CALL SP_UPDATESTOCKSUCURSAL(225,1,13,4);
CALL SP_UPDATESTOCKSUCURSAL(226,1,2,5);
CALL SP_UPDATESTOCKSUCURSAL(227,1,13,3);
CALL SP_UPDATESTOCKSUCURSAL(228,1,13,4);
CALL SP_UPDATESTOCKSUCURSAL(229,1,10,5);
CALL SP_UPDATESTOCKSUCURSAL(230,1,12,3);
CALL SP_UPDATESTOCKSUCURSAL(231,1,4,1);
CALL SP_UPDATESTOCKSUCURSAL(232,1,14,1);
CALL SP_UPDATESTOCKSUCURSAL(233,1,7,0);
CALL SP_UPDATESTOCKSUCURSAL(234,1,13,5);
CALL SP_UPDATESTOCKSUCURSAL(235,1,5,3);
CALL SP_UPDATESTOCKSUCURSAL(236,1,14,3);

CALL SP_UPDATESTOCKSUCURSAL(1,2,5,4);
CALL SP_UPDATESTOCKSUCURSAL(2,2,5,2);
CALL SP_UPDATESTOCKSUCURSAL(3,2,11,3);
CALL SP_UPDATESTOCKSUCURSAL(4,2,9,5);
CALL SP_UPDATESTOCKSUCURSAL(5,2,5,1);
CALL SP_UPDATESTOCKSUCURSAL(6,2,9,0);
CALL SP_UPDATESTOCKSUCURSAL(7,2,12,2);
CALL SP_UPDATESTOCKSUCURSAL(8,2,8,5);
CALL SP_UPDATESTOCKSUCURSAL(9,2,12,3);
CALL SP_UPDATESTOCKSUCURSAL(10,2,3,5);
CALL SP_UPDATESTOCKSUCURSAL(11,2,2,5);
CALL SP_UPDATESTOCKSUCURSAL(12,2,10,0);
CALL SP_UPDATESTOCKSUCURSAL(13,2,5,3);
CALL SP_UPDATESTOCKSUCURSAL(14,2,14,3);
CALL SP_UPDATESTOCKSUCURSAL(15,2,2,5);
CALL SP_UPDATESTOCKSUCURSAL(16,2,3,4);
CALL SP_UPDATESTOCKSUCURSAL(17,2,5,3);
CALL SP_UPDATESTOCKSUCURSAL(18,2,12,0);
CALL SP_UPDATESTOCKSUCURSAL(19,2,6,4);
CALL SP_UPDATESTOCKSUCURSAL(20,2,3,4);
CALL SP_UPDATESTOCKSUCURSAL(21,2,15,3);
CALL SP_UPDATESTOCKSUCURSAL(22,2,13,5);
CALL SP_UPDATESTOCKSUCURSAL(23,2,6,3);
CALL SP_UPDATESTOCKSUCURSAL(24,2,6,0);
CALL SP_UPDATESTOCKSUCURSAL(25,2,14,2);
CALL SP_UPDATESTOCKSUCURSAL(26,2,6,0);
CALL SP_UPDATESTOCKSUCURSAL(27,2,12,0);
CALL SP_UPDATESTOCKSUCURSAL(28,2,3,2);
CALL SP_UPDATESTOCKSUCURSAL(29,2,3,5);
CALL SP_UPDATESTOCKSUCURSAL(30,2,15,5);
CALL SP_UPDATESTOCKSUCURSAL(31,2,15,3);
CALL SP_UPDATESTOCKSUCURSAL(32,2,12,1);
CALL SP_UPDATESTOCKSUCURSAL(33,2,10,0);
CALL SP_UPDATESTOCKSUCURSAL(34,2,12,5);
CALL SP_UPDATESTOCKSUCURSAL(35,2,11,1);
CALL SP_UPDATESTOCKSUCURSAL(36,2,12,0);
CALL SP_UPDATESTOCKSUCURSAL(37,2,14,5);
CALL SP_UPDATESTOCKSUCURSAL(38,2,14,5);
CALL SP_UPDATESTOCKSUCURSAL(39,2,8,0);
CALL SP_UPDATESTOCKSUCURSAL(40,2,12,3);
CALL SP_UPDATESTOCKSUCURSAL(41,2,15,2);
CALL SP_UPDATESTOCKSUCURSAL(42,2,7,2);
CALL SP_UPDATESTOCKSUCURSAL(43,2,4,0);
CALL SP_UPDATESTOCKSUCURSAL(44,2,13,4);
CALL SP_UPDATESTOCKSUCURSAL(45,2,4,1);
CALL SP_UPDATESTOCKSUCURSAL(46,2,11,3);
CALL SP_UPDATESTOCKSUCURSAL(47,2,13,0);
CALL SP_UPDATESTOCKSUCURSAL(48,2,5,0);
CALL SP_UPDATESTOCKSUCURSAL(49,2,11,1);
CALL SP_UPDATESTOCKSUCURSAL(50,2,6,0);
CALL SP_UPDATESTOCKSUCURSAL(51,2,12,3);
CALL SP_UPDATESTOCKSUCURSAL(52,2,10,2);
CALL SP_UPDATESTOCKSUCURSAL(53,2,4,0);
CALL SP_UPDATESTOCKSUCURSAL(54,2,2,5);
CALL SP_UPDATESTOCKSUCURSAL(55,2,13,4);
CALL SP_UPDATESTOCKSUCURSAL(56,2,12,0);
CALL SP_UPDATESTOCKSUCURSAL(57,2,2,0);
CALL SP_UPDATESTOCKSUCURSAL(58,2,3,4);
CALL SP_UPDATESTOCKSUCURSAL(59,2,10,0);
CALL SP_UPDATESTOCKSUCURSAL(60,2,4,0);
CALL SP_UPDATESTOCKSUCURSAL(61,2,6,4);
CALL SP_UPDATESTOCKSUCURSAL(62,2,10,0);
CALL SP_UPDATESTOCKSUCURSAL(63,2,8,1);
CALL SP_UPDATESTOCKSUCURSAL(64,2,3,0);
CALL SP_UPDATESTOCKSUCURSAL(65,2,3,0);
CALL SP_UPDATESTOCKSUCURSAL(66,2,5,5);
CALL SP_UPDATESTOCKSUCURSAL(67,2,9,2);
CALL SP_UPDATESTOCKSUCURSAL(68,2,15,2);
CALL SP_UPDATESTOCKSUCURSAL(69,2,12,0);
CALL SP_UPDATESTOCKSUCURSAL(70,2,11,3);
CALL SP_UPDATESTOCKSUCURSAL(71,2,15,5);
CALL SP_UPDATESTOCKSUCURSAL(72,2,3,1);
CALL SP_UPDATESTOCKSUCURSAL(73,2,13,1);
CALL SP_UPDATESTOCKSUCURSAL(74,2,2,3);
CALL SP_UPDATESTOCKSUCURSAL(75,2,9,4);
CALL SP_UPDATESTOCKSUCURSAL(76,2,11,4);
CALL SP_UPDATESTOCKSUCURSAL(77,2,10,4);
CALL SP_UPDATESTOCKSUCURSAL(78,2,5,2);
CALL SP_UPDATESTOCKSUCURSAL(79,2,7,2);
CALL SP_UPDATESTOCKSUCURSAL(80,2,12,4);
CALL SP_UPDATESTOCKSUCURSAL(81,2,3,5);
CALL SP_UPDATESTOCKSUCURSAL(82,2,7,0);
CALL SP_UPDATESTOCKSUCURSAL(83,2,14,0);
CALL SP_UPDATESTOCKSUCURSAL(84,2,8,5);
CALL SP_UPDATESTOCKSUCURSAL(85,2,13,5);
CALL SP_UPDATESTOCKSUCURSAL(86,2,8,4);
CALL SP_UPDATESTOCKSUCURSAL(87,2,5,4);
CALL SP_UPDATESTOCKSUCURSAL(88,2,13,5);
CALL SP_UPDATESTOCKSUCURSAL(89,2,7,1);
CALL SP_UPDATESTOCKSUCURSAL(90,2,2,5);
CALL SP_UPDATESTOCKSUCURSAL(91,2,9,0);
CALL SP_UPDATESTOCKSUCURSAL(92,2,2,5);
CALL SP_UPDATESTOCKSUCURSAL(93,2,6,0);
CALL SP_UPDATESTOCKSUCURSAL(94,2,15,0);
CALL SP_UPDATESTOCKSUCURSAL(95,2,12,5);
CALL SP_UPDATESTOCKSUCURSAL(96,2,2,1);
CALL SP_UPDATESTOCKSUCURSAL(97,2,13,4);
CALL SP_UPDATESTOCKSUCURSAL(98,2,11,2);
CALL SP_UPDATESTOCKSUCURSAL(99,2,4,0);
CALL SP_UPDATESTOCKSUCURSAL(100,2,14,4);
CALL SP_UPDATESTOCKSUCURSAL(101,2,2,0);
CALL SP_UPDATESTOCKSUCURSAL(102,2,5,4);
CALL SP_UPDATESTOCKSUCURSAL(103,2,13,3);
CALL SP_UPDATESTOCKSUCURSAL(104,2,7,0);
CALL SP_UPDATESTOCKSUCURSAL(105,2,9,3);
CALL SP_UPDATESTOCKSUCURSAL(106,2,13,3);
CALL SP_UPDATESTOCKSUCURSAL(107,2,6,4);
CALL SP_UPDATESTOCKSUCURSAL(108,2,10,3);
CALL SP_UPDATESTOCKSUCURSAL(109,2,7,2);
CALL SP_UPDATESTOCKSUCURSAL(110,2,11,3);
CALL SP_UPDATESTOCKSUCURSAL(111,2,15,3);
CALL SP_UPDATESTOCKSUCURSAL(112,2,7,2);
CALL SP_UPDATESTOCKSUCURSAL(113,2,10,5);
CALL SP_UPDATESTOCKSUCURSAL(114,2,7,2);
CALL SP_UPDATESTOCKSUCURSAL(115,2,8,0);
CALL SP_UPDATESTOCKSUCURSAL(116,2,8,5);
CALL SP_UPDATESTOCKSUCURSAL(117,2,4,1);
CALL SP_UPDATESTOCKSUCURSAL(118,2,12,3);
CALL SP_UPDATESTOCKSUCURSAL(119,2,11,0);
CALL SP_UPDATESTOCKSUCURSAL(120,2,5,5);
CALL SP_UPDATESTOCKSUCURSAL(121,2,14,1);
CALL SP_UPDATESTOCKSUCURSAL(122,2,14,3);
CALL SP_UPDATESTOCKSUCURSAL(123,2,10,2);
CALL SP_UPDATESTOCKSUCURSAL(124,2,5,2);
CALL SP_UPDATESTOCKSUCURSAL(125,2,14,1);
CALL SP_UPDATESTOCKSUCURSAL(126,2,15,0);
CALL SP_UPDATESTOCKSUCURSAL(127,2,4,2);
CALL SP_UPDATESTOCKSUCURSAL(128,2,11,2);
CALL SP_UPDATESTOCKSUCURSAL(129,2,4,4);
CALL SP_UPDATESTOCKSUCURSAL(130,2,4,2);
CALL SP_UPDATESTOCKSUCURSAL(131,2,12,3);
CALL SP_UPDATESTOCKSUCURSAL(132,2,13,2);
CALL SP_UPDATESTOCKSUCURSAL(133,2,14,3);
CALL SP_UPDATESTOCKSUCURSAL(134,2,11,1);
CALL SP_UPDATESTOCKSUCURSAL(135,2,5,0);
CALL SP_UPDATESTOCKSUCURSAL(136,2,10,4);
CALL SP_UPDATESTOCKSUCURSAL(137,2,12,3);
CALL SP_UPDATESTOCKSUCURSAL(138,2,13,0);
CALL SP_UPDATESTOCKSUCURSAL(139,2,14,3);
CALL SP_UPDATESTOCKSUCURSAL(140,2,6,1);
CALL SP_UPDATESTOCKSUCURSAL(141,2,3,5);
CALL SP_UPDATESTOCKSUCURSAL(142,2,11,5);
CALL SP_UPDATESTOCKSUCURSAL(143,2,9,4);
CALL SP_UPDATESTOCKSUCURSAL(144,2,4,4);
CALL SP_UPDATESTOCKSUCURSAL(145,2,7,4);
CALL SP_UPDATESTOCKSUCURSAL(146,2,11,1);
CALL SP_UPDATESTOCKSUCURSAL(147,2,10,3);
CALL SP_UPDATESTOCKSUCURSAL(148,2,10,0);
CALL SP_UPDATESTOCKSUCURSAL(149,2,13,2);
CALL SP_UPDATESTOCKSUCURSAL(150,2,10,1);
CALL SP_UPDATESTOCKSUCURSAL(151,2,4,4);
CALL SP_UPDATESTOCKSUCURSAL(152,2,10,0);
CALL SP_UPDATESTOCKSUCURSAL(153,2,7,3);
CALL SP_UPDATESTOCKSUCURSAL(154,2,11,2);
CALL SP_UPDATESTOCKSUCURSAL(155,2,14,4);
CALL SP_UPDATESTOCKSUCURSAL(156,2,6,0);
CALL SP_UPDATESTOCKSUCURSAL(157,2,14,0);
CALL SP_UPDATESTOCKSUCURSAL(158,2,13,5);
CALL SP_UPDATESTOCKSUCURSAL(159,2,8,5);
CALL SP_UPDATESTOCKSUCURSAL(160,2,2,4);
CALL SP_UPDATESTOCKSUCURSAL(161,2,15,2);
CALL SP_UPDATESTOCKSUCURSAL(162,2,12,1);
CALL SP_UPDATESTOCKSUCURSAL(163,2,7,4);
CALL SP_UPDATESTOCKSUCURSAL(164,2,11,1);
CALL SP_UPDATESTOCKSUCURSAL(165,2,6,0);
CALL SP_UPDATESTOCKSUCURSAL(166,2,15,1);
CALL SP_UPDATESTOCKSUCURSAL(167,2,14,3);
CALL SP_UPDATESTOCKSUCURSAL(168,2,10,1);
CALL SP_UPDATESTOCKSUCURSAL(169,2,15,5);
CALL SP_UPDATESTOCKSUCURSAL(170,2,3,0);
CALL SP_UPDATESTOCKSUCURSAL(171,2,14,2);
CALL SP_UPDATESTOCKSUCURSAL(172,2,6,1);
CALL SP_UPDATESTOCKSUCURSAL(173,2,3,2);
CALL SP_UPDATESTOCKSUCURSAL(174,2,4,1);
CALL SP_UPDATESTOCKSUCURSAL(175,2,14,4);
CALL SP_UPDATESTOCKSUCURSAL(176,2,7,4);
CALL SP_UPDATESTOCKSUCURSAL(177,2,7,3);
CALL SP_UPDATESTOCKSUCURSAL(178,2,8,3);
CALL SP_UPDATESTOCKSUCURSAL(179,2,9,1);
CALL SP_UPDATESTOCKSUCURSAL(180,2,15,1);
CALL SP_UPDATESTOCKSUCURSAL(181,2,2,1);
CALL SP_UPDATESTOCKSUCURSAL(182,2,9,0);
CALL SP_UPDATESTOCKSUCURSAL(183,2,12,5);
CALL SP_UPDATESTOCKSUCURSAL(184,2,11,4);
CALL SP_UPDATESTOCKSUCURSAL(185,2,4,5);
CALL SP_UPDATESTOCKSUCURSAL(186,2,13,3);
CALL SP_UPDATESTOCKSUCURSAL(187,2,2,3);
CALL SP_UPDATESTOCKSUCURSAL(188,2,4,2);
CALL SP_UPDATESTOCKSUCURSAL(189,2,2,5);
CALL SP_UPDATESTOCKSUCURSAL(190,2,5,5);
CALL SP_UPDATESTOCKSUCURSAL(191,2,11,5);
CALL SP_UPDATESTOCKSUCURSAL(192,2,13,4);
CALL SP_UPDATESTOCKSUCURSAL(193,2,13,1);
CALL SP_UPDATESTOCKSUCURSAL(194,2,10,3);
CALL SP_UPDATESTOCKSUCURSAL(195,2,3,5);
CALL SP_UPDATESTOCKSUCURSAL(196,2,10,4);
CALL SP_UPDATESTOCKSUCURSAL(197,2,14,4);
CALL SP_UPDATESTOCKSUCURSAL(198,2,8,1);
CALL SP_UPDATESTOCKSUCURSAL(199,2,15,4);
CALL SP_UPDATESTOCKSUCURSAL(200,2,14,1);
CALL SP_UPDATESTOCKSUCURSAL(201,2,8,1);
CALL SP_UPDATESTOCKSUCURSAL(202,2,2,3);
CALL SP_UPDATESTOCKSUCURSAL(203,2,7,0);
CALL SP_UPDATESTOCKSUCURSAL(204,2,10,2);
CALL SP_UPDATESTOCKSUCURSAL(205,2,13,4);
CALL SP_UPDATESTOCKSUCURSAL(206,2,4,5);
CALL SP_UPDATESTOCKSUCURSAL(207,2,15,4);
CALL SP_UPDATESTOCKSUCURSAL(208,2,14,5);
CALL SP_UPDATESTOCKSUCURSAL(209,2,9,5);
CALL SP_UPDATESTOCKSUCURSAL(210,2,11,5);
CALL SP_UPDATESTOCKSUCURSAL(211,2,12,1);
CALL SP_UPDATESTOCKSUCURSAL(212,2,4,5);
CALL SP_UPDATESTOCKSUCURSAL(213,2,10,2);
CALL SP_UPDATESTOCKSUCURSAL(214,2,15,1);
CALL SP_UPDATESTOCKSUCURSAL(215,2,15,2);
CALL SP_UPDATESTOCKSUCURSAL(216,2,3,1);
CALL SP_UPDATESTOCKSUCURSAL(217,2,15,2);
CALL SP_UPDATESTOCKSUCURSAL(218,2,3,3);
CALL SP_UPDATESTOCKSUCURSAL(219,2,6,2);
CALL SP_UPDATESTOCKSUCURSAL(220,2,14,1);
CALL SP_UPDATESTOCKSUCURSAL(221,2,8,0);
CALL SP_UPDATESTOCKSUCURSAL(222,2,4,5);
CALL SP_UPDATESTOCKSUCURSAL(223,2,5,5);
CALL SP_UPDATESTOCKSUCURSAL(224,2,6,3);
CALL SP_UPDATESTOCKSUCURSAL(225,2,11,2);
CALL SP_UPDATESTOCKSUCURSAL(226,2,12,4);
CALL SP_UPDATESTOCKSUCURSAL(227,2,11,2);
CALL SP_UPDATESTOCKSUCURSAL(228,2,10,3);
CALL SP_UPDATESTOCKSUCURSAL(229,2,3,2);
CALL SP_UPDATESTOCKSUCURSAL(230,2,4,2);
CALL SP_UPDATESTOCKSUCURSAL(231,2,3,0);
CALL SP_UPDATESTOCKSUCURSAL(232,2,7,2);
CALL SP_UPDATESTOCKSUCURSAL(233,2,7,1);
CALL SP_UPDATESTOCKSUCURSAL(234,2,12,4);
CALL SP_UPDATESTOCKSUCURSAL(235,2,9,1);
CALL SP_UPDATESTOCKSUCURSAL(236,2,14,1);

INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (1,1,11);
INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (1,2,10);
INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (1,3,9.5);
INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (1,4,9);
INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (1,5,8.5);
INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (1,6,8);

INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (2,1,13);
INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (2,2,12);
INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (2,3,11);
INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (2,4,10);
INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (2,5,9.5);
INSERT INTO TIPOGANANCIA (IdTipo, IdRangoCliente, Ganancia) VALUES (2,6,9);

INSERT INTO CARGO (NombreCargo, Cargo, IdTipo) VALUES ('Flete', 0.69, 1);
INSERT INTO CARGO (NombreCargo, Cargo, IdTipo) VALUES ('Seguro', 0.40, 1);
INSERT INTO CARGO (NombreCargo, Cargo, IdTipo) VALUES ('Descarga', 0.121, 1);

INSERT INTO CARGO (NombreCargo, Cargo, IdTipo) VALUES ('Flete', 0.30, 2);
INSERT INTO CARGO (NombreCargo, Cargo, IdTipo) VALUES ('Seguro', 0.10, 2);
INSERT INTO CARGO (NombreCargo, Cargo, IdTipo) VALUES ('Descarga', 0.12, 2);

INSERT INTO CARGOGENERAL (NombreCargoGeneral, Parametro, Cargo) VALUES ('IVA', 1, 16);
INSERT INTO CARGOGENERAL (NombreCargoGeneral, Parametro, Cargo) VALUES ('Flete General', 60, 3);


--



-- CALL SP_REGISTRARSUCURSAL('38800', 72856, 'Ejemplo 21', 'Sucursal Ejemplo', '4451239843',1001);


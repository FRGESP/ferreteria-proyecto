-- BASE DE DATOS EN MYSQL

CREATE DATABASE FERRETERIA;

USE FERRETERIA;

CREATE TABLE ESTADO(
    IdEstado INT AUTO_INCREMENT,
    Estado VARCHAR(50) NOT NULL,
    CONSTRAINT PK_ESTADO PRIMARY KEY(IdEstado)
);

CREATE TABLE MUNICIPIO(
    IdMunicipio INT AUTO_INCREMENT,
    Municipio VARCHAR(50) NOT NULL,
    IdEstado INT NOT NULL,
    CONSTRAINT PK_MUNICIPIO PRIMARY KEY(IdMunicipio),
    CONSTRAINT FK_MUNICIPIOTOESTADO FOREIGN KEY(IdEstado) REFERENCES ESTADO(IdEstado)
);

CREATE TABLE CODIGOPOSTAL(
    IdCodigoPostal INT AUTO_INCREMENT,
    CodigoPostal VARCHAR(10) NOT NULL,
    IdMunicipio INT NOT NULL,
    CONSTRAINT PK_CODIGOPOSTAL PRIMARY KEY(IdCodigoPostal),
    CONSTRAINT FK_CODIGOPOSTALTOMUNICIPIO FOREIGN KEY(IdMunicipio) REFERENCES MUNICIPIO(IdMunicipio)
);

CREATE TABLE COLONIA(
    IdColonia INT AUTO_INCREMENT,
    Colonia VARCHAR(75) NOT NULL,
    IdCodigoPostal INT NOT NULL,
    CONSTRAINT PK_COLONIA PRIMARY KEY(IdColonia),
    CONSTRAINT FK_COLONIATOCODIGOPOSTAL FOREIGN KEY(IdCodigoPostal) REFERENCES CODIGOPOSTAL(IdCodigoPostal)
);

CREATE TABLE DIRECCION(
    IdDireccion INT AUTO_INCREMENT,
    IdCodigoPostal INT NOT NULL,
    IdColonia INT NOT NULL,
    Calle VARCHAR(75) NOT NULL,
    CONSTRAINT PK_DIRECCION PRIMARY KEY(IdDireccion),
    CONSTRAINT FK_DIRECCIONTOCODIGOPOSTAL FOREIGN KEY(IdCodigoPostal) REFERENCES CODIGOPOSTAL(IdCodigoPostal),
    CONSTRAINT FK_DIRECCIONTOCOLONIA FOREIGN KEY(IdColonia) REFERENCES COLONIA(IdColonia)
);

CREATE TABLE SUCURSAL(
    IdSucursal INT AUTO_INCREMENT,
    Nombre VARCHAR(50) NOT NULL,
    IdDireccion INT NOT NULL,
    Telefono VARCHAR(12),
    FechaRegistro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_SUCURSAL PRIMARY KEY(IdSucursal),
    CONSTRAINT FK_SUCURSALTODIRECCION FOREIGN KEY(IdDireccion) REFERENCES DIRECCION(IdDireccion)
);

CREATE TABLE ROL(
  IdRol INT AUTO_INCREMENT,
  Rol VARCHAR(100),
  CONSTRAINT PK_ROL PRIMARY KEY(IdRol)
);

CREATE TABLE TIPOPRODUCTO(
    IdTipoProdcuto INT AUTO_INCREMENT,
    Tipo VARCHAR(100) NOT NULL,
    CONSTRAINT PK_TIPOPRODUCTO PRIMARY KEY(IdTipoProdcuto)
);

CREATE TABLE CATEGORIAPRODUCTO(
    IdCategoria INT AUTO_INCREMENT,
    IdTipo INT NOT NULL,
    Categoria VARCHAR(100) NOT NULL,
    CONSTRAINT PK_CATEGORIA PRIMARY KEY(IdCategoria),
    CONSTRAINT FK_CATEGORIATOTIPO FOREIGN KEY(IdTipo) REFERENCES TIPOPRODUCTO(IdTipoProdcuto)
);

CREATE TABLE RANGOCLIENTE(
    IdRangoCliente INT AUTO_INCREMENT,
    Rango VARCHAR(50) NOT NULL,
    CONSTRAINT PK_RANGOCLIENTE PRIMARY KEY(IdRangoCliente)
);

CREATE TABLE CATEGORIA_RANGO(
    Id_CategoriaRango INT AUTO_INCREMENT,
    IdRangoCliente INT NOT NULL,
    IdCategoria INT NOT NULL,
    Ganancia DECIMAL(10,2) NOT NULL,
    CONSTRAINT PK_CATEGORIA_RANGO PRIMARY KEY(Id_CategoriaRango),
    CONSTRAINT FK_CATEGORIA_RANGOTORANGOCLI FOREIGN KEY(IdRangoCliente) REFERENCES RANGOCLIENTE(IdRangoCliente),
    CONSTRAINT FK_CATEGORIA_RANGOTOCATEGORIA FOREIGN KEY (IdCategoria) REFERENCES CATEGORIAPRODUCTO(IdCategoria)
);

CREATE TABLE ESTATUS(
    IdEstatus INT AUTO_INCREMENT,
    Estatus VARCHAR(100),
    CONSTRAINT PK_ESTATUS PRIMARY KEY(IdEstatus)
);

CREATE TABLE PERSONA(
    IdPersona INT AUTO_INCREMENT,
    Nombre VARCHAR(300) NOT NULL,
    ApellidoPaterno VARCHAR(300) NOT NULL,
    ApellidoMaterno VARCHAR(300) NOT NULL,
    Telefono VARCHAR(15) NOT NULL,
    Edad VARCHAR(3) NOT NULL,
    CONSTRAINT PK_PERSONA PRIMARY KEY(IdPersona)
);

CREATE TABLE EMPLEADO(
    IdEmpleado INT AUTO_INCREMENT,
    IdPersona INT NOT NULL,
    IdRol INT NOT NULL,
    IdEstatus INT NOT NULL,
    IdSucursal INT NOT NULL,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_EMPLEADO PRIMARY KEY(IdEmpleado),
    CONSTRAINT FK_EMPLEADOTOPERSONA FOREIGN KEY(IdPersona) REFERENCES PERSONA(IdPersona) ON DELETE CASCADE,
    CONSTRAINT FK_EMPLEADOTOESTATUS FOREIGN KEY(IdEstatus) REFERENCES ESTATUS(IdEstatus) ON DELETE CASCADE,
    CONSTRAINT FK_EMPLEADOTOROL FOREIGN KEY(IdRol) REFERENCES ROL(IdRol) ON DELETE CASCADE,
    CONSTRAINT FK_EMPLEADOTOSUCURSAL FOREIGN KEY(IdSucursal) REFERENCES SUCURSAL(IdSucursal)
);

CREATE TABLE CLIENTE(
    IdCliente INT AUTO_INCREMENT,
    IdPersona INT NOT NULL,
    IdDireccion INT NOT NULL,
    IdRangoCliente INT NOT NULL,
    Credito DECIMAL(10,2) DEFAULT 0,
    CreditoMaximo DECIMAL(10,2) DEFAULT 0,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Estatus INT DEFAULT 1,
    CONSTRAINT PK_CLIENTE PRIMARY KEY(IdCliente),
    CONSTRAINT FK_CLIENTETOESTADO FOREIGN KEY(Estatus) REFERENCES ESTATUS(IdEstatus),
    CONSTRAINT FK_CLIENTETOPERSONA FOREIGN KEY(IdPersona) REFERENCES PERSONA(IdPersona),
    CONSTRAINT FK_CLIENTETODIRECCION FOREIGN KEY(IdDireccion) REFERENCES DIRECCION(IdDireccion),
    CONSTRAINT FK_CLIENTETORANGOCLIENTE FOREIGN KEY(IdRangoCliente) REFERENCES RANGOCLIENTE(IdRangoCliente)
);

CREATE TABLE VENDEDOR_CLIENTE
(
    IdCliente INT NOT NULL,
    IdEmpleado INT NOT NULL,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Activo BOOLEAN DEFAULT TRUE,
    CONSTRAINT PK_VENDEDOR_CLIENTE PRIMARY KEY(IdCliente,IdEmpleado),
    CONSTRAINT FK_VENDEDOR_CLIENTETOCLIENTE FOREIGN KEY(IdCliente) REFERENCES CLIENTE(IdCliente),
    CONSTRAINT FK_VENDEDOR_CLIENTETOEMPLEADO FOREIGN KEY(IdEmpleado) REFERENCES EMPLEADO(IdEmpleado)
);

CREATE TABLE USUARIO(
    IdUsuario INT AUTO_INCREMENT,
    Contrase√±a VARCHAR(100) NOT NULL,
    IdEmpleado INT NOT NULL,
    CONSTRAINT PK_USUARIO PRIMARY KEY(IdUsuario),
    CONSTRAINT FK_USUARIOTOEMPLEADO FOREIGN KEY(IdEmpleado) REFERENCES EMPLEADO(IdEmpleado) ON DELETE CASCADE
);

CREATE TABLE PESO(
    IdPeso INT AUTO_INCREMENT,
    PesoInicial DECIMAL(65,30) NOT NULL,
    PesoFinal DECIMAL(65,30) NOT NULL,
    PesoPromedio DECIMAL(65,30) NOT NULL,
    CONSTRAINT PK_PESO PRIMARY KEY(IdPeso)
);

CREATE TABLE SUBCATEGORIA(
    IdSubcategoria INT AUTO_INCREMENT,
    Subcategoria VARCHAR(100) NOT NULL,
    CostoBase DECIMAL(65,30),
    CONSTRAINT PK_SUBCATEGORIA PRIMARY KEY(IdSubcategoria)
);

CREATE TABLE CARGO(
    IdCargo INT AUTO_INCREMENT,
    Cargo DECIMAL(65,30) NOT NULL,
    IdTipo INT NOT NULL,
    CONSTRAINT PK_CARGO PRIMARY KEY(IdCargo),
    CONSTRAINT FK_CARGOTOTIPO FOREIGN KEY(IdTipo) REFERENCES TIPOPRODUCTO(IdTipoProdcuto)
);

CREATE TABLE PRODUCTO(
    IdProducto INT AUTO_INCREMENT,
    Descripcion VARCHAR(200) NOT NULL,
    IdCategoria INT NOT NULL,
    IdSubcategoria INT NOT NULL,
    IdPeso INT NOT NULL,
    CostoExtra DECIMAL(65,30),
    CONSTRAINT PK_PRODUCTO PRIMARY KEY(IdProducto),
    CONSTRAINT FK_PRODUCTOTOPESO FOREIGN KEY(IdPeso) REFERENCES PESO(IdPeso),
    CONSTRAINT FK_PRODUCTOTOCATEGORIA FOREIGN KEY(IdCategoria) REFERENCES CATEGORIAPRODUCTO(IdCategoria),
    CONSTRAINT FK_PRODUCTOTOSUBCATEGORIA FOREIGN KEY(IdSubcategoria) REFERENCES SUBCATEGORIA(IdSubcategoria)
);

CREATE TABLE INVENTARIO_SUCURSAL(
    IdInventario INT AUTO_INCREMENT,
    IdProducto INT NOT NULL,
    IdSucursal INT NOT NULL,
    Stock INT NOT NULL,
    CONSTRAINT PK_INVENTARIO_SUCURSAL PRIMARY KEY(IdInventario),
    CONSTRAINT FK_INVENTARIOTOPRODUCTO FOREIGN KEY(IdProducto) REFERENCES PRODUCTO(IdProducto),
    CONSTRAINT FK_INVENTARIOSUCURSAL FOREIGN KEY(IdSucursal) REFERENCES SUCURSAL(IdSucursal)
);

CREATE TABLE PEDIDO(
    IdPedido INT AUTO_INCREMENT,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IdEmpleado INT NOT NULL,
    IdCliente INT NOT NULL,
    RangoCliente INT NOT NULL,
    Estatus ENUM('Pendiente','Pagado', 'Enviado', 'Entregado', 'Cancelado'),
    Repartidor INT DEFAULT NULL,
    Receptor VARCHAR(100),
    MetodoPago ENUM('Contado', 'Transferencia', 'Credito'),
    CONSTRAINT PK_PEDIDO PRIMARY KEY(IdPedido),
    CONSTRAINT FK_PEDIDOTOEMPLEADO FOREIGN KEY(IdEmpleado) REFERENCES EMPLEADO(IdEmpleado),
    CONSTRAINT FK_PEDIDOTOCLIENTE FOREIGN KEY(IdCliente) REFERENCES CLIENTE(IdCliente),
    CONSTRAINT FK_PEDIDOREPARTIDORTOEMPLEADO FOREIGN KEY(Repartidor) REFERENCES EMPLEADO(IdEmpleado),
    CONSTRAINT FK_PEDIDOTORANGOCLIENTE FOREIGN KEY(RangoCliente) REFERENCES RANGOCLIENTE(IdRangoCliente)
);

CREATE TABLE PEDIDO_PRODUCTOS(
    IdPedido INT NOT NULL,
    IdProducto INT NOT NULL,
    CONSTRAINT PK_PEDIDO_PRODUCTOS PRIMARY KEY(IdPedido,IdProducto),
    CONSTRAINT FK_PEDIDO_PRODUCTOTOPEDIDO FOREIGN KEY(IdPedido) REFERENCES PEDIDO(IdPedido),
    CONSTRAINT FK_PEDIDO_PRODUCTOTOPRODUCTO FOREIGN KEY(IdProducto) REFERENCES PRODUCTO(IdProducto)
);

CREATE TABLE REGISTRO_PRODUCTO(
    IdRegistro INT AUTO_INCREMENT,
    IdProducto INT NOT NULL,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Accion VARCHAR(30) NOT NULL,
    Campo VARCHAR(30) NOT NULL,
    ValorAnterior VARCHAR(50) NOT NULL,
    ValorActual VARCHAR(50) NOT NULL,
    IdEmpleado INT NOT NULL,
    CONSTRAINT PK_REGISTRO_PRODUCTO PRIMARY KEY(IdRegistro),
    CONSTRAINT FK_REGISTRO_PRODTOPRODUCTO FOREIGN KEY(IdProducto) REFERENCES PRODUCTO(IdProducto),
    CONSTRAINT FK_REGISTRO_PROTOEMPLEADO FOREIGN KEY(IdEmpleado) REFERENCES EMPLEADO(IdEmpleado)
);

CREATE TABLE REGISTRO_PEDIDO(
    IdRegistro INT AUTO_INCREMENT,
    IdPedido INT NOT NULL,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Accion VARCHAR(30) NOT NULL,
    Campo VARCHAR(30) NOT NULL,
    ValorAnterior VARCHAR(50) NOT NULL,
    ValorActual VARCHAR(50) NOT NULL,
    IdEmpleado INT NOT NULL,
    CONSTRAINT PK_REGISTRO_PEDIDO PRIMARY KEY(IdRegistro),
    CONSTRAINT FK_REGISTRO_PEDIDOTOPEDIDO FOREIGN KEY(IdPedido) REFERENCES PEDIDO(IdPedido),
    CONSTRAINT FK_REGISTRO_PEDIDOTOEMPLEADO FOREIGN KEY(IdEmpleado) REFERENCES EMPLEADO(IdEmpleado)
);

CREATE TABLE REGISTRO_CLIENTE(
    IdRegistro INT AUTO_INCREMENT,
    IdCliente INT NOT NULL,
    Fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Accion VARCHAR(30) NOT NULL,
    Campo VARCHAR(30) NOT NULL,
    ValorAnterior VARCHAR(50) NOT NULL,
    ValorActual VARCHAR(50) NOT NULL,
    IdEmpleado INT NOT NULL,
    CONSTRAINT PK_REGISTRO_CLIENTE PRIMARY KEY(IdRegistro),
    CONSTRAINT FK_REGISTRO_CLIENTETOPEDIDO FOREIGN KEY(IdCliente) REFERENCES CLIENTE(IdCliente),
    CONSTRAINT FK_REGISTRO_CLIENTETOEMPLEADO FOREIGN KEY(IdEmpleado) REFERENCES EMPLEADO(IdEmpleado)
);

CREATE TABLE BITACORA(
    IdBitacora INT AUTO_INCREMENT,
    Usuario INT NOT NULL,
    Accion ENUM('INSERT', 'UPDATE', 'DELETE'),
    TablaAfectada VARCHAR(50),
    IdRegistro INT NOT NULL, -- REGISTRO AFECTADO
    Campo VARCHAR(50),
    ValorAnterior VARCHAR(300),
    ValorNuevo VARCHAR(300),
    Fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_BITACORA PRIMARY KEY(IdBitacora),
    CONSTRAINT FK_BITACORATOUSUARIO FOREIGN KEY(Usuario) REFERENCES USUARIO(IdUsuario)
);

ALTER TABLE USUARIO AUTO_INCREMENT = 1001;
SET time_zone = 'America/Mexico_City';

-- DIRECCIONES
DROP FUNCTION  IF EXISTS ObtenerDireccionBYCP;
CREATE FUNCTION ObtenerDireccionBYCP(ID INT)
RETURNS VARCHAR(100)
    DETERMINISTIC
    BEGIN
        DECLARE DIRECCION VARCHAR(100);
        SET DIRECCION = (SELECT CONCAT(E.Estado, ' ', M.Municipio, ' ', C2.Colonia, ' ', C.CodigoPostal) AS DIRECCION FROM ESTADO AS E INNER JOIN MUNICIPIO AS M ON E.IdEstado = M.IdEstado INNER JOIN CODIGOPOSTAL AS C ON M.IdMunicipio = C.IdMunicipio INNER JOIN COLONIA C2 on C.IdCodigoPostal = C2.IdCodigoPostal WHERE C.CodigoPostal = ID LIMIT 1);
        RETURN DIRECCION;
    end;

DROP FUNCTION IF EXISTS FN_OBTENERDIRECCION;
CREATE FUNCTION FN_OBTENERDIRECCION(IDDIR INT)
    RETURNS VARCHAR(100)
    DETERMINISTIC
    BEGIN
        DECLARE DIRECCION VARCHAR(100);
        DECLARE IDCOL INT;
        SET IDCOL = (SELECT IdColonia FROM DIRECCION WHERE IdDireccion = IDDIR LIMIT 1);
        SET DIRECCION = (SELECT CONCAT(D.Calle, ', ', C2.Colonia, ', ', C.CodigoPostal, ', ', M.Municipio, ', ', E.Estado, ', ', 'M√©xico') FROM DIRECCION AS D INNER JOIN CODIGOPOSTAL C on D.IdCodigoPostal = C.IdCodigoPostal INNER JOIN MUNICIPIO M on C.IdMunicipio = M.IdMunicipio INNER JOIN ESTADO E on M.IdEstado = E.IdEstado INNER JOIN COLONIA C2 on C.IdCodigoPostal = C2.IdCodigoPostal WHERE D.IdDireccion = IDDIR AND C2.IdColonia = IDCOL LIMIT 1);
        RETURN DIRECCION;
    end;


DROP PROCEDURE IF EXISTS SP_OBTENERCOLONIAS;
CREATE PROCEDURE SP_OBTENERCOLONIAS(IN COD VARCHAR(10))
    BEGIN
        SELECT M.Municipio FROM CODIGOPOSTAL AS C INNER JOIN MUNICIPIO M on C.IdMunicipio = M.IdMunicipio WHERE C.CodigoPostal = COD LIMIT 1;
        SELECT C2.Colonia, C2.IdColonia AS VALUE FROM CODIGOPOSTAL AS C INNER JOIN COLONIA AS C2 ON C.IdCodigoPostal = C2.IdCodigoPostal WHERE C.CodigoPostal = COD;
        SELECT E.Estado FROM CODIGOPOSTAL AS C INNER JOIN MUNICIPIO AS M ON C.IdMunicipio = M.IdMunicipio INNER JOIN ESTADO AS E ON M.IdEstado = E.IdEstado WHERE C.CodigoPostal = COD LIMIT 1;
    end;

DROP PROCEDURE IF EXISTS SP_REGISTRARDIRECCION;
CREATE PROCEDURE SP_REGISTRARDIRECCION(IN COD VARCHAR(10), IN COL INT, IN CALLEIN VARCHAR(75), IN USERIN INT, OUT IDDIRVAR INT)
    BEGIN
        DECLARE IDCODVAR INT;
        SET IDCODVAR = (SELECT IdCodigoPostal FROM CODIGOPOSTAL AS C WHERE CodigoPostal = COD LIMIT 1);
        INSERT INTO DIRECCION (IdCodigoPostal, IdColonia, Calle) VALUES (IDCODVAR, COL, CALLEIN);
        SET IDDIRVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'DIRECCION', IDDIRVAR, 'Todos','',(SELECT CONCAT(D.Calle, ', ', C.CodigoPostal, ', ', M.Municipio, ', ', E.Estado) FROM DIRECCION AS D INNER JOIN CODIGOPOSTAL AS C ON D.IdCodigoPostal = C.IdCodigoPostal INNER JOIN MUNICIPIO M on C.IdMunicipio = M.IdMunicipio INNER JOIN ESTADO E on M.IdEstado = E.IdEstado WHERE D.IdDireccion = IDDIRVAR LIMIT 1));
    end;

-- SUCURSALES

DROP PROCEDURE IF EXISTS SP_REGISTRARSUCURSAL;
CREATE PROCEDURE SP_REGISTRARSUCURSAL(IN COD VARCHAR(10), IN COL INT, IN CALLEIN VARCHAR(75), IN NOMBREIN VARCHAR(50), IN TELEFONOIN VARCHAR(12), IN USERIN INT)
    BEGIN
        DECLARE LASTIDSUC INT;
        DECLARE IDDIR INT;
        CALL SP_REGISTRARDIRECCION(COD, COL, CALLEIN, USERIN, IDDIR);
        INSERT INTO SUCURSAL (Nombre, IdDireccion, Telefono) VALUE (NOMBREIN, IDDIR, TELEFONOIN);
        SET LASTIDSUC = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'SUCURSAL', LASTIDSUC, 'Todos', '', (SELECT Nombre FROM SUCURSAL WHERE IdSucursal = LASTIDSUC));
        SELECT 1 AS RES;
    end;

DROP PROCEDURE IF EXISTS SP_GETSUCURSALES;
CREATE PROCEDURE SP_GETSUCURSALES()
    BEGIN
        SELECT S.IdSucursal, S.Nombre, (SELECT FN_OBTENERDIRECCION(S.IdDireccion)) AS Direccion, S.Telefono, S.FechaRegistro  FROM SUCURSAL AS S;
    end;

-- LOGIN
DROP PROCEDURE IF EXISTS LOGIN;
CREATE PROCEDURE LOGIN(IN ID INT, IN PASSWORD VARCHAR(50))
BEGIN
    DECLARE USERREGISTER INT;
    DECLARE PASST INT;
    DECLARE USERSTATUS INT;


    SET USERREGISTER = (SELECT IdUsuario FROM USUARIO WHERE IdUsuario = ID);
    IF USERREGISTER IS NULL THEN
        SELECT 0 AS RES; -- EL USUARIO NO EXISTE
    ELSE
        SET PASST = (SELECT IdUsuario FROM USUARIO WHERE IdUsuario = ID AND Contrase√±a = PASSWORD);
        IF PASST IS NULL THEN
            SELECT 1 AS RES; -- CONTRASE√ëA INCORRECTA
        ELSE
            SET USERSTATUS = (SELECT IdEstatus FROM EMPLEADO AS E INNER JOIN USUARIO AS U ON E.IdEmpleado = U.IdEmpleado WHERE U.IdUsuario = ID );
            IF USERSTATUS != 1 THEN
                SELECT 2 AS RES; -- EL ESTATUS NO ESTA ACTIVO
            ELSE
                SELECT U.IdUsuario, E.IdRol, E.IdEstatus, P.Nombre, P.ApellidoPaterno AS Apellido, E.IdSucursal AS Sucursal FROM USUARIO AS U INNER JOIN EMPLEADO AS E ON U.IdEmpleado = E.IdEmpleado INNER JOIN PERSONA AS P ON E.IdPersona = P.IdPersona WHERE IdUsuario = ID AND Contrase√±a = PASSWORD;
            end if;
        end if;
    end if;
END;

DROP PROCEDURE IF EXISTS LOGIN_ESTATUS; --   PARA QUE FUNCIONE CON EL HASH DE CONTRASE√ëAS
CREATE PROCEDURE LOGIN_ESTATUS(IN ID INT, IN OPT INT)
BEGIN
    DECLARE USERREGISTER INT;
    DECLARE USERSTATUS INT;

    IF OPT = 1 THEN
        SELECT Contrase√±a FROM USUARIO WHERE IdUsuario = ID;
    ELSE
        SET USERREGISTER = (SELECT IdUsuario FROM USUARIO WHERE IdUsuario = ID);
        IF USERREGISTER IS NULL THEN
            SELECT 0 AS RES; -- EL USUARIO NO EXISTE
        ELSE
            SET USERSTATUS = (SELECT IdEstatus FROM EMPLEADO AS E INNER JOIN USUARIO AS U ON E.IdEmpleado = U.IdEmpleado WHERE U.IdUsuario = ID );
            IF USERSTATUS != 1 THEN
                SELECT 1 AS RES; -- EL ESTATUS NO ESTA ACTIVO
            ELSE
                SELECT 2 AS RES; -- EL USUARIO EXISTE Y ESTA ACTIVO
            end if;
        end if;
    end if;
END;

DROP PROCEDURE IF EXISTS SP_GETUSERINFO;
CREATE PROCEDURE SP_GETUSERINFO(IN ID INT)
    BEGIN
        SELECT U.IdUsuario, E.IdRol, E.IdEstatus, P.Nombre, P.ApellidoPaterno AS Apellido, E.IdSucursal AS Sucursal FROM USUARIO AS U INNER JOIN EMPLEADO AS E ON U.IdEmpleado = E.IdEmpleado INNER JOIN PERSONA AS P ON E.IdPersona = P.IdPersona WHERE IdUsuario = ID;
    end;

-- Administrador/Empleados

DROP FUNCTION IF EXISTS FN_GETNAMEBYUSERID; -- FUNCION PARA OBTENER EL NOMBRE MEDIANTE EL USERID
CREATE FUNCTION FN_GETNAMEBYUSERID(USERID INT)
    RETURNS VARCHAR(100)
    DETERMINISTIC
    BEGIN
       DECLARE NOMBREUSER VARCHAR(100);
       SET NOMBREUSER = (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) FROM USUARIO AS U INNER JOIN EMPLEADO E on U.IdEmpleado = E.IdEmpleado INNER JOIN PERSONA P on E.IdPersona = P.IdPersona WHERE U.IdUsuario = USERID);
       RETURN NOMBREUSER;
    end;

DROP PROCEDURE IF EXISTS SP_REGISTRARPERSONA;
CREATE PROCEDURE SP_REGISTRARPERSONA(IN NOMBREIN VARCHAR(300), IN APELLIDOPAT VARCHAR(300), IN APELLIDOMAT VARCHAR(300), IN TELEFONOIN VARCHAR(300), IN EDADIN VARCHAR(3), IN USERIN INT, OUT LASTIDPER INT)
    BEGIN
        INSERT INTO PERSONA (Nombre, ApellidoPaterno, ApellidoMaterno, Telefono, Edad) VALUES (NOMBREIN, APELLIDOPAT, APELLIDOMAT, TELEFONOIN, EDADIN);
        SET LASTIDPER = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'PERSONA', LASTIDPER, 'Todos', '', (SELECT CONCAT(Nombre, ' ', ApellidoPaterno) FROM PERSONA WHERE IdPersona = LASTIDPER));
    end;

DROP PROCEDURE IF EXISTS SP_REGISTRAREMPLEADO;
CREATE PROCEDURE SP_REGISTRAREMPLEADO(IN CONTRASE√ëAIN VARCHAR(100), IN NOMBREIN VARCHAR(300), IN APELLIDOPAT VARCHAR(300), IN APELLIDOMAT VARCHAR(300), IN TELEFONOIN VARCHAR(300), IN EDADIN VARCHAR(3), IN IDROLIN INT, IN IDEST INT, IN IDSUC INT, IN USERIN INT)
    BEGIN
        DECLARE  IdEMPVAR INT;
        DECLARE IDPERVAR INT;

        CALL SP_REGISTRARPERSONA(NOMBREIN, APELLIDOPAT, APELLIDOMAT, TELEFONOIN, EDADIN, USERIN, IDPERVAR);
        INSERT INTO EMPLEADO (IdPersona, IdRol, IdEstatus, IdSucursal) VALUES (IDPERVAR, IDROLIN, IDEST, IDSUC);
        SET IdEMPVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'EMPLEADO', IdEMPVAR, 'Todos', '', (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) FROM EMPLEADO AS E INNER JOIN PERSONA P on E.IdPersona = P.IdPersona WHERE E.IdEmpleado = IdEMPVAR));
        INSERT INTO USUARIO (Contrase√±a, IdEmpleado) VALUES (CONTRASE√ëAIN, IdEMPVAR);
        SET IdEMPVAR = (SELECT LAST_INSERT_ID());
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'USUARIO', IdEMPVAR, 'Todos', '', (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) FROM EMPLEADO AS E INNER JOIN PERSONA P on E.IdPersona = P.IdPersona INNER JOIN USUARIO U on E.IdEmpleado = U.IdEmpleado WHERE U.IdUsuario = IdEMPVAR));
    end;

DROP PROCEDURE IF EXISTS SP_GETEMPLEADOS;
CREATE PROCEDURE SP_GETEMPLEADOS(IN IDEMP INT, IN SUCURSALIN INT)
    BEGIN
        SELECT U.IdUsuario AS ID, E.IdEmpleado AS IdEmp, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Nombre, P.Telefono, P.Edad, R.Rol, S.Nombre AS Sucursal, E2.Estatus FROM EMPLEADO AS E INNER JOIN PERSONA P on E.IdPersona = P.IdPersona INNER JOIN ROL R on E.IdRol = R.IdRol INNER JOIN SUCURSAL S on E.IdSucursal = S.IdSucursal INNER JOIN ESTATUS E2 on E.IdEstatus = E2.IdEstatus INNER JOIN USUARIO U on E.IdEmpleado = U.IdEmpleado WHERE E2.IdEstatus != 4 AND U.IdUsuario != IDEMP AND E.IdSucursal = SUCURSALIN ORDER BY U.IdUsuario;
    end;

DROP PROCEDURE IF EXISTS SP_DELETEEMPLEADO;
CREATE PROCEDURE SP_DELETEEMPLEADO(IN ID INT, IN USERID INT)
    BEGIN
        DECLARE NOMBREVAR VARCHAR(100);
        SET NOMBREVAR = (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) FROM USUARIO AS U INNER JOIN  EMPLEADO E2 on U.IdEmpleado = E2.IdEmpleado INNER JOIN PERSONA P on E2.IdPersona = P.IdPersona WHERE E2.IdEmpleado = ID);
        UPDATE EMPLEADO SET IdEstatus = 4 WHERE IdEmpleado = ID;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'DELETE', 'EMPLEADO', ID, 'Todos', NOMBREVAR, '');
    end;

DROP PROCEDURE IF EXISTS SP_GETNOMBRESUCURSALES;
CREATE  PROCEDURE SP_GETSUCURSALESNOMBRES()
    BEGIN
        SELECT Nombre AS Nombre, IdSucursal AS Id FROM SUCURSAL;
    end;

DROP PROCEDURE IF EXISTS SP_GETEMPLEADO;
CREATE PROCEDURE SP_GETEMPLEADO(IN IDIN INT)
    BEGIN
        SELECT P.Nombre, P.ApellidoPaterno, P.ApellidoMaterno, P.Edad, P.Telefono, E.IdSucursal AS Sucursal, S.Nombre AS NombreSucursal, E.IdRol AS 'Rol', R.Rol AS NombreRol, E.IdEstatus AS 'Estatus' FROM PERSONA AS P INNER JOIN EMPLEADO AS E ON P.IdPersona = E.IdPersona INNER JOIN SUCURSAL S on E.IdSucursal = S.IdSucursal INNER JOIN ROL R on E.IdRol = R.IdRol WHERE E.IdEmpleado = IDIN;
    end;

DROP PROCEDURE IF EXISTS SP_REGISTRARACTUZALICACION;
CREATE PROCEDURE SP_REGISTRARACTUZALICACION(IN USERIN INT, IN TABLAAFECT VARCHAR(50), IN IDREGISTROVAR INT, IN CAMPOIN VARCHAR(100), IN VALORANTERIORIN VARCHAR(100), VALORNUEVOIN VARCHAR(100))
    BEGIN
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'UPDATE', TABLAAFECT, IDREGISTROVAR, CAMPOIN, VALORANTERIORIN, VALORNUEVOIN);
    end;

DROP PROCEDURE IF EXISTS SP_UPDATEEMPLEADO;
CREATE PROCEDURE SP_UPDATEEMPLEADO(IN EMPLEADOIN INT, IN NOMBREIN VARCHAR(50), IN APELLIDOPAT VARCHAR(50), IN APELLIDOMAT VARCHAR(50), IN EDADIN VARCHAR(3), IN TELEFONOIN VARCHAR(10), IN SUCURSALIN INT, IN ROLIN INT, IN ESTATUSIN INT)
    BEGIN
        DECLARE IDPERSONAVAR INT;
        SET IDPERSONAVAR = (SELECT P.IdPersona FROM PERSONA AS P INNER JOIN EMPLEADO E on P.IdPersona = E.IdPersona WHERE E.IdEmpleado = EMPLEADOIN);

        IF IDPERSONAVAR IS NULL THEN
            SELECT 2 AS RES;
        ELSE
            SELECT 1 AS RES;
        end if;

        UPDATE PERSONA SET Nombre = NOMBREIN, ApellidoPaterno = APELLIDOPAT, ApellidoMaterno = APELLIDOMAT, Edad = EDADIN, Telefono = TELEFONOIN WHERE IdPersona = IDPERSONAVAR;
        UPDATE EMPLEADO SET IdSucursal = SUCURSALIN, IdEstatus = ESTATUSIN, IdRol = ROLIN WHERE IdEmpleado = EMPLEADOIN;
    end;

DROP PROCEDURE IF EXISTS SP_FINDEMPLEADO;
CREATE PROCEDURE SP_FINDEMPLEADO(IN NOMBREIN VARCHAR(100))
    BEGIN
        SELECT U.IdUsuario AS ID, E.IdEmpleado AS IdEmp, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Nombre, P.Telefono, P.Edad, R.Rol, S.Nombre AS Sucursal, E2.Estatus FROM EMPLEADO AS E INNER JOIN PERSONA P on E.IdPersona = P.IdPersona INNER JOIN ROL R on E.IdRol = R.IdRol INNER JOIN SUCURSAL S on E.IdSucursal = S.IdSucursal INNER JOIN ESTATUS E2 on E.IdEstatus = E2.IdEstatus INNER JOIN USUARIO U on E.IdEmpleado = U.IdEmpleado WHERE E2.IdEstatus != 4 AND CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN, '%') ORDER BY U.IdUsuario;
    end;

DROP PROCEDURE IF EXISTS SP_GETCLIENTESVENDEDOR;
CREATE PROCEDURE SP_GETCLIENTESVENDEDOR(IN IDDEMP INT, IN NOMBREIN VARCHAR(100))
    BEGIN
        SELECT C.IdCliente, E.IdEmpleado, P.Telefono AS TelefonoCliente, R.Rango AS RangoCliente, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS NombreCliente, (SELECT FN_OBTENERDIRECCION(C.IdDireccion)) AS DireccionCliente,(SELECT FN_GETNAMEBYUSERID(U.IdUsuario)) AS NombreEmpleado FROM VENDEDOR_CLIENTE AS RC RIGHT JOIN CLIENTE AS C ON RC.IdCliente = C.IdCliente LEFT JOIN EMPLEADO AS E ON RC.IdEmpleado = E.IdEmpleado INNER JOIN PERSONA P on C.IdPersona = P.IdPersona INNER JOIN RANGOCLIENTE R on C.IdRangoCliente = R.IdRangoCliente LEFT JOIN USUARIO U on E.IdEmpleado = U.IdEmpleado WHERE C.Estatus = 1 AND RC.IdEmpleado = IDDEMP AND CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN,'%');
        SELECT C.IdCliente, E.IdEmpleado, P.Telefono AS TelefonoCliente, R.Rango AS RangoCliente, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS NombreCliente, (SELECT FN_OBTENERDIRECCION(C.IdDireccion)) AS DireccionCliente,(SELECT FN_GETNAMEBYUSERID(U.IdUsuario)) AS NombreEmpleado FROM VENDEDOR_CLIENTE AS RC RIGHT JOIN CLIENTE AS C ON RC.IdCliente = C.IdCliente LEFT JOIN EMPLEADO AS E ON RC.IdEmpleado = E.IdEmpleado INNER JOIN PERSONA P on C.IdPersona = P.IdPersona INNER JOIN RANGOCLIENTE R on C.IdRangoCliente = R.IdRangoCliente LEFT JOIN USUARIO U on E.IdEmpleado = U.IdEmpleado WHERE CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN,'%') AND C.Estatus = 1 AND (RC.IdEmpleado != IDDEMP OR RC.IdEmpleado IS NULL);
    end;

DROP PROCEDURE IF EXISTS SP_GETINFOVENDEDOR;
CREATE PROCEDURE SP_GETINFOVENDEDOR(IN IDEMP INT)
    BEGIN
        SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) AS NombreEmpleado, S.Nombre AS Sucursal FROM EMPLEADO AS E INNER JOIN PERSONA AS P ON E.IdPersona = P.IdPersona INNER JOIN SUCURSAL AS S ON E.IdSucursal = S.IdSucursal WHERE E.IdEmpleado = IDEMP AND E.IdRol = 1;
    end;

DROP PROCEDURE IF EXISTS SP_UPDATECLIENTEVENDEDOR;
CREATE PROCEDURE SP_UPDATECLIENTEVENDEDOR(IN IDCLIENTEIN INT, IN IDEMP INT, IN USERID INT, IN METODO INT)
    BEGIN
        DECLARE VALORANTERIORVAR VARCHAR(100);
        DECLARE VALORACTUALVAR VARCHAR(100);
        SET VALORANTERIORVAR = (SELECT CONCAT(P2.Nombre, ' ', P2.ApellidoPaterno) FROM VENDEDOR_CLIENTE AS RC INNER JOIN EMPLEADO E2 on RC.IdEmpleado = E2.IdEmpleado INNER JOIN PERSONA P2 on E2.IdPersona = P2.IdPersona WHERE RC.IdCliente = IDCLIENTEIN);
        IF METODO = 1 THEN
            IF VALORANTERIORVAR IS NULL THEN
                SET VALORANTERIORVAR = 'Sin Vendedor Asignado';
            end if;
            SET VALORACTUALVAR = (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) FROM EMPLEADO AS E INNER JOIN PERSONA AS P on E.IdPersona = P.IdPersona WHERE E.IdEmpleado = IDEMP);

            DELETE FROM VENDEDOR_CLIENTE WHERE IdCliente = IDCLIENTEIN;

            INSERT INTO VENDEDOR_CLIENTE (IdCliente, IdEmpleado) VALUES (IDCLIENTEIN, IDEMP);
        ELSE
            SET VALORACTUALVAR = 'Sin Vendedor Asignado';
            DELETE FROM VENDEDOR_CLIENTE WHERE IdCliente = IDCLIENTEIN;
        end if;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'UPDATE','CLIENTE', IDCLIENTEIN, 'Vendedor', VALORANTERIORVAR, VALORACTUALVAR);
    end;


-- ADMINISTRADOR/CLIENTES

DROP PROCEDURE IF EXISTS SP_ADDCLIENTE;
CREATE PROCEDURE SP_ADDCLIENTE(IN COD VARCHAR(10), IN COL INT, IN CALLEIN VARCHAR(75), IN NOMBREIN VARCHAR(300), IN APELLIDOPAT VARCHAR(300), IN APELLIDOMAT VARCHAR(300), IN TELEFONOIN VARCHAR(300), IN EDADIN VARCHAR(3), IN RANGOIN INT, IN CREDITOMAX INT, IN VENDEDORIN INT, IN USERIN INT)
    BEGIN
        DECLARE IDDIR INT;
        DECLARE IDPERVAR INT;
        DECLARE CLIENTEVAR INT;
        CALL SP_REGISTRARDIRECCION(COD, COL, CALLEIN, USERIN, IDDIR);
        CALL SP_REGISTRARPERSONA(NOMBREIN, APELLIDOPAT, APELLIDOMAT, TELEFONOIN, EDADIN, USERIN, IDPERVAR);
        INSERT INTO CLIENTE (IdPersona, IdDireccion, IdRangoCliente, CreditoMaximo) VALUES (IDPERVAR, IDDIR, RANGOIN, CREDITOMAX);
        SET CLIENTEVAR = (SELECT LAST_INSERT_ID());
        IF VENDEDORIN != 0 THEN
            INSERT INTO VENDEDOR_CLIENTE (IdCliente, IdEmpleado) VALUES (CLIENTEVAR, VENDEDORIN);
        end if;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'CLIENTE', CLIENTEVAR, 'Todos', '', (SELECT CONCAT(Nombre, ' ', ApellidoPaterno) FROM PERSONA WHERE IdPersona = IDPERVAR));
    end;

DROP PROCEDURE IF EXISTS SP_GETCLIENTES;
CREATE PROCEDURE SP_GETCLIENTES()
    BEGIN
        SELECT C.IdCliente AS Id, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Nombre, P.Telefono, (SELECT FN_OBTENERDIRECCION(C.IdDireccion)) AS Direccion, P.Edad, R.Rango, FORMAT(C.Credito,2) AS Credito, FORMAT(C.CreditoMaximo,2) AS CreditoMaximo, (SELECT FN_GETNAMEBYUSERID(U.IdUsuario)) AS Vendedor, C.Fecha FROM CLIENTE AS C INNER JOIN PERSONA AS P ON C.IdPersona = P.IdPersona INNER JOIN RANGOCLIENTE AS R ON C.IdRangoCliente = R.IdRangoCliente LEFT JOIN VENDEDOR_CLIENTE VC on C.IdCliente = VC.IdCliente LEFT JOIN USUARIO U on VC.IdEmpleado = U.IdEmpleado WHERE C.Estatus = 1 ORDER BY C.IdCliente;
    end;

DROP PROCEDURE IF EXISTS SP_GETVENDEDORES;
CREATE PROCEDURE SP_GETVENDEDORES()
    BEGIN
        SELECT E.IdEmpleado, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Nombre FROM EMPLEADO AS E INNER JOIN PERSONA AS P ON E.IdPersona = P.IdPersona WHERE E.IdRol = 1 AND E.IdEstatus = 1;
    end;

DROP PROCEDURE IF EXISTS SP_FINDCLIENTE;
CREATE PROCEDURE SP_FINDCLIENTE(IN NOMBREIN VARCHAR(70))
    BEGIN
        SELECT C.IdCliente AS Id, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS Nombre, P.Telefono, (SELECT FN_OBTENERDIRECCION(C.IdDireccion)) AS Direccion, P.Edad, R.Rango, FORMAT(C.Credito,2) AS Credito, FORMAT(C.CreditoMaximo,2) AS CreditoMaximo, C.Fecha FROM CLIENTE AS C INNER JOIN PERSONA AS P ON C.IdPersona = P.IdPersona INNER JOIN RANGOCLIENTE AS R ON C.IdRangoCliente = R.IdRangoCliente WHERE CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN, '%') AND C.Estatus = 1;
    end;

DROP PROCEDURE IF EXISTS SP_DELETECLIENTE;
CREATE PROCEDURE SP_DELETECLIENTE(IN ID INT, IN USERID INT)
    BEGIN
        DECLARE NOMBREVAR VARCHAR(100);
        SET NOMBREVAR = (SELECT CONCAT(P.Nombre, ' ', P.ApellidoPaterno) FROM CLIENTE AS C INNER JOIN PERSONA P on C.IdPersona = P.IdPersona WHERE C.IdCliente = ID);
        UPDATE CLIENTE SET Estatus = 4 WHERE IdCliente = ID;
        INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERID, 'DELETE', 'CLIENTE', ID, 'Todos', NOMBREVAR, '');
    end;

DROP PROCEDURE IF EXISTS SP_GETCLIENTEBYID;
CREATE PROCEDURE SP_GETCLIENTEBYID(IN IDCLIENTEIN INT)
    BEGIN
        SELECT P.Nombre, P.ApellidoPaterno, P.ApellidoMaterno, P.Telefono, VC.IdEmpleado AS Vendedor, (SELECT FN_GETNAMEBYUSERID(U.IdUsuario)) AS NombreVendedor, C2.CodigoPostal AS Codigo, D.IdColonia AS Colonia, C3.Colonia AS NombreColonia, D.Calle, P.Edad, R.IdRangoCliente AS Rango, R.Rango AS NombreRango, C.CreditoMaximo FROM CLIENTE AS C INNER JOIN PERSONA AS P ON C.IdPersona = P.IdPersona INNER JOIN RANGOCLIENTE AS R ON C.IdRangoCliente = R.IdRangoCliente INNER JOIN DIRECCION D on C.IdDireccion = D.IdDireccion INNER JOIN CODIGOPOSTAL C2 on D.IdCodigoPostal = C2.IdCodigoPostal INNER JOIN COLONIA C3 on C2.IdCodigoPostal = C3.IdCodigoPostal LEFT JOIN VENDEDOR_CLIENTE VC on C.IdCliente = VC.IdCliente LEFT JOIN USUARIO U on VC.IdEmpleado = U.IdEmpleado WHERE C.Estatus = 1 AND C.IdCliente = IDCLIENTEIN;
    end;

DROP PROCEDURE IF EXISTS SP_UPDATECLIENTE;
CREATE PROCEDURE SP_UPDATECLIENTE(IN CLIENTEIN INT, IN NOMBREIN VARCHAR(50), IN APELLIDOPAT VARCHAR(50), IN APELLIDOMAT VARCHAR(50), IN EDADIN VARCHAR(3), IN TELEFONOIN VARCHAR(10), IN CODIGOIN INT, IN CALLEIN VARCHAR(100), IN COLONIAIN INT, IN RANGOIN INT, CREDITOMAXIMOIN DECIMAL(10,2), IN VENDEDORIN INT)
    BEGIN
        DECLARE IDPERSONAVAR INT;
        DECLARE IDDIRECCIONVAR INT;
        SET IDDIRECCIONVAR = (SELECT D.IdDireccion FROM DIRECCION AS D INNER JOIN CLIENTE C2 on D.IdDireccion = C2.IdDireccion WHERE C2.IdCliente = CLIENTEIN LIMIT 1);
        SET IDPERSONAVAR = (SELECT P.IdPersona FROM PERSONA AS P INNER JOIN CLIENTE C on P.IdPersona = C.IdPersona WHERE C.IdCliente = CLIENTEIN LIMIT 1);

        IF IDPERSONAVAR IS NULL THEN
            SELECT 2 AS RES;
        ELSE
            SELECT 1 AS RES;
        end if;

        DELETE FROM VENDEDOR_CLIENTE WHERE IdCliente = CLIENTEIN;

        IF VENDEDORIN != 0 THEN
            INSERT INTO VENDEDOR_CLIENTE (IdCliente, IdEmpleado) VALUES (CLIENTEIN, VENDEDORIN);
        end if;

        UPDATE PERSONA SET Nombre = NOMBREIN, ApellidoPaterno = APELLIDOPAT, ApellidoMaterno = APELLIDOMAT, Edad = EDADIN, Telefono = TELEFONOIN WHERE IdPersona = IDPERSONAVAR;
        UPDATE DIRECCION SET IdCodigoPostal = (SELECT C.IdCodigoPostal FROM CODIGOPOSTAL AS C WHERE C.CodigoPostal = CODIGOIN LIMIT 1), IdColonia = COLONIAIN, Calle = CALLEIN WHERE IdDireccion = IDDIRECCIONVAR;
        UPDATE CLIENTE SET IdRangoCliente = RANGOIN, CreditoMaximo = CREDITOMAXIMOIN WHERE IdCliente = CLIENTEIN;
    end;

-- REGISTROS

DROP PROCEDURE IF EXISTS SP_GETREGISTROS;
CREATE PROCEDURE SP_GETREGISTROS(IN TABLAIN VARCHAR(50), IN NOMBREIN VARCHAR(150))
    BEGIN
        IF TABLAIN = 'CLIENTE' THEN
            SELECT B.IdBitacora, B.Accion ,(SELECT FN_GETNAMEBYUSERID(B.Usuario)) AS Usuario, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS RegistroAfectado, B.Campo, B.ValorAnterior, B.ValorNuevo, B.Fecha  FROM BITACORA AS B INNER JOIN CLIENTE C on B.IdRegistro = C.IdCliente INNER JOIN PERSONA P on C.IdPersona = P.IdPersona WHERE B.TablaAfectada = 'CLIENTE' AND CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN,'%') ORDER BY B.IdBitacora;
        end if;
        IF TABLAIN = 'EMPLEADO' THEN
            SELECT B.IdBitacora, B.Accion ,(SELECT FN_GETNAMEBYUSERID(B.Usuario)) AS Usuario, CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) AS RegistroAfectado, B.Campo, B.ValorAnterior, B.ValorNuevo, B.Fecha  FROM BITACORA AS B INNER JOIN EMPLEADO E on B.IdRegistro = E.IdEmpleado INNER JOIN PERSONA P on E.IdPersona = P.IdPersona WHERE B.TablaAfectada = 'EMPLEADO' AND CONCAT(P.Nombre, ' ', P.ApellidoPaterno, ' ', P.ApellidoMaterno) LIKE CONCAT(NOMBREIN,'%') ORDER BY B.IdBitacora;
        end if;
    end;

-- PRODUCTOS

DROP PROCEDURE IF EXISTS SP_INSERTARPRODUCTO;
CREATE PROCEDURE SP_INSERTARPRODUCTO(IN NOMBREIN VARCHAR(200), IN CATEGORIAIN INT, IN PESOINICIALIN DECIMAL(65,30), IN PESOFINALIN DECIMAL(65,30), IN SUBCATEGORIAIN INT, IN COSTOEXTRAIN DECIMAL(65,30), IN USERIN INT)
BEGIN
    DECLARE DESCRIPCIONVAR VARCHAR(300);
    DECLARE PESOVAR INT;
    DECLARE PRODUCTOVAR INT;
    SET DESCRIPCIONVAR = (SELECT CONCAT(C.Categoria, ' ', NOMBREIN) FROM CATEGORIAPRODUCTO AS C WHERE C.IdCategoria = CATEGORIAIN LIMIT 1);
    INSERT INTO PESO (PesoInicial, PesoFinal, PesoPromedio) VALUES (PESOINICIALIN, PESOFINALIN, ((PESOINICIALIN+PESOFINALIN)/2));
    SET PESOVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO PRODUCTO (Descripcion, IdCategoria, IdSubcategoria, IdPeso, CostoExtra) VALUES (DESCRIPCIONVAR, CATEGORIAIN, SUBCATEGORIAIN,PESOVAR, COSTOEXTRAIN);
    SET PRODUCTOVAR = (SELECT LAST_INSERT_ID());
    INSERT INTO BITACORA (Usuario, Accion, TablaAfectada, IdRegistro, Campo, ValorAnterior, ValorNuevo) VALUES (USERIN, 'INSERT', 'PRODUCTO', PRODUCTOVAR,'Todos', '', DESCRIPCIONVAR);
end;

CALL SP_INSERTARPRODUCTO('3x6', 1, 12.6, 11.9, 1, 0,1001);

--

SELECT * FROM PRODUCTO;
SELECT * FROM PESO;
SELECT * FROM SUBCATEGORIA;
SELECT * FROM BITACORA WHERE TablaAfectada = 'PRODUCTO';
--

select * from BITACORA WHERE TablaAfectada = 'SUCURSAL';

CALL SP_GETREGISTROS('CLIENTE','');

CALL LOGIN(1001, '123456');

SELECT * FROM USUARIO;


SELECT ObtenerDireccionBYCP(38940);

SELECT CONCAT(E.Estado, ' ', M.Municipio, ' ', C2.Colonia, ' ', C.CodigoPostal) AS DIRECCION FROM ESTADO AS E INNER JOIN MUNICIPIO AS M ON E.IdEstado = M.IdEstado INNER JOIN CODIGOPOSTAL AS C ON M.IdMunicipio = C.IdMunicipio INNER JOIN COLONIA C2 on C.IdCodigoPostal = C2.IdCodigoPostal WHERE C.CodigoPostal = 29000;

SELECT CONCAT(E.IdEstado, ' ', M.IdMunicipio, ' ', C2.Colonia, ' ', C.CodigoPostal) AS DIRECCION FROM ESTADO AS E INNER JOIN MUNICIPIO AS M ON E.IdEstado = M.IdEstado INNER JOIN CODIGOPOSTAL AS C ON M.IdMunicipio = C.IdMunicipio INNER JOIN COLONIA C2 on C.IdCodigoPostal = C2.IdCodigoPostal WHERE C.CodigoPostal = 29000;

CALL SP_OBTENERCOLONIAS('38800');

select * from ESTATUS;

-- DATOS INICIALES

INSERT INTO DIRECCION (IdCodigoPostal, IdColonia, Calle) SELECT IdCodigoPostal, 72856, 'Victoria 54' FROM CODIGOPOSTAL WHERE CodigoPostal = '38800' LIMIT 1;
INSERT INTO SUCURSAL (Nombre, IdDireccion, Telefono) VALUE ('Sucursal Morole√≥n', (SELECT LAST_INSERT_ID()), '4456439861');
INSERT INTO DIRECCION (IdCodigoPostal, IdColonia, Calle) SELECT IdCodigoPostal, 119795, 'Allende 32' FROM CODIGOPOSTAL WHERE CodigoPostal = '58000' LIMIT 1;
INSERT INTO SUCURSAL (Nombre, IdDireccion, Telefono) VALUE ('Sucursal Morelia', (SELECT LAST_INSERT_ID()), '4437812064');

INSERT INTO ROL (Rol) VALUE ('Vendedor');
INSERT INTO ROL (Rol) VALUE ('Cajero');
INSERT INTO ROL (Rol) VALUE ('Administrador');

INSERT INTO ESTATUS (ESTATUS) VALUES ('Activo');
INSERT INTO ESTATUS (ESTATUS) VALUES ('Despedido');
INSERT INTO ESTATUS (ESTATUS) VALUES ('Suspendido');
INSERT INTO ESTATUS (ESTATUS) VALUES ('Eliminado');

INSERT INTO PERSONA (Nombre, ApellidoPaterno, ApellidoMaterno, Telefono, Edad) VALUES ('Pedro', 'Villa', 'Almanza', '4457963475', '45');
INSERT INTO EMPLEADO (IdPersona, IdRol, IdEstatus, IdSucursal) VALUES ((SELECT LAST_INSERT_ID()), 3, 1, 1);
INSERT INTO USUARIO (Contrase√±a, IdEmpleado) VALUES ('$2b$10$VuHF8B70UNBN.MmD6vS20eigaxYkUjkCi.mcxtRVJqQwpnDkua2jq', 1);

INSERT INTO RANGOCLIENTE (Rango) VALUES ('P√∫blico 1');
INSERT INTO RANGOCLIENTE (Rango) VALUES ('Herrero 2');
INSERT INTO RANGOCLIENTE (Rango) VALUES ('Herrero 3');
INSERT INTO RANGOCLIENTE (Rango) VALUES ('Herrero 4');
INSERT INTO RANGOCLIENTE (Rango) VALUES ('Mayoreo 1');
INSERT INTO RANGOCLIENTE (Rango) VALUES ('Mayoreo 2');

INSERT INTO TIPOPRODUCTO (Tipo) VALUES ('Tubular, PTR');
INSERT INTO TIPOPRODUCTO (Tipo) VALUES ('Solidos');

INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Mont√©n');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'PTR');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubo C√©dula 30');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubo C√©dula 40');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubo Galvanizado');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubular');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'T. Industrial');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Moflero');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tableros');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubo C√©dula 20');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (1, 'Tubular Zintro');

INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, '√Ångulo');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, '√Ångulo Ligero');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, 'Cuadrado');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, 'Redondo');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, 'Torcido');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, 'Solera');
INSERT INTO CATEGORIAPRODUCTO (IdTipo, Categoria) VALUES (2, 'TEE');

INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Tubular C18 y C20', 33);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Mont√©n C14', 30);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('PTR y Tubo Negro C30', 30);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Tubular C 050', 37.5);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Tubular Galvanizado  C18', 38);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('PTR Galvanizado C14', 37.5);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Tubular 3 mt', 42);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Tubo 1/2 Negro Ced 30', 42);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Tubo Industrial 1/2 y 5/8', 37.5);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Tubo Galvanizado', 38);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('PTR C16', 30.5);

INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Angulo 3/4', 23.70);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Angulo 109', 22.70);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Angulo 1-2 1/2', 22.70);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Angulo 3, 3 1/2, 4', 24);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Redondo 5/16 y 3/16', 23.30);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Redondo 1/4', 23.30);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Cuadrados 1/2 y 12mm Tipo 1', 21.50);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Redondo 1" y 1-1/4', 22.50);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Redondo 1/2, 5/8, 3/4', 21.50);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Redondo 3/8', 22.40);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Solera 1/2 X 1/8, 3/16 Placa', 26.40);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Solera 1/2 X 1/4 Placa', 27.90);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Solera 3/4 todos los calibres Placa', 25.90);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Solera 1" a 1-1/2x1/8 Placa', 25.90);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Solera 1-1/2, 2 Comercial', 23.50);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Solera 1-1/4 y 1 x 3/16', 23.50);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Solera 1-1/4 y 1 x 3/8 Comercial', 24.50);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Tee', 27);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Torcido', 23);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Damas Cuadrados', 22.50);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Viga IPS 4+', 24);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Canal C 4 +', 24.50);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Solera Placa 2-1/2 en adelante', 25.90);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Viga IPR', 23.50);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Viga IPS 3"', 27.30);
INSERT INTO SUBCATEGORIA (Subcategoria, CostoBase) VALUES ('Canal C 3"', 26.30);

CALL SP_INSERTARPRODUCTO('3x6 C-16', 1, 12.6, 12.6, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('4x6 C-16', 1, 16.7, 16.7, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('3x6', 1, 15.23, 15.23, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4x4', 1, 13.1, 13.1, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4x5', 1, 16.56, 16.56, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4x6', 1, 19.85, 19.85, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('5x5', 1, 17.85, 17.85, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('5x6', 1, 21.25, 21.25, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('6x6', 1, 24.4375, 24.4375, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('8x6', 1, 33.03, 33.03, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('8x8', 1, 43.59, 43.59, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('10x10', 1, 61.31, 61.31, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4', 2, 6.29, 6.29, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 C13', 2, 10.5, 10.5, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 C14', 2, 8.82, 8.82, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 C16', 2, 7.09, 7.09, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4 C13', 2, 12.9, 12.9, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4 C14', 2, 10.61, 10.61, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4 C16', 2, 8.83, 8.83, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2 C12', 2, 18.12, 18.12, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2 C14', 2, 12.9, 12.9, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2 C16', 2, 10.83, 10.83, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('2 C12', 2, 24.075, 24.075, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('2 C14', 2, 17.95, 17.95, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('2" C16', 2, 14.8, 14.8, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('2X1 C14', 2, 12.63, 12.63, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('2 x 1" C16', 2, 10.68, 10.68, 11, 0,1001);
CALL SP_INSERTARPRODUCTO('2 1/2 C11', 2, 32.6, 32.6, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('2 1/2 C14', 2, 21.45, 21.45, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 1-1/2 C-14', 2, 17.45, 17.45, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 C8', 2, 53.2, 53.2, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 C11', 2, 41.09, 41.09, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 C14', 2, 26.8285, 26.8285, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 1/2 C10', 2, 60.2, 60.2, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 1/2 C11', 2, 47.2, 47.2, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 X 1 1/2 C14', 2, 20.16, 20.16, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3X2 C11', 2, 34.56, 34.56, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('3 x 2 C-14', 2, 20.9, 20.9, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4 C11', 2, 57.73, 57.73, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4 C14', 2, 35.25, 35.25, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4x11/2 C-14', 2, 24.2, 24.2, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4 x 2 C-11', 2, 40.0666, 40.0666, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('4 X 2 C14', 2, 25.56, 25.56, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('6 x 2 C-14', 2, 36.35, 36.35, 2, 0,1001);
CALL SP_INSERTARPRODUCTO('PTR galv 1 1/2', 2, 12.85, 12.85, 6, 0,1001);
CALL SP_INSERTARPRODUCTO('PTR galv 1 3/4', 2, 14.5333, 14.5333, 6, 0,1001);
CALL SP_INSERTARPRODUCTO('PTR galv 2', 2, 17.6, 17.6, 6, 0,1001);
CALL SP_INSERTARPRODUCTO('1/2', 3, 5.48, 5.48, 8, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4', 3, 7.0, 7.0, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('1', 3, 8.73, 8.73, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4', 3, 14.0, 14.0, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2', 3, 15.8, 15.8, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('2', 3, 22.2702, 22.2702, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('2 1/2', 3, 31.7333, 31.7333, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('3', 3, 39.94, 39.94, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('4', 3, 50.2, 50.2, 3, 0,1001);
CALL SP_INSERTARPRODUCTO('1.0', 4.0, 16.4, 16.4, 3.0, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3.0', 4.0, 78.8, 78.8, 3.0, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 3/8', 5, 4.4, 4.4, 10, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2', 5, 5.2, 5.2, 10, 0,1001);
CALL SP_INSERTARPRODUCTO('2', 5, 8.7, 8.7, 10, 0,1001);
CALL SP_INSERTARPRODUCTO('101', 6, 7.05, 7.05, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('103', 6, 8.51, 8.51, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('106', 6, 8.0, 8.0, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('116', 6, 8.9, 8.9, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('122', 6, 7.85, 7.85, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('123', 6, 7.95, 7.95, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('124', 6, 3.99, 3.99, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('126', 6, 10.0, 10.0, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('127', 6, 10.94, 10.94, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('154  C-18', 6, 1.46, 1.46, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('154  C-20', 6, 1.12, 1.12, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('159', 6, 10.27, 10.27, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('160', 6, 8.575, 8.575, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('170', 6, 9.31, 9.31, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('171', 6, 5.1, 5.1, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1400', 6, 7.083, 7.083, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1500', 6, 17.66, 17.66, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C050', 6, 2.58, 2.58, 4, 0,1001);
CALL SP_INSERTARPRODUCTO('C075', 6, 4.1833, 4.1833, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C100', 6, 5.49, 5.49, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C125', 6, 6.98, 6.98, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C150', 6, 8.36, 8.36, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C200', 6, 11.5, 11.5, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K100', 6, 8.68, 8.68, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K150', 6, 10.26, 10.26, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K200', 6, 12.05, 12.05, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K300', 6, 14.68, 14.68, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('M225', 6, 7.6, 7.6, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P100', 6, 7.87, 7.87, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P150', 6, 9.42, 9.42, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P200', 6, 10.8, 10.8, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P250', 6, 12.26, 12.26, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P300', 6, 13.51, 13.51, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P400', 6, 16.52, 16.52, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R100', 6, 4.1, 4.1, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R125', 6, 5.6, 5.6, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R150', 6, 5.6, 5.6, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R175', 6, 7.08, 7.08, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R200', 6, 8.32, 8.32, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R229', 6, 7.08, 7.08, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R249', 6, 10.475, 10.475, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R225', 6, 8.58, 8.58, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R250', 6, 11.4, 11.4, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R300', 6, 12.5, 12.5, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R400', 6, 15.25, 15.25, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K400 (3 MT)', 6, 15.0, 15.0, 7, 0,1001);
CALL SP_INSERTARPRODUCTO('1/2', 7, 2.17543, 2.17543, 9, 0,1001);
CALL SP_INSERTARPRODUCTO('5/8" C18', 7, 2.7, 2.7, 9, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4" C18', 8, 3.24, 3.24, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1" C16', 8, 5.43, 5.43, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1" C18', 8, 4.44, 4.44, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4" C18', 8, 5.64, 5.64, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2" C18', 8, 6.8, 6.8, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('2 C16', 8, 7.1, 7.1, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('2" C18', 8, 8.95, 8.95, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('3" C18', 8, 13.7, 13.7, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('Chico 3 X 3', 9, 6.0, 6.0, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('Grande 3 X 10', 9, 19.74, 19.74, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('Mediano 3 x 6.4', 9, 12.4, 12.4, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('Doble vista 3 x 3', 9, 6.64, 6.64, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('101', 10, 5.48, 5.48, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('103', 10, 6.475, 6.475, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('126', 10, 7.6, 7.6, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C075', 10, 3.1, 3.1, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C100', 10, 4.15, 4.15, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('C-150', 10, 6.4, 6.4, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P-100', 10, 5.88, 5.88, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('P-150', 10, 7.2, 7.2, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('K-150', 10, 8.4, 8.4, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R100', 10, 3.108, 3.108, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('R-200', 10, 6.4, 6.4, 1, 0,1001);
CALL SP_INSERTARPRODUCTO('101', 11, 7.2, 7.2, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('103', 11, 8.3, 8.3, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('122', 11, 7.4, 7.4, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('123', 11, 7.93, 7.93, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('124', 11, 3.96, 3.96, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('126', 11, 9.86, 9.86, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('127', 11, 11.4, 11.4, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('170', 11, 8.9, 8.9, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('1400', 11, 7.1, 7.1, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('1500', 11, 17.0, 17.0, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('C-075', 11, 3.98, 3.98, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('C-100', 11, 5.28, 5.28, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('C-125', 11, 6.96, 6.96, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('C-150', 11, 8.44, 8.44, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('K-100', 11, 9.0, 9.0, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('K-150', 11, 10.9, 10.9, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('K-300', 11, 14.57, 14.57, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('P-100', 11, 7.7, 7.7, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('P-150', 11, 9.3, 9.3, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('P-200', 11, 11.1, 11.1, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('P-300', 11, 13.5, 13.5, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('P-400', 11, 16.05, 16.05, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('R-100', 11, 4.033, 4.033, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('R-125', 11, 5.4, 5.4, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('R-200', 11, 8.1, 8.1, 5, 0,1001);
CALL SP_INSERTARPRODUCTO('R-300', 11, 12.15, 12.15, 5, 0,1001);

CALL SP_INSERTARPRODUCTO('3/4 x 1/8', 12, 5.6, 5.6, 12, 0,1001);
CALL SP_INSERTARPRODUCTO('1 x 1/8', 12, 7.3, 7.3, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1 x 3/16', 12, 10.5, 10.5, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 1/8', 12, 9.2, 9.2, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 3/16', 12, 13.0, 13.0, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 1/4', 12, 16.64, 16.64, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2x 1/8', 12, 11.2, 11.2, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 x 3/16', 12, 16.83, 16.83, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 X 1/4', 12, 23.0, 23.0, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('2 x 1/8', 12, 16.0, 16.0, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('2 x 3/16', 12, 22.58, 22.58, 14, 0,1001);
CALL SP_INSERTARPRODUCTO('2 x 1/4', 12, 29.0, 29.0, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 3/16', 12, 28.4, 28.4, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 1/4', 12, 37.3, 37.3, 13, 0,1001);
CALL SP_INSERTARPRODUCTO('3 X 1/8', 12, 23.0, 23.0, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('3 X 3/16', 12, 34.0, 34.0, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('3 x 1/4', 12, 44.3, 44.3, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('4 X 3/16', 12, 42.3, 42.3, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('4 X 1/4', 12, 60.45, 60.45, 15, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4 x 109', 13, 4.8, 4.8, 12, 0,1001);
CALL SP_INSERTARPRODUCTO('1 x 109', 13, 6.3, 6.3, 13, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4 x 109', 13, 8.05, 8.05, 13, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/2 x 109', 13, 10.07, 10.07, 13, 0,1001);
CALL SP_INSERTARPRODUCTO('3/8', 14, 4.5, 4.5, 18, 0,1001);
CALL SP_INSERTARPRODUCTO('12 MM', 14, 6.79, 6.79, 18, 2,1001);
CALL SP_INSERTARPRODUCTO('1/2', 14, 7.8, 7.8, 18, 0,1001);
CALL SP_INSERTARPRODUCTO('5/8', 14, 12.2, 12.2, 18, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4', 14, 17.2, 17.2, 18, 0,1001);
CALL SP_INSERTARPRODUCTO('1"', 14, 31.7, 31.7, 31, 0,1001);
CALL SP_INSERTARPRODUCTO('3/16', 15, 0.811, 0.811, 16, 0,1001);
CALL SP_INSERTARPRODUCTO('1/4', 15, 1.5, 1.5, 17, 0,1001);
CALL SP_INSERTARPRODUCTO('.5/16', 15, 2.5, 2.5, 16, 0,1001);
CALL SP_INSERTARPRODUCTO('3/8', 15, 3.5, 3.5, 21, 0,1001);
CALL SP_INSERTARPRODUCTO('1/2', 15, 6.14, 6.14, 20, 0,1001);
CALL SP_INSERTARPRODUCTO('5/8', 15, 9.6, 9.6, 20, 0,1001);
CALL SP_INSERTARPRODUCTO('3/4', 15, 13.7, 13.7, 20, 0,1001);
CALL SP_INSERTARPRODUCTO('12 MM', 15, 5.5, 5.5, 20, 0,1001);
CALL SP_INSERTARPRODUCTO('1', 15, 24.4, 24.4, 19, 0,1001);
CALL SP_INSERTARPRODUCTO('1 1/4"', 15, 22.2, 22.2, 19, 0,1001);
CALL SP_INSERTARPRODUCTO('3/8', 16, 5.3, 5.3, 30, 0,1001);
CALL SP_INSERTARPRODUCTO('12 MM', 16, 7.0, 7.0, 30, 0,1001);
CALL SP_INSERTARPRODUCTO('1/2', 16, 7.8, 7.8, 30, 0,1001);
CALL SP_INSERTARPRODUCTO('5/8', 16, 12.2, 12.2, 30, 0,1001);
CALL SP_INSERTARPRODUCTO('1/2 x 1/8', 17, 1.8, 1.8, 22, 2.3,1001);
CALL SP_INSERTARPRODUCTO('1/2 x 3/16', 17, 2.8, 2.8, 22, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1/2 x 1/4', 17, 4.0, 4.0, 23, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3/4 x 1/8', 17, 3.0, 3.0, 23, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3/4 x 3/16', 17, 4.4, 4.4, 23, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3/4 X 1/4', 17, 5.69, 5.69, 23, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 x 1/8 placa', 17, 4.0, 4.0, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 x 3/16', 17, 6.0, 6.0, 27, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 x 1/4', 17, 8.0, 8.0, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 x 3/8', 17, 11.3, 11.3, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 1/8', 17, 5.0, 5.0, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 3/16', 17, 7.3, 7.3, 27, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 1/4', 17, 9.7, 9.7, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/4 x 3/8', 17, 14.4, 14.4, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 x 1/8', 17, 6.0, 6.0, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 x 3/16', 17, 8.8, 8.8, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 x 1/4', 17, 11.6, 11.6, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 x 3/8', 17, 17.45, 17.45, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1-1/2 X 1/2', 17, 23.0, 23.0, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2 x 1/8', 17, 8.1, 8.1, 25, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2 x 3/16', 17, 11.6, 11.6, 26, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2 x 1/4', 17, 15.5, 15.5, 26, 2.0,1001);
CALL SP_INSERTARPRODUCTO('2 x 3/8', 17, 23.0, 23.0, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 1/8', 17, 9.6, 9.6, 34, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 X 3/16', 17, 14.2, 14.2, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 1/4', 17, 19.4, 19.4, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('2-1/2 x 3/8', 17, 28.6, 28.6, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3 x 1/8', 17, 10.88, 10.88, 34, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3 x 3/16', 17, 17.42, 17.42, 34, 0.3,1001);
CALL SP_INSERTARPRODUCTO('3 x 1/4', 17, 23.2, 23.2, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('3 x 3/8', 17, 34.8, 34.8, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('4 X 3/16', 17, 22.6, 22.6, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('4 x 1/4', 17, 31.0, 31.0, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('4 x 3/8', 17, 46.0, 46.0, 28, 0.0,1001);
CALL SP_INSERTARPRODUCTO('1 x 1/8', 18, 7.1, 7.1, 29, 0,1001);
--


CALL SP_REGISTRAREMPLEADO('123456','Francisco', 'Leal', 'Medina', '4459721648', '32', 3, 1, 2,1001);



CALL SP_REGISTRARSUCURSAL('38800', 72856, 'Ejemplo 21', 'Sucursal Ejemplo', '4451239843',1001);


SELECT * FROM CLIENTE;
SELECT * FROM BITACORA;

SELECT * FROM CATEGORIAPRODUCTO;

SELECT * FROM PRODUCTO;

SELECT * FROM SUBCATEGORIA;

UPDATE EMPLEADO SET IdEstatus = 1 WHERE IdEmpleado = 1;

UPDATE EMPLEADO SET IdRol = 3 WHERE IdEmpleado = 2;

SELECT * FROM USUARIO;

UPDATE USUARIO SET Contrase√±a = '$2b$10$VuHF8B70UNBN.MmD6vS20eigaxYkUjkCi.mcxtRVJqQwpnDkua2jq' WHERE IdUsuario = 1001;

SELECT * FROM PERSONA;
UPDATE EMPLEADO SET IdSucursal = 2 WHERE IdEmpleado = 1;
select * from CODIGOPOSTAL;

CALL SP_OBTENERCOLONIAS('20263');


